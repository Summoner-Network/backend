// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/x64/inst.isle
// - src/isa/x64/lower.isle
// - /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle
// - /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-codegen-4824050771d6eebd/out/clif_lower.isle

use super::*;  // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self, ) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u8_try_from_u64(&mut self, arg0: u64) -> Option<u8>;
    fn u8_try_from_u16(&mut self, arg0: u16) -> Option<u8>;
    fn u8_try_from_i32(&mut self, arg0: i32) -> Option<u8>;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn u64_try_from_i64(&mut self, arg0: i64) -> Option<u64>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn i32_as_i8(&mut self, arg0: i32) -> Option<i8>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self, ) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self, ) -> TrapCode;
    fn trap_code_integer_overflow(&mut self, ) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self, ) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self, ) -> ValueRegs;
    fn output_none(&mut self, ) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self, ) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self, ) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self, ) -> Option<Unit>;
    fn tls_model_is_macho(&mut self, ) -> Option<Unit>;
    fn tls_model_is_coff(&mut self, ) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self, ) -> Option<Unit>;
    fn stack_switch_model(&mut self, ) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(&mut self, arg0: GlobalValue) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_unwrap_ret_area_ptr(&mut self, ) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_return_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn box_synthetic_amode(&mut self, arg0: &SyntheticAmode) -> BoxSyntheticAmode;
    fn operand_size_of_type_32_64(&mut self, arg0: Type) -> OperandSize;
    fn raw_operand_size_of_type(&mut self, arg0: Type) -> OperandSize;
    fn put_in_reg_mem_imm(&mut self, arg0: Value) -> RegMemImm;
    fn put_in_reg_mem(&mut self, arg0: Value) -> RegMem;
    fn synthetic_amode_to_reg_mem(&mut self, arg0: &SyntheticAmode) -> RegMem;
    fn amode_to_synthetic_amode(&mut self, arg0: &Amode) -> SyntheticAmode;
    fn sum_extend_fits_in_32_bits(&mut self, arg0: Type, arg1: Imm64, arg2: Offset32) -> Option<u32>;
    fn amode_offset(&mut self, arg0: &Amode, arg1: i32) -> Amode;
    fn zero_offset(&mut self, ) -> Offset32;
    fn intcc_to_cc(&mut self, arg0: &IntCC) -> CC;
    fn cc_invert(&mut self, arg0: &CC) -> CC;
    fn cc_nz_or_z(&mut self, arg0: &CC) -> Option<CC>;
    fn encode_fcmp_imm(&mut self, arg0: &FcmpImm) -> u8;
    fn encode_round_imm(&mut self, arg0: &RoundImm) -> u8;
    fn imm8_reg_to_imm8_gpr(&mut self, arg0: &Imm8Reg) -> Imm8Gpr;
    fn gpr_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<Gpr>;
    fn imm8_from_imm8_gpr(&mut self, arg0: &Imm8Gpr) -> Option<u8>;
    fn writable_gpr_to_reg(&mut self, arg0: WritableGpr) -> WritableReg;
    fn writable_xmm_to_reg(&mut self, arg0: WritableXmm) -> WritableReg;
    fn writable_reg_to_xmm(&mut self, arg0: WritableReg) -> WritableXmm;
    fn writable_xmm_to_xmm(&mut self, arg0: WritableXmm) -> Xmm;
    fn writable_gpr_to_gpr(&mut self, arg0: WritableGpr) -> Gpr;
    fn gpr_to_reg(&mut self, arg0: Gpr) -> Reg;
    fn gpr_to_gpr_mem(&mut self, arg0: Gpr) -> GprMem;
    fn gpr_to_gpr_mem_imm(&mut self, arg0: Gpr) -> GprMemImm;
    fn xmm_to_reg(&mut self, arg0: Xmm) -> Reg;
    fn xmm_to_xmm_mem_imm(&mut self, arg0: Xmm) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_imm(&mut self, arg0: &XmmMem) -> XmmMemImm;
    fn xmm_mem_to_xmm_mem_aligned(&mut self, arg0: &XmmMem) -> XmmMemAligned;
    fn xmm_mem_imm_to_xmm_mem_aligned_imm(&mut self, arg0: &XmmMemImm) -> XmmMemAlignedImm;
    fn temp_writable_gpr(&mut self, ) -> WritableGpr;
    fn temp_writable_xmm(&mut self, ) -> WritableXmm;
    fn reg_mem_to_xmm_mem(&mut self, arg0: &RegMem) -> XmmMem;
    fn reg_to_reg_mem_imm(&mut self, arg0: Reg) -> RegMemImm;
    fn gpr_mem_imm_new(&mut self, arg0: &RegMemImm) -> GprMemImm;
    fn xmm_mem_imm_new(&mut self, arg0: &RegMemImm) -> XmmMemImm;
    fn xmm_to_xmm_mem(&mut self, arg0: Xmm) -> XmmMem;
    fn xmm_mem_to_reg_mem(&mut self, arg0: &XmmMem) -> RegMem;
    fn gpr_mem_to_reg_mem(&mut self, arg0: &GprMem) -> RegMem;
    fn xmm_new(&mut self, arg0: Reg) -> Xmm;
    fn gpr_new(&mut self, arg0: Reg) -> Gpr;
    fn reg_mem_to_gpr_mem(&mut self, arg0: &RegMem) -> GprMem;
    fn reg_to_gpr_mem(&mut self, arg0: Reg) -> GprMem;
    fn put_in_xmm_mem(&mut self, arg0: Value) -> XmmMem;
    fn put_in_xmm_mem_imm(&mut self, arg0: Value) -> XmmMemImm;
    fn gpr_to_imm8_gpr(&mut self, arg0: Gpr) -> Imm8Gpr;
    fn imm8_to_imm8_gpr(&mut self, arg0: u8) -> Imm8Gpr;
    fn xmi_imm(&mut self, arg0: u32) -> XmmMemImm;
    fn type_register_class(&mut self, arg0: Type) -> Option<RegisterClass>;
    fn use_avx512vl(&mut self, ) -> bool;
    fn use_avx512dq(&mut self, ) -> bool;
    fn use_avx512f(&mut self, ) -> bool;
    fn use_avx512bitalg(&mut self, ) -> bool;
    fn use_avx512vbmi(&mut self, ) -> bool;
    fn use_lzcnt(&mut self, ) -> bool;
    fn use_bmi1(&mut self, ) -> bool;
    fn use_bmi2(&mut self, ) -> bool;
    fn use_popcnt(&mut self, ) -> bool;
    fn use_fma(&mut self, ) -> bool;
    fn use_ssse3(&mut self, ) -> bool;
    fn use_sse41(&mut self, ) -> bool;
    fn use_sse42(&mut self, ) -> bool;
    fn use_avx(&mut self, ) -> bool;
    fn use_avx2(&mut self, ) -> bool;
    fn use_cmpxchg16b(&mut self, ) -> bool;
    fn imm8_from_value(&mut self, arg0: Value) -> Option<Imm8Reg>;
    fn const_to_type_masked_imm8(&mut self, arg0: u64, arg1: Type) -> Imm8Gpr;
    fn shift_mask(&mut self, arg0: Type) -> u8;
    fn shift_amount_masked(&mut self, arg0: Type, arg1: Imm64) -> u8;
    fn simm32_from_value(&mut self, arg0: Value) -> Option<GprMemImm>;
    fn sinkable_load(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sinkable_load_exact(&mut self, arg0: Value) -> Option<SinkableLoad>;
    fn sink_load(&mut self, arg0: &SinkableLoad) -> SyntheticAmode;
    fn ext_mode(&mut self, arg0: u16, arg1: u16) -> ExtMode;
    fn gen_call(&mut self, arg0: SigRef, arg1: ExternalName, arg2: RelocDistance, arg3: ValueSlice) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn writable_invalid_gpr(&mut self, ) -> WritableGpr;
    fn is_imm8(&mut self, arg0: &GprMemImm) -> Option<u8>;
    fn is_simm8(&mut self, arg0: &GprMemImm) -> Option<i8>;
    fn is_imm16(&mut self, arg0: &GprMemImm) -> Option<u16>;
    fn is_simm16(&mut self, arg0: &GprMemImm) -> Option<i16>;
    fn is_imm32(&mut self, arg0: &GprMemImm) -> Option<u32>;
    fn is_simm32(&mut self, arg0: &GprMemImm) -> Option<i32>;
    fn is_gpr(&mut self, arg0: &GprMemImm) -> Option<Gpr>;
    fn is_gpr_mem(&mut self, arg0: &GprMemImm) -> Option<GprMem>;
    fn is_xmm_mem(&mut self, arg0: &XmmMem) -> Option<XmmMem>;
    fn is_xmm(&mut self, arg0: &XmmMem) -> Option<Xmm>;
    fn nonzero_u64_fits_in_u32(&mut self, arg0: u64) -> Option<u64>;
    fn ty_int_bool_or_ref(&mut self, arg0: Type) -> Option<()>;
    fn shuffle_0_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_0_15_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn shuffle_16_31_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask(&mut self, arg0: &VecMask) -> VCodeConstant;
    fn perm_from_mask_with_zeros(&mut self, arg0: &VecMask) -> Option<(VCodeConstant, VCodeConstant)>;
    fn const_to_synthetic_amode(&mut self, arg0: VCodeConstant) -> SyntheticAmode;
    fn preg_rbp(&mut self, ) -> PReg;
    fn preg_rsp(&mut self, ) -> PReg;
    fn preg_pinned(&mut self, ) -> PReg;
    fn libcall_1(&mut self, arg0: &LibCall, arg1: Reg) -> Reg;
    fn libcall_2(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg) -> Reg;
    fn libcall_3(&mut self, arg0: &LibCall, arg1: Reg, arg2: Reg, arg3: Reg) -> Reg;
    fn ishl_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ishl_i8x16_mask_table(&mut self, ) -> SyntheticAmode;
    fn ushr_i8x16_mask_for_const(&mut self, arg0: u32) -> SyntheticAmode;
    fn ushr_i8x16_mask_table(&mut self, ) -> SyntheticAmode;
    fn vconst_all_ones_or_all_zeros(&mut self, arg0: Constant) -> Option<()>;
    fn insert_i8x16_lane_hole(&mut self, arg0: u8) -> VCodeConstant;
    fn sse_insertps_lane_imm(&mut self, arg0: u8) -> u8;
    fn pblendw_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn palignr_imm_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshuflw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufhw_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_lhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn pshufd_rhs_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shufps_rev_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn x64_addb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_addw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_addl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_addq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_addb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_addw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_addl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_addq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_addl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_addq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_addb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_addb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_addq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_adcw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_adcl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_adcq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_adcb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_adcw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_adcl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_adcq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_adcl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_adcq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_adcb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_adcb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_adcq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_andw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_andl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_andq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_andb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_andw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_andl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_andq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_andl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_andq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_andb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_andb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_andq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_orw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_orl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_orq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_orb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_orw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_orl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_orq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_orl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_orq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_orb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_orb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_orpd_a_raw(&mut self, arg0: Xmm, arg1: &XmmMem) -> AssemblerOutputs;
    fn x64_shldw_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldw_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_shldl_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldq_mri_raw(&mut self, arg0: &GprMem, arg1: Gpr, arg2: u8) -> AssemblerOutputs;
    fn x64_shldl_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_shldq_mrc_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_subw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_subl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_subq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_subb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_subw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_subl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_subq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_subl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_subq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_subb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_subb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_subq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_sbbw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_sbbl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_sbbq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_sbbb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_sbbw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_sbbl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_sbbq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_sbbl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_sbbq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_sbbb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_sbbb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_sbbq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorb_i_raw(&mut self, arg0: u8) -> AssemblerOutputs;
    fn x64_xorw_i_raw(&mut self, arg0: u16) -> AssemblerOutputs;
    fn x64_xorl_i_raw(&mut self, arg0: u32) -> AssemblerOutputs;
    fn x64_xorq_i_sxl_raw(&mut self, arg0: i32) -> AssemblerOutputs;
    fn x64_xorb_mi_raw(&mut self, arg0: &GprMem, arg1: u8) -> AssemblerOutputs;
    fn x64_xorw_mi_raw(&mut self, arg0: &GprMem, arg1: u16) -> AssemblerOutputs;
    fn x64_xorl_mi_raw(&mut self, arg0: &GprMem, arg1: u32) -> AssemblerOutputs;
    fn x64_xorq_mi_sxl_raw(&mut self, arg0: &GprMem, arg1: i32) -> AssemblerOutputs;
    fn x64_xorl_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_xorq_mi_sxb_raw(&mut self, arg0: &GprMem, arg1: i8) -> AssemblerOutputs;
    fn x64_xorb_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorw_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorl_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorq_mr_raw(&mut self, arg0: &GprMem, arg1: Gpr) -> AssemblerOutputs;
    fn x64_xorb_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorw_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorl_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn x64_xorq_rm_raw(&mut self, arg0: Gpr, arg1: &GprMem) -> AssemblerOutputs;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) { (0, None) }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self { iter, _ctx: std::marker::PhantomData }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}
           

/// Internal type MultiReg: defined at src/prelude_lower.isle line 20.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One {
        a: Reg,
    },
    Two {
        a: Reg,
        b: Reg,
    },
    Three {
        a: Reg,
        b: Reg,
        c: Reg,
    },
    Four {
        a: Reg,
        b: Reg,
        c: Reg,
        d: Reg,
    },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 430.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 476.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect {
        inst: MInst,
    },
    ProducesFlagsTwiceSideEffect {
        inst1: MInst,
        inst2: MInst,
    },
    ProducesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ProducesFlagsReturnsResultWithConsumer {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 495.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect {
        inst: MInst,
    },
    ReturnsReg {
        inst: MInst,
        result: Reg,
    },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 503.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/x64/inst.isle line 7.
#[derive(Clone)]
pub enum MInst {
    Nop {
        len: u8,
    },
    AluRmiR {
        size: OperandSize,
        op: AluRmiROpcode,
        src1: Gpr,
        src2: GprMemImm,
        dst: WritableGpr,
    },
    AluRM {
        size: OperandSize,
        op: AluRmiROpcode,
        src1_dst: SyntheticAmode,
        src2: Gpr,
        lock: bool,
    },
    AluRmRVex {
        size: OperandSize,
        op: AluRmROpcode,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    AluConstOp {
        op: AluRmiROpcode,
        size: OperandSize,
        dst: WritableGpr,
    },
    UnaryRmR {
        size: OperandSize,
        op: UnaryRmROpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRVex {
        size: OperandSize,
        op: UnaryRmRVexOpcode,
        src: GprMem,
        dst: WritableGpr,
    },
    UnaryRmRImmVex {
        size: OperandSize,
        op: UnaryRmRImmVexOpcode,
        src: GprMem,
        dst: WritableGpr,
        imm: u8,
    },
    Not {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Neg {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Div {
        size: OperandSize,
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    Div8 {
        sign: DivSignedness,
        trap: TrapCode,
        divisor: GprMem,
        dividend: Gpr,
        dst: WritableGpr,
    },
    Mul {
        size: OperandSize,
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    MulX {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst_lo: WritableGpr,
        dst_hi: WritableGpr,
    },
    Mul8 {
        signed: bool,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMul {
        size: OperandSize,
        src1: Gpr,
        src2: GprMem,
        dst: WritableGpr,
    },
    IMulImm {
        size: OperandSize,
        src1: GprMem,
        src2: i32,
        dst: WritableGpr,
    },
    CheckedSRemSeq {
        size: OperandSize,
        dividend_lo: Gpr,
        dividend_hi: Gpr,
        divisor: Gpr,
        dst_quotient: WritableGpr,
        dst_remainder: WritableGpr,
    },
    CheckedSRemSeq8 {
        dividend: Gpr,
        divisor: Gpr,
        dst: WritableGpr,
    },
    SignExtendData {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Imm {
        dst_size: OperandSize,
        simm64: u64,
        dst: WritableGpr,
    },
    MovRR {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    MovFromPReg {
        src: PReg,
        dst: WritableGpr,
    },
    MovToPReg {
        src: Gpr,
        dst: PReg,
    },
    MovzxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    Mov64MR {
        src: SyntheticAmode,
        dst: WritableGpr,
    },
    LoadEffectiveAddress {
        addr: SyntheticAmode,
        dst: WritableGpr,
        size: OperandSize,
    },
    MovsxRmR {
        ext_mode: ExtMode,
        src: GprMem,
        dst: WritableGpr,
    },
    MovImmM {
        size: OperandSize,
        simm32: i32,
        dst: SyntheticAmode,
    },
    MovRM {
        size: OperandSize,
        src: Gpr,
        dst: SyntheticAmode,
    },
    ShiftR {
        size: OperandSize,
        kind: ShiftKind,
        src: Gpr,
        num_bits: Imm8Gpr,
        dst: WritableGpr,
    },
    XmmRmiReg {
        opcode: SseOpcode,
        src1: Xmm,
        src2: XmmMemAlignedImm,
        dst: WritableXmm,
    },
    CmpRmiR {
        size: OperandSize,
        opcode: CmpOpcode,
        src1: Gpr,
        src2: GprMemImm,
    },
    Setcc {
        cc: CC,
        dst: WritableGpr,
    },
    Bswap {
        size: OperandSize,
        src: Gpr,
        dst: WritableGpr,
    },
    Cmove {
        size: OperandSize,
        cc: CC,
        consequent: GprMem,
        alternative: Gpr,
        dst: WritableGpr,
    },
    XmmCmove {
        ty: Type,
        cc: CC,
        consequent: Xmm,
        alternative: Xmm,
        dst: WritableXmm,
    },
    Push64 {
        src: GprMemImm,
    },
    Pop64 {
        dst: WritableGpr,
    },
    StackProbeLoop {
        tmp: WritableReg,
        frame_size: u32,
        guard_size: u32,
    },
    XmmRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmRmRUnaligned {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlend {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmRmiRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMemImm,
        dst: WritableXmm,
    },
    XmmRmRImmVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmVexPinsr {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmRVex3 {
        op: AvxOpcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmRmRBlendVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
        mask: Xmm,
        dst: WritableXmm,
    },
    XmmUnaryRmRVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmVex {
        op: AvxOpcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmMovRMVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGprImmVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmmVex {
        op: AvxOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    XmmToGprVex {
        op: AvxOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmCmpRmRVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: XmmMem,
    },
    XmmRmREvex {
        op: Avx512Opcode,
        src1: Xmm,
        src2: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImmEvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
        imm: u8,
    },
    XmmRmREvex3 {
        op: Avx512Opcode,
        src1: Xmm,
        src2: Xmm,
        src3: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmR {
        op: SseOpcode,
        src: XmmMemAligned,
        dst: WritableXmm,
    },
    XmmUnaryRmRUnaligned {
        op: SseOpcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmUnaryRmRImm {
        op: SseOpcode,
        src: XmmMemAligned,
        imm: u8,
        dst: WritableXmm,
    },
    XmmUnaryRmREvex {
        op: Avx512Opcode,
        src: XmmMem,
        dst: WritableXmm,
    },
    XmmMovRM {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
    },
    XmmMovRMImm {
        op: SseOpcode,
        src: Xmm,
        dst: SyntheticAmode,
        imm: u8,
    },
    XmmToGpr {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        dst_size: OperandSize,
    },
    XmmToGprImm {
        op: SseOpcode,
        src: Xmm,
        dst: WritableGpr,
        imm: u8,
    },
    GprToXmm {
        op: SseOpcode,
        src: GprMem,
        dst: WritableXmm,
        src_size: OperandSize,
    },
    CvtIntToFloat {
        op: SseOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtIntToFloatVex {
        op: AvxOpcode,
        src1: Xmm,
        src2: GprMem,
        dst: WritableXmm,
        src2_size: OperandSize,
    },
    CvtUint64ToFloatSeq {
        dst_size: OperandSize,
        src: Gpr,
        dst: WritableXmm,
        tmp_gpr1: WritableGpr,
        tmp_gpr2: WritableGpr,
    },
    CvtFloatToSintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
    },
    CvtFloatToUintSeq {
        dst_size: OperandSize,
        src_size: OperandSize,
        is_saturating: bool,
        src: Xmm,
        dst: WritableGpr,
        tmp_gpr: WritableGpr,
        tmp_xmm: WritableXmm,
        tmp_xmm2: WritableXmm,
    },
    XmmMinMaxSeq {
        size: OperandSize,
        is_min: bool,
        lhs: Xmm,
        rhs: Xmm,
        dst: WritableXmm,
    },
    XmmCmpRmR {
        op: SseOpcode,
        src1: Xmm,
        src2: XmmMemAligned,
    },
    XmmRmRImm {
        op: SseOpcode,
        src1: Reg,
        src2: RegMem,
        dst: WritableReg,
        imm: u8,
        size: OperandSize,
    },
    CallKnown {
        info: BoxCallInfo,
    },
    CallUnknown {
        info: BoxCallIndInfo,
    },
    ReturnCallKnown {
        info: BoxReturnCallInfo,
    },
    ReturnCallUnknown {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        stack_bytes_to_pop: u32,
    },
    StackSwitchBasic {
        store_context_ptr: Gpr,
        load_context_ptr: Gpr,
        in_payload0: Gpr,
        out_payload0: WritableGpr,
    },
    JmpKnown {
        dst: MachLabel,
    },
    WinchJmpIf {
        cc: CC,
        taken: MachLabel,
    },
    JmpCond {
        cc: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpCondOr {
        cc1: CC,
        cc2: CC,
        taken: MachLabel,
        not_taken: MachLabel,
    },
    JmpTableSeq {
        idx: Reg,
        tmp1: WritableReg,
        tmp2: WritableReg,
        default_target: MachLabel,
        targets: BoxVecMachLabel,
    },
    JmpUnknown {
        target: RegMem,
    },
    TrapIf {
        cc: CC,
        trap_code: TrapCode,
    },
    TrapIfAnd {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    TrapIfOr {
        cc1: CC,
        cc2: CC,
        trap_code: TrapCode,
    },
    Hlt,
    Ud2 {
        trap_code: TrapCode,
    },
    LoadExtName {
        dst: WritableReg,
        name: BoxExternalName,
        offset: i64,
        distance: RelocDistance,
    },
    LockCmpxchg {
        ty: Type,
        replacement: Reg,
        expected: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    LockCmpxchg16b {
        replacement_low: Reg,
        replacement_high: Reg,
        expected_low: Reg,
        expected_high: Reg,
        mem: BoxSyntheticAmode,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    LockXadd {
        size: OperandSize,
        operand: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    Xchg {
        size: OperandSize,
        operand: Reg,
        mem: SyntheticAmode,
        dst_old: WritableReg,
    },
    AtomicRmwSeq {
        ty: Type,
        op: AtomicRmwSeqOp,
        mem: SyntheticAmode,
        operand: Reg,
        temp: WritableReg,
        dst_old: WritableReg,
    },
    Atomic128RmwSeq {
        op: Atomic128RmwSeqOp,
        mem: BoxSyntheticAmode,
        operand_low: Reg,
        operand_high: Reg,
        temp_low: WritableReg,
        temp_high: WritableReg,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    Atomic128XchgSeq {
        mem: SyntheticAmode,
        operand_low: Reg,
        operand_high: Reg,
        dst_old_low: WritableReg,
        dst_old_high: WritableReg,
    },
    Fence {
        kind: FenceKind,
    },
    XmmUninitializedValue {
        dst: WritableXmm,
    },
    ElfTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
    },
    CoffTlsGetAddr {
        symbol: ExternalName,
        dst: WritableGpr,
        tmp: WritableGpr,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    External {
        inst: AssemblerInst,
    },
}

/// Internal type DivSignedness: defined at src/isa/x64/inst.isle line 837.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum DivSignedness {
    Signed,
    Unsigned,
}

/// Internal type AluRmROpcode: defined at src/isa/x64/inst.isle line 880.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AluRmROpcode {
    Andn,
    Sarx,
    Shrx,
    Shlx,
    Bzhi,
}

/// Internal type UnaryRmRVexOpcode: defined at src/isa/x64/inst.isle line 894.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRVexOpcode {
    Blsi,
    Blsmsk,
    Blsr,
}

/// Internal type UnaryRmRImmVexOpcode: defined at src/isa/x64/inst.isle line 899.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryRmRImmVexOpcode {
    Rorx,
}

/// Internal type Amode: defined at src/isa/x64/inst.isle line 1147.
#[derive(Clone, Debug)]
pub enum Amode {
    ImmReg {
        simm32: i32,
        base: Reg,
        flags: MemFlags,
    },
    ImmRegRegShift {
        simm32: i32,
        base: Gpr,
        index: Gpr,
        shift: u8,
        flags: MemFlags,
    },
    RipRelative {
        target: MachLabel,
    },
}

/// Internal type AvxOpcode: defined at src/isa/x64/inst.isle line 1381.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AvxOpcode {
    Vfmadd213ss,
    Vfmadd213sd,
    Vfmadd213ps,
    Vfmadd213pd,
    Vfmadd132ss,
    Vfmadd132sd,
    Vfmadd132ps,
    Vfmadd132pd,
    Vfnmadd213ss,
    Vfnmadd213sd,
    Vfnmadd213ps,
    Vfnmadd213pd,
    Vfnmadd132ss,
    Vfnmadd132sd,
    Vfnmadd132ps,
    Vfnmadd132pd,
    Vfmsub213ss,
    Vfmsub213sd,
    Vfmsub213ps,
    Vfmsub213pd,
    Vfmsub132ss,
    Vfmsub132sd,
    Vfmsub132ps,
    Vfmsub132pd,
    Vfnmsub213ss,
    Vfnmsub213sd,
    Vfnmsub213ps,
    Vfnmsub213pd,
    Vfnmsub132ss,
    Vfnmsub132sd,
    Vfnmsub132ps,
    Vfnmsub132pd,
    Vcmpps,
    Vcmppd,
    Vpsrlw,
    Vpsrld,
    Vpsrlq,
    Vpaddb,
    Vpaddw,
    Vpaddd,
    Vpaddq,
    Vpaddsb,
    Vpaddsw,
    Vpaddusb,
    Vpaddusw,
    Vpsubb,
    Vpsubw,
    Vpsubd,
    Vpsubq,
    Vpsubsb,
    Vpsubsw,
    Vpsubusb,
    Vpsubusw,
    Vpavgb,
    Vpavgw,
    Vpand,
    Vandps,
    Vandpd,
    Vpor,
    Vorps,
    Vorpd,
    Vpxor,
    Vxorps,
    Vxorpd,
    Vpmullw,
    Vpmulld,
    Vpmulhw,
    Vpmulhd,
    Vpmulhrsw,
    Vpmulhuw,
    Vpmuldq,
    Vpmuludq,
    Vpunpckhwd,
    Vpunpcklwd,
    Vunpcklps,
    Vunpcklpd,
    Vunpckhps,
    Vandnps,
    Vandnpd,
    Vpandn,
    Vaddps,
    Vaddpd,
    Vsubps,
    Vsubpd,
    Vmulps,
    Vmulpd,
    Vdivps,
    Vdivpd,
    Vpcmpeqb,
    Vpcmpeqw,
    Vpcmpeqd,
    Vpcmpeqq,
    Vpcmpgtb,
    Vpcmpgtw,
    Vpcmpgtd,
    Vpcmpgtq,
    Vminps,
    Vminpd,
    Vmaxps,
    Vmaxpd,
    Vblendvpd,
    Vblendvps,
    Vpblendvb,
    Vmovlhps,
    Vpmaxsb,
    Vpmaxsw,
    Vpmaxsd,
    Vpminsb,
    Vpminsw,
    Vpminsd,
    Vpmaxub,
    Vpmaxuw,
    Vpmaxud,
    Vpminub,
    Vpminuw,
    Vpminud,
    Vpunpcklbw,
    Vpunpckhbw,
    Vpacksswb,
    Vpackssdw,
    Vpackuswb,
    Vpackusdw,
    Vpalignr,
    Vpinsrb,
    Vpinsrw,
    Vpinsrd,
    Vpinsrq,
    Vpmaddwd,
    Vpmaddubsw,
    Vinsertps,
    Vpshufb,
    Vshufps,
    Vpsllw,
    Vpslld,
    Vpsllq,
    Vpsraw,
    Vpsrad,
    Vpmovsxbw,
    Vpmovzxbw,
    Vpmovsxwd,
    Vpmovzxwd,
    Vpmovsxdq,
    Vpmovzxdq,
    Vaddss,
    Vaddsd,
    Vmulss,
    Vmulsd,
    Vsubss,
    Vsubsd,
    Vdivss,
    Vdivsd,
    Vpabsb,
    Vpabsw,
    Vpabsd,
    Vminss,
    Vminsd,
    Vmaxss,
    Vmaxsd,
    Vsqrtps,
    Vsqrtpd,
    Vroundps,
    Vroundpd,
    Vcvtdq2pd,
    Vcvtdq2ps,
    Vcvtpd2ps,
    Vcvtps2pd,
    Vcvttpd2dq,
    Vcvttps2dq,
    Vphaddw,
    Vphaddd,
    Vpunpckhdq,
    Vpunpckldq,
    Vpunpckhqdq,
    Vpunpcklqdq,
    Vpshuflw,
    Vpshufhw,
    Vpshufd,
    Vmovss,
    Vmovsd,
    Vmovups,
    Vmovupd,
    Vmovdqu,
    Vpextrb,
    Vpextrw,
    Vpextrd,
    Vpextrq,
    Vpblendw,
    Vmovddup,
    Vpbroadcastb,
    Vpbroadcastw,
    Vpbroadcastd,
    Vbroadcastss,
    Vmovd,
    Vmovq,
    Vmovmskps,
    Vmovmskpd,
    Vpmovmskb,
    Vcvtsi2ss,
    Vcvtsi2sd,
    Vcvtss2sd,
    Vcvtsd2ss,
    Vsqrtss,
    Vsqrtsd,
    Vroundss,
    Vroundsd,
    Vucomiss,
    Vucomisd,
    Vptest,
}

/// Internal type Avx512Opcode: defined at src/isa/x64/inst.isle line 1592.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Avx512Opcode {
    Vcvtudq2ps,
    Vpabsq,
    Vpermi2b,
    Vpmullq,
    Vpopcntb,
    Vpsraq,
    VpsraqImm,
}

/// Internal type RegisterClass: defined at src/isa/x64/inst.isle line 1883.
#[derive(Clone, Debug)]
pub enum RegisterClass {
    Gpr {
        single_register: bool,
    },
    Xmm,
}

/// Internal type ExtendKind: defined at src/isa/x64/inst.isle line 2343.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ExtendKind {
    Sign,
    Zero,
}

/// Internal type ZeroCond: defined at src/isa/x64/inst.isle line 5123.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ZeroCond {
    Zero,
    NonZero,
}

/// Internal type IcmpCondResult: defined at src/isa/x64/inst.isle line 5240.
#[derive(Clone, Debug)]
pub enum IcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
}

/// Internal type FcmpCondResult: defined at src/isa/x64/inst.isle line 5332.
#[derive(Clone, Debug)]
pub enum FcmpCondResult {
    Condition {
        producer: ProducesFlags,
        cc: CC,
    },
    AndCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
    OrCondition {
        producer: ProducesFlags,
        cc1: CC,
        cc2: CC,
    },
}

/// Internal type AtomicRmwSeqOp: defined at src/isa/x64/inst.isle line 5527.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRmwSeqOp {
    And,
    Nand,
    Or,
    Xor,
    Umin,
    Umax,
    Smin,
    Smax,
}

/// Internal type Atomic128RmwSeqOp: defined at src/isa/x64/inst.isle line 5547.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum Atomic128RmwSeqOp {
    Add,
    Sub,
    And,
    Nand,
    Or,
    Xor,
    Umin,
    Umax,
    Smin,
    Smax,
}

/// Internal type AssemblerOutputs: defined at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 1.
#[derive(Clone, Debug)]
pub enum AssemblerOutputs {
    SideEffect {
        inst: MInst,
    },
    RetGpr {
        inst: MInst,
        gpr: Gpr,
    },
    RetXmm {
        inst: MInst,
        xmm: Xmm,
    },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1_u64);
    // Rule at src/prelude.isle line 476.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 85.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 109.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0_usize, v2);
    // Rule at src/prelude_lower.isle line 163.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0_usize);
    // Rule at src/prelude_lower.isle line 174.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0 {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 185.
        return v6;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 184")
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Two {
        a: v1,
        b: v2,
    } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 190.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_pair", "src/prelude_lower.isle line 189")
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::One {
        a: v1,
    } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 195.
        return v3;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "multi_reg_to_single", "src/prelude_lower.isle line 194")
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 442.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 444.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 447.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_side_effect", "src/prelude_lower.isle line 441")
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 457.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst {
            inst: ref v1,
        } => {
            match arg1 {
                &SideEffectNoResult::Inst {
                    inst: ref v3,
                } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 462.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 464.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst {
                inst: ref v3,
            } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 466.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "side_effect_concat", "src/prelude_lower.isle line 461")
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect {
        inst: ref v1,
    } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v3,
        } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 491.
            return v4;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_concat", "src/prelude_lower.isle line 490")
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 521.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 522.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_get_reg", "src/prelude_lower.isle line 520")
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v1.clone(),
            };
            // Rule at src/prelude_lower.isle line 527.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect {
                inst: v4.clone(),
            };
            // Rule at src/prelude_lower.isle line 529.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "produces_flags_ignore", "src/prelude_lower.isle line 526")
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect {
            inst: ref v8,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v9,
            } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 542.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1 {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 536.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "consumes_flags_concat", "src/prelude_lower.isle line 535")
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v12,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 573.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 579.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 591.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 607.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 614.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 627.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v9,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 567.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 559.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags", "src/prelude_lower.isle line 557")
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0_usize);
    // Rule at src/prelude_lower.isle line 645.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 652.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v3 = SideEffectNoResult::Inst {
                        inst: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 663.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 668.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v7,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect {
                    inst: ref v2,
                } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 673.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 678.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect {
                inst: ref v2,
            } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 683.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_side_effect", "src/prelude_lower.isle line 661")
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect {
            inst: ref v1,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 692.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 700.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One {
                                a: v15,
                            };
                            // Rule at src/prelude_lower.isle line 709.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v27 = MultiReg::Two {
                                a: v24,
                                b: v26,
                            };
                            // Rule at src/prelude_lower.isle line 717.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v39 = MultiReg::Two {
                                a: v37,
                                b: v38,
                            };
                            // Rule at src/prelude_lower.isle line 726.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src/prelude_lower.isle line 786.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One {
                                a: v48,
                            };
                            // Rule at src/prelude_lower.isle line 794.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two {
                                a: v48,
                                b: v15,
                            };
                            // Rule at src/prelude_lower.isle line 803.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 811.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 820.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect {
                    inst: ref v3,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src/prelude_lower.isle line 739.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One {
                                a: v41,
                            };
                            // Rule at src/prelude_lower.isle line 747.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two {
                                a: v41,
                                b: v15,
                            };
                            // Rule at src/prelude_lower.isle line 756.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 764.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 773.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect {
                            inst: ref v5,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src/prelude_lower.isle line 833.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two {
                                a: v41,
                                b: v48,
                            };
                            // Rule at src/prelude_lower.isle line 841.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 850.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                            let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 858.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                            let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 867.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1 {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect {
                        inst: ref v5,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src/prelude_lower.isle line 879.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two {
                            a: v59,
                            b: v48,
                        };
                        // Rule at src/prelude_lower.isle line 887.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 904.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 896.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0_usize);
                        let v26 = C::value_regs_get(ctx, v20, 0x1_usize);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 912.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0_usize);
                        let v38 = C::value_regs_get(ctx, v32, 0x1_usize);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 921.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "with_flags_chained", "src/prelude_lower.isle line 689")
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(
    ctx: &mut C,
    arg0: ValueSlice,
) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1124.
    return v2;
}

// Generated as internal constructor for term operand_size_bits.
pub fn constructor_operand_size_bits<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
) -> u16 {
    match arg0 {
        &OperandSize::Size8 => {
            // Rule at src/isa/x64/inst.isle line 866.
            return 0x8_u16;
        }
        &OperandSize::Size16 => {
            // Rule at src/isa/x64/inst.isle line 867.
            return 0x10_u16;
        }
        &OperandSize::Size32 => {
            // Rule at src/isa/x64/inst.isle line 868.
            return 0x20_u16;
        }
        &OperandSize::Size64 => {
            // Rule at src/isa/x64/inst.isle line 869.
            return 0x40_u16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "operand_size_bits", "src/isa/x64/inst.isle line 865")
}

// Generated as internal constructor for term reg_mem_to_reg_mem_imm.
pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &RegMem,
) -> RegMemImm {
    match arg0 {
        &RegMem::Reg {
            reg: v1,
        } => {
            let v2 = RegMemImm::Reg {
                reg: v1,
            };
            // Rule at src/isa/x64/inst.isle line 1120.
            return v2;
        }
        &RegMem::Mem {
            addr: ref v3,
        } => {
            let v4 = RegMemImm::Mem {
                addr: v3.clone(),
            };
            // Rule at src/isa/x64/inst.isle line 1122.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "reg_mem_to_reg_mem_imm", "src/isa/x64/inst.isle line 1119")
}

// Generated as internal constructor for term to_amode.
pub fn constructor_to_amode<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6 {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v12 = &constructor_to_amode_add(ctx, arg0, v9.0, v9.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1239.
                return v12.clone();
            }
        }
    }
    let v3 = &constructor_amode_imm_reg(ctx, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 1237.
    return v3.clone();
}

// Generated as internal constructor for term to_amode_add.
pub fn constructor_to_amode_add<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v38 = C::def_inst(ctx, arg2);
    if let Some(v39) = v38 {
        let v40 = &C::inst_data(ctx, v39);
        if let &InstructionData::Binary {
            opcode: ref v41,
            args: ref v42,
        } = v40 {
            if let &Opcode::Iadd = v41 {
                let v43 = C::unpack_value_array_2(ctx, v42);
                let v52 = C::i32_from_iconst(ctx, v43.0);
                if let Some(v53) = v52 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v54 = C::s32_add_fallible(ctx, v7, v53);
                    if let Some(v55) = v54 {
                        let v56 = C::i32_to_offset32(ctx, v55);
                        let v57 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.1, v56);
                        // Rule at src/isa/x64/inst.isle line 1277.
                        return v57.clone();
                    }
                }
                let v46 = C::i32_from_iconst(ctx, v43.1);
                if let Some(v47) = v46 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v48 = C::s32_add_fallible(ctx, v7, v47);
                    if let Some(v49) = v48 {
                        let v50 = C::i32_to_offset32(ctx, v49);
                        let v51 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, v43.0, v50);
                        // Rule at src/isa/x64/inst.isle line 1274.
                        return v51.clone();
                    }
                }
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Binary {
            opcode: ref v21,
            args: ref v22,
        } = v20 {
            if let &Opcode::Iadd = v21 {
                let v23 = C::unpack_value_array_2(ctx, v22);
                let v32 = C::i32_from_iconst(ctx, v23.0);
                if let Some(v33) = v32 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v34 = C::s32_add_fallible(ctx, v7, v33);
                    if let Some(v35) = v34 {
                        let v36 = C::i32_to_offset32(ctx, v35);
                        let v37 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.1, arg2, v36);
                        // Rule at src/isa/x64/inst.isle line 1271.
                        return v37.clone();
                    }
                }
                let v26 = C::i32_from_iconst(ctx, v23.1);
                if let Some(v27) = v26 {
                    let v7 = C::offset32_to_i32(ctx, arg3);
                    let v28 = C::s32_add_fallible(ctx, v7, v27);
                    if let Some(v29) = v28 {
                        let v30 = C::i32_to_offset32(ctx, v29);
                        let v31 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v23.0, arg2, v30);
                        // Rule at src/isa/x64/inst.isle line 1268.
                        return v31.clone();
                    }
                }
            }
        }
    }
    let v12 = C::i32_from_iconst(ctx, arg1);
    if let Some(v13) = v12 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v14 = C::s32_add_fallible(ctx, v7, v13);
        if let Some(v15) = v14 {
            let v16 = C::i32_to_offset32(ctx, v15);
            let v17 = &constructor_amode_imm_reg(ctx, arg0, arg2, v16);
            // Rule at src/isa/x64/inst.isle line 1265.
            return v17.clone();
        }
    }
    let v5 = C::i32_from_iconst(ctx, arg2);
    if let Some(v6) = v5 {
        let v7 = C::offset32_to_i32(ctx, arg3);
        let v8 = C::s32_add_fallible(ctx, v7, v6);
        if let Some(v9) = v8 {
            let v10 = C::i32_to_offset32(ctx, v9);
            let v11 = &constructor_amode_imm_reg(ctx, arg0, arg1, v10);
            // Rule at src/isa/x64/inst.isle line 1262.
            return v11.clone();
        }
    }
    let v4 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/x64/inst.isle line 1260.
    return v4.clone();
}

// Generated as internal constructor for term amode_imm_reg.
pub fn constructor_amode_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> Amode {
    let v6 = C::def_inst(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = &C::inst_data(ctx, v7);
        if let &InstructionData::Binary {
            opcode: ref v9,
            args: ref v10,
        } = v8 {
            if let &Opcode::Iadd = v9 {
                let v11 = C::unpack_value_array_2(ctx, v10);
                let v14 = &constructor_amode_imm_reg_reg_shift(ctx, arg0, v11.0, v11.1, arg2);
                // Rule at src/isa/x64/inst.isle line 1291.
                return v14.clone();
            }
        }
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v3 = C::offset32_to_i32(ctx, arg2);
    let v5 = Amode::ImmReg {
        simm32: v3,
        base: v4,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1289.
    return v5;
}

// Generated as internal constructor for term amode_imm_reg_reg_shift.
pub fn constructor_amode_imm_reg_reg_shift<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> Amode {
    let v30 = C::def_inst(ctx, arg1);
    if let Some(v31) = v30 {
        let v32 = &C::inst_data(ctx, v31);
        if let &InstructionData::Binary {
            opcode: ref v33,
            args: ref v34,
        } = v32 {
            if let &Opcode::Ishl = v33 {
                let v35 = C::unpack_value_array_2(ctx, v34);
                let v38 = C::def_inst(ctx, v35.1);
                if let Some(v39) = v38 {
                    let v40 = &C::inst_data(ctx, v39);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v41,
                        imm: v42,
                    } = v40 {
                        if let &Opcode::Iconst = v41 {
                            let v43 = C::uimm8(ctx, v42);
                            if let Some(v44) = v43 {
                                let v45 = C::u8_as_u32(ctx, v44);
                                let v46 = C::u32_lteq(ctx, v45, 0x3_u32);
                                if let Some(v47) = v46 {
                                    let v48 = constructor_put_in_gpr(ctx, arg2);
                                    let v49 = constructor_put_in_gpr(ctx, v35.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v50 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v48,
                                        index: v49,
                                        shift: v44,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1308.
                                    return v50;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v9 = C::def_inst(ctx, arg2);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Binary {
            opcode: ref v12,
            args: ref v13,
        } = v11 {
            if let &Opcode::Ishl = v12 {
                let v14 = C::unpack_value_array_2(ctx, v13);
                let v17 = C::def_inst(ctx, v14.1);
                if let Some(v18) = v17 {
                    let v19 = &C::inst_data(ctx, v18);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v20,
                        imm: v21,
                    } = v19 {
                        if let &Opcode::Iconst = v20 {
                            let v22 = C::uimm8(ctx, v21);
                            if let Some(v23) = v22 {
                                let v24 = C::u8_as_u32(ctx, v23);
                                let v26 = C::u32_lteq(ctx, v24, 0x3_u32);
                                if let Some(v27) = v26 {
                                    let v5 = constructor_put_in_gpr(ctx, arg1);
                                    let v28 = constructor_put_in_gpr(ctx, v14.0);
                                    let v4 = C::offset32_to_i32(ctx, arg3);
                                    let v29 = Amode::ImmRegRegShift {
                                        simm32: v4,
                                        base: v5,
                                        index: v28,
                                        shift: v23,
                                        flags: arg0,
                                    };
                                    // Rule at src/isa/x64/inst.isle line 1305.
                                    return v29;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = constructor_put_in_gpr(ctx, arg2);
    let v4 = C::offset32_to_i32(ctx, arg3);
    let v8 = Amode::ImmRegRegShift {
        simm32: v4,
        base: v5,
        index: v6,
        shift: 0x0_u8,
        flags: arg0,
    };
    // Rule at src/isa/x64/inst.isle line 1303.
    return v8;
}

// Generated as internal constructor for term put_masked_in_imm8_gpr.
pub fn constructor_put_masked_in_imm8_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
) -> Imm8Gpr {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::UnaryImm {
            opcode: ref v4,
            imm: v5,
        } = v3 {
            if let &Opcode::Iconst = v4 {
                let v6 = C::u64_from_imm64(ctx, v5);
                let v8 = &C::const_to_type_masked_imm8(ctx, v6, arg1);
                // Rule at src/isa/x64/inst.isle line 1345.
                return v8.clone();
            }
        }
    }
    let v9 = C::fits_in_16(ctx, arg1);
    if let Some(v10) = v9 {
        let v12 = C::put_in_regs(ctx, arg0);
        let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0_usize);
        let v15 = C::shift_mask(ctx, v10);
        let v16 = C::u8_as_u32(ctx, v15);
        let v17 = RegMemImm::Imm {
            simm32: v16,
        };
        let v18 = &C::gpr_mem_imm_new(ctx, &v17);
        let v19 = constructor_x64_and(ctx, I64, v14, v18);
        let v20 = &C::gpr_to_imm8_gpr(ctx, v19);
        // Rule at src/isa/x64/inst.isle line 1347.
        return v20.clone();
    }
    let v12 = C::put_in_regs(ctx, arg0);
    let v14 = constructor_value_regs_get_gpr(ctx, v12, 0x0_usize);
    let v21 = &C::gpr_to_imm8_gpr(ctx, v14);
    // Rule at src/isa/x64/inst.isle line 1349.
    return v21.clone();
}

// Generated as internal constructor for term reg_to_gpr_mem_imm.
pub fn constructor_reg_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> GprMemImm {
    let v1 = C::gpr_new(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem_imm(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1785.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr.
pub fn constructor_put_in_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::type_register_class(ctx, v1);
    if let Some(v3) = v2 {
        match v3 {
            &RegisterClass::Gpr {
                single_register: v4,
            } => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v6 = C::gpr_new(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 1796.
                return v6;
            }
            &RegisterClass::Xmm => {
                let v5 = C::put_in_reg(ctx, arg0);
                let v8 = C::xmm_new(ctx, v5);
                let v7 = C::ty_bits(ctx, v1);
                let v9 = constructor_bitcast_xmm_to_gpr(ctx, v7, v8);
                // Rule at src/isa/x64/inst.isle line 1803.
                return v9;
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_in_gpr", "src/isa/x64/inst.isle line 1793")
}

// Generated as internal constructor for term put_in_gpr_mem.
pub fn constructor_put_in_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> GprMem {
    let v1 = &C::put_in_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1812.
    return v2.clone();
}

// Generated as internal constructor for term put_in_gpr_mem_imm.
pub fn constructor_put_in_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> GprMemImm {
    let v1 = &C::put_in_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1819.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm.
pub fn constructor_put_in_xmm<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Xmm {
    let v1 = C::put_in_reg(ctx, arg0);
    let v2 = C::xmm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1826.
    return v2;
}

// Generated as internal constructor for term output_gpr.
pub fn constructor_output_gpr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
) -> InstOutput {
    let v1 = C::gpr_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1845.
    return v2;
}

// Generated as internal constructor for term value_gprs.
pub fn constructor_value_gprs<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> ValueRegs {
    let v2 = C::gpr_to_reg(ctx, arg0);
    let v3 = C::gpr_to_reg(ctx, arg1);
    let v4 = C::value_regs(ctx, v2, v3);
    // Rule at src/isa/x64/inst.isle line 1850.
    return v4;
}

// Generated as internal constructor for term output_xmm.
pub fn constructor_output_xmm<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> InstOutput {
    let v1 = C::xmm_to_reg(ctx, arg0);
    let v2 = constructor_output_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1855.
    return v2;
}

// Generated as internal constructor for term value_regs_get_gpr.
pub fn constructor_value_regs_get_gpr<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: usize,
) -> Gpr {
    let v2 = C::value_regs_get(ctx, arg0, arg1);
    let v3 = C::gpr_new(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 1862.
    return v3;
}

// Generated as internal constructor for term lo_gpr.
pub fn constructor_lo_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Gpr {
    let v1 = constructor_lo_reg(ctx, arg0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 1875.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem_imm.
pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMemImm {
    let v1 = &constructor_sink_load_to_reg_mem_imm(ctx, arg0);
    let v2 = &C::gpr_mem_imm_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2014.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_xmm_mem.
pub fn constructor_sink_load_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> XmmMem {
    let v1 = &constructor_sink_load_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2018.
    return v2.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem.
pub fn constructor_sink_load_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 2022.
    return v2;
}

// Generated as internal constructor for term sink_load_to_gpr_mem.
pub fn constructor_sink_load_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> GprMem {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    let v3 = &C::reg_mem_to_gpr_mem(ctx, &v2);
    // Rule at src/isa/x64/inst.isle line 2025.
    return v3.clone();
}

// Generated as internal constructor for term sink_load_to_reg_mem_imm.
pub fn constructor_sink_load_to_reg_mem_imm<C: Context>(
    ctx: &mut C,
    arg0: &SinkableLoad,
) -> RegMemImm {
    let v1 = &C::sink_load(ctx, arg0);
    let v2 = RegMemImm::Mem {
        addr: v1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 2030.
    return v2;
}

// Generated as internal constructor for term xmm_uninit_value.
pub fn constructor_xmm_uninit_value<C: Context>(
    ctx: &mut C,
) -> Xmm {
    let v0 = C::temp_writable_xmm(ctx);
    let v1 = MInst::XmmUninitializedValue {
        dst: v0,
    };
    let v2 = C::emit(ctx, &v1);
    let v3 = C::writable_xmm_to_xmm(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 2042.
    return v3;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
    arg1: i64,
    arg2: RelocDistance,
) -> Reg {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::writable_gpr_to_reg(ctx, v3);
    let v5 = C::box_external_name(ctx, arg0);
    let v6 = MInst::LoadExtName {
        dst: v4,
        name: v5,
        offset: arg1,
        distance: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2049.
    return v8;
}

// Generated as internal constructor for term mov64_mr.
pub fn constructor_mov64_mr<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::Mov64MR {
        src: arg0.clone(),
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2056.
    return v4;
}

// Generated as internal constructor for term alu_rmi_r.
pub fn constructor_alu_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2063.
    return v8;
}

// Generated as internal constructor for term alu_rm_r_vex.
pub fn constructor_alu_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmROpcode,
    arg2: Gpr,
    arg3: &GprMem,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmRVex {
        size: v5.clone(),
        op: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2071.
    return v8;
}

// Generated as internal constructor for term xmm_rm_r.
pub fn constructor_xmm_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2079.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_unaligned.
pub fn constructor_xmm_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmRUnaligned {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2086.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_blend.
pub fn constructor_xmm_rm_r_blend<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAligned,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlend {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2093.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_blend_vex.
pub fn constructor_xmm_rmr_blend_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRBlendVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        mask: arg3,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2100.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_vex.
pub fn constructor_xmm_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2107.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_vex.
pub fn constructor_xmm_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2114.
    return v6;
}

// Generated as internal constructor for term xmm_rm_r_imm.
pub fn constructor_xmm_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Reg,
    arg2: &RegMem,
    arg3: u8,
    arg4: &OperandSize,
) -> Xmm {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::writable_xmm_to_reg(ctx, v5);
    let v7 = MInst::XmmRmRImm {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v6,
        imm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_xmm_to_xmm(ctx, v5);
    // Rule at src/isa/x64/inst.isle line 2121.
    return v9;
}

// Generated as internal constructor for term xmm_vex_pinsr.
pub fn constructor_xmm_vex_pinsr<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmVexPinsr {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2133.
    return v7;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm.
pub fn constructor_xmm_unary_rm_r_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImm {
        op: arg0.clone(),
        src: arg1.clone(),
        imm: arg2,
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2140.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r.
pub fn constructor_xmm_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMemAligned,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmR {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2147.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_unaligned.
pub fn constructor_xmm_unary_rm_r_unaligned<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmRUnaligned {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2154.
    return v5;
}

// Generated as internal constructor for term xmm_unary_rm_r_evex.
pub fn constructor_xmm_unary_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::temp_writable_xmm(ctx);
    let v3 = MInst::XmmUnaryRmREvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_xmm_to_xmm(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2161.
    return v5;
}

// Generated as internal constructor for term xmm_rm_r_evex.
pub fn constructor_xmm_rm_r_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmREvex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2168.
    return v6;
}

// Generated as internal constructor for term xmm_unary_rm_r_imm_evex.
pub fn constructor_xmm_unary_rm_r_imm_evex<C: Context>(
    ctx: &mut C,
    arg0: &Avx512Opcode,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmUnaryRmRImmEvex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2178.
    return v6;
}

// Generated as internal constructor for term xmm_rmi_xmm.
pub fn constructor_xmm_rmi_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMemAlignedImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiReg {
        opcode: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2185.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm.
pub fn constructor_xmm_to_gpr_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImm {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2195.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_imm_vex.
pub fn constructor_xmm_to_gpr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: u8,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprImmVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        imm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2202.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm.
pub fn constructor_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmm {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2209.
    return v6;
}

// Generated as internal constructor for term gpr_to_xmm_vex.
pub fn constructor_gpr_to_xmm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::GprToXmmVex {
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
        src_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2216.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr.
pub fn constructor_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGpr {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2223.
    return v6;
}

// Generated as internal constructor for term xmm_to_gpr_vex.
pub fn constructor_xmm_to_gpr_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::XmmToGprVex {
        op: arg0.clone(),
        src: arg1,
        dst: v3,
        dst_size: arg2.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2230.
    return v6;
}

// Generated as internal constructor for term xmm_min_max_seq.
pub fn constructor_xmm_min_max_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Xmm,
    arg3: Xmm,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::XmmMinMaxSeq {
        size: v5.clone(),
        is_min: arg1,
        lhs: arg2,
        rhs: arg3,
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2237.
    return v8;
}

// Generated as internal constructor for term xmm_rmir_vex.
pub fn constructor_xmm_rmir_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMemImm,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = MInst::XmmRmiRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2245.
    return v6;
}

// Generated as internal constructor for term xmm_rmr_imm_vex.
pub fn constructor_xmm_rmr_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: u8,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRImmVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2252.
    return v7;
}

// Generated as internal constructor for term xmm_rmr_vex3.
pub fn constructor_xmm_rmr_vex3<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmRVex3 {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2,
        src3: arg3.clone(),
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2259.
    return v7;
}

// Generated as internal constructor for term unary_rm_r.
pub fn constructor_unary_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmROpcode,
    arg1: Gpr,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v5 = MInst::UnaryRmR {
        size: arg2.clone(),
        op: arg0.clone(),
        src: v4.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2266.
    return v7;
}

// Generated as internal constructor for term unary_rm_r_vex.
pub fn constructor_unary_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::UnaryRmRVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2273.
    return v6;
}

// Generated as internal constructor for term unary_rm_r_imm_vex.
pub fn constructor_unary_rm_r_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &UnaryRmRImmVexOpcode,
    arg1: &GprMem,
    arg2: &OperandSize,
    arg3: u8,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::UnaryRmRImmVex {
        size: arg2.clone(),
        op: arg0.clone(),
        src: arg1.clone(),
        dst: v4,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2280.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float.
pub fn constructor_cvt_int_to_float<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloat {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2286.
    return v7;
}

// Generated as internal constructor for term cvt_int_to_float_vex.
pub fn constructor_cvt_int_to_float_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &GprMem,
    arg3: &OperandSize,
) -> Xmm {
    let v4 = C::temp_writable_xmm(ctx);
    let v5 = MInst::CvtIntToFloatVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v4,
        src2_size: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2292.
    return v7;
}

// Generated as internal constructor for term cvt_u64_to_float_seq.
pub fn constructor_cvt_u64_to_float_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Xmm {
    let v2 = &C::raw_operand_size_of_type(ctx, arg0);
    let v3 = C::temp_writable_xmm(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CvtUint64ToFloatSeq {
        dst_size: v2.clone(),
        src: arg1,
        dst: v3,
        tmp_gpr1: v4,
        tmp_gpr2: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2298.
    return v8;
}

// Generated as internal constructor for term cvt_float_to_uint_seq.
pub fn constructor_cvt_float_to_uint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_xmm(ctx);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = constructor_put_in_xmm(ctx, arg1);
    let v11 = MInst::CvtFloatToUintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v10,
        dst: v6,
        tmp_gpr: v9,
        tmp_xmm: v7,
        tmp_xmm2: v8,
    };
    let v12 = C::emit(ctx, &v11);
    let v13 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2307.
    return v13;
}

// Generated as internal constructor for term cvt_float_to_sint_seq.
pub fn constructor_cvt_float_to_sint_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: bool,
) -> Gpr {
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v2 = C::value_type(ctx, arg1);
    let v5 = &C::raw_operand_size_of_type(ctx, v2);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_xmm(ctx);
    let v8 = C::temp_writable_gpr(ctx);
    let v9 = constructor_put_in_xmm(ctx, arg1);
    let v10 = MInst::CvtFloatToSintSeq {
        dst_size: v4.clone(),
        src_size: v5.clone(),
        is_saturating: arg2,
        src: v9,
        dst: v6,
        tmp_gpr: v8,
        tmp_xmm: v7,
    };
    let v11 = C::emit(ctx, &v10);
    let v12 = C::writable_gpr_to_gpr(ctx, v6);
    // Rule at src/isa/x64/inst.isle line 2319.
    return v12;
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
) -> Reg {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MovFromPReg {
        src: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = constructor_writable_gpr_to_r_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2331.
    return v4;
}

// Generated as internal constructor for term extend_to_gpr.
pub fn constructor_extend_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Type,
    arg2: &ExtendKind,
) -> Gpr {
    let v1 = C::value_type(ctx, arg0);
    if v1 == arg1 {
        let v4 = constructor_put_in_gpr(ctx, arg0);
        // Rule at src/isa/x64/inst.isle line 2379.
        return v4;
    }
    if v1 == I32 {
        if arg1 == I64 {
            if let &ExtendKind::Zero = arg2 {
                let v5 = constructor_value32_zeros_upper32(ctx, arg0);
                if v5 == true {
                    let v6 = C::put_in_reg(ctx, arg0);
                    let v10 = C::add_range_fact(ctx, v6, 0x40_u16, 0x0_u64, 0xffffffff_u64);
                    let v11 = C::gpr_new(ctx, v10);
                    // Rule at src/isa/x64/inst.isle line 2387.
                    return v11;
                }
            }
        }
    }
    let v12 = &C::sinkable_load_exact(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_sink_load_to_gpr_mem(ctx, v13);
        let v15 = constructor_extend_to_gpr_types(ctx, v14, v1, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2393.
        return v15;
    }
    let v16 = &constructor_put_in_gpr_mem(ctx, arg0);
    let v17 = constructor_extend_to_gpr_types(ctx, v16, v1, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 2397.
    return v17;
}

// Generated as internal constructor for term extend_to_gpr_types.
pub fn constructor_extend_to_gpr_types<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
    arg1: Type,
    arg2: Type,
    arg3: &ExtendKind,
) -> Gpr {
    let v5 = &C::operand_size_of_type_32_64(ctx, arg2);
    let v6 = constructor_operand_size_bits(ctx, v5);
    let v4 = C::ty_bits_u16(ctx, arg1);
    let v7 = &C::ext_mode(ctx, v4, v6);
    let v8 = constructor_extend(ctx, arg3, arg2, v7, arg0);
    // Rule at src/isa/x64/inst.isle line 2402.
    return v8;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: &ExtendKind,
    arg1: Type,
    arg2: &ExtMode,
    arg3: &GprMem,
) -> Gpr {
    match arg0 {
        &ExtendKind::Sign => {
            let v5 = constructor_x64_movsx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2421.
            return v5;
        }
        &ExtendKind::Zero => {
            let v4 = constructor_x64_movzx(ctx, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 2417.
            return v4;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "extend", "src/isa/x64/inst.isle line 2414")
}

// Generated as internal constructor for term value32_zeros_upper32.
pub fn constructor_value32_zeros_upper32<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> bool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::Binary {
                opcode: ref v4,
                args: ref v5,
            } => {
                match v4 {
                    &Opcode::Iadd => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2428.
                        return v9;
                    }
                    &Opcode::Isub => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2429.
                        return v9;
                    }
                    &Opcode::Imul => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2430.
                        return v9;
                    }
                    &Opcode::Band => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2431.
                        return v9;
                    }
                    &Opcode::Bor => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2432.
                        return v9;
                    }
                    &Opcode::Bxor => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2433.
                        return v9;
                    }
                    &Opcode::Ishl => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2434.
                        return v9;
                    }
                    &Opcode::Ushr => {
                        let v9 = true;
                        // Rule at src/isa/x64/inst.isle line 2435.
                        return v9;
                    }
                    _ => {}
                }
            }
            &InstructionData::Load {
                opcode: ref v10,
                arg: v11,
                flags: v12,
                offset: v13,
            } => {
                if let &Opcode::Uload32 = v10 {
                    let v9 = true;
                    // Rule at src/isa/x64/inst.isle line 2436.
                    return v9;
                }
            }
            _ => {}
        }
    }
    let v14 = false;
    // Rule at src/isa/x64/inst.isle line 2437.
    return v14;
}

// Generated as internal constructor for term vec_int_type.
pub fn constructor_vec_int_type<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Type {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8_u32 => {
                if v2.1 == 0x10_u32 {
                    // Rule at src/isa/x64/inst.isle line 2443.
                    return I8X16;
                }
            }
            0x10_u32 => {
                if v2.1 == 0x8_u32 {
                    // Rule at src/isa/x64/inst.isle line 2444.
                    return I16X8;
                }
            }
            0x20_u32 => {
                if v2.1 == 0x4_u32 {
                    // Rule at src/isa/x64/inst.isle line 2445.
                    return I32X4;
                }
            }
            0x40_u32 => {
                if v2.1 == 0x2_u32 {
                    // Rule at src/isa/x64/inst.isle line 2446.
                    return I64X2;
                }
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "vec_int_type", "src/isa/x64/inst.isle line 2442")
}

// Generated as internal constructor for term x64_xor_vector.
pub fn constructor_x64_xor_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F16 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2450.
            return v3;
        }
        F32 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2451.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2452.
            return v4;
        }
        F128 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2453.
            return v3;
        }
        F32X4 => {
            let v3 = constructor_x64_xorps(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2454.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_xorpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 2455.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pxor(ctx, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 2456.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor_vector", "src/isa/x64/inst.isle line 2449")
}

// Generated as internal constructor for term vector_all_ones.
pub fn constructor_vector_all_ones<C: Context>(
    ctx: &mut C,
) -> Xmm {
    let v0 = constructor_xmm_uninit_value(ctx);
    let v1 = &C::xmm_to_xmm_mem(ctx, v0);
    let v2 = constructor_x64_pcmpeqd(ctx, v0, v1);
    // Rule at src/isa/x64/inst.isle line 2468.
    return v2;
}

// Generated as internal constructor for term mov_rmi_to_xmm.
pub fn constructor_mov_rmi_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> XmmMemImm {
    match arg0 {
        &RegMemImm::Reg {
            reg: v4,
        } => {
            let v5 = &C::reg_to_gpr_mem(ctx, v4);
            let v6 = constructor_x64_movd_to_xmm(ctx, v5);
            let v7 = &C::xmm_to_xmm_mem_imm(ctx, v6);
            // Rule at src/isa/x64/inst.isle line 2476.
            return v7.clone();
        }
        &RegMemImm::Mem {
            addr: ref v1,
        } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2474.
            return v2.clone();
        }
        &RegMemImm::Imm {
            simm32: v3,
        } => {
            let v2 = &C::xmm_mem_imm_new(ctx, arg0);
            // Rule at src/isa/x64/inst.isle line 2475.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "mov_rmi_to_xmm", "src/isa/x64/inst.isle line 2473")
}

// Generated as internal constructor for term x64_stack_switch_basic.
pub fn constructor_x64_stack_switch_basic<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::StackSwitchBasic {
        store_context_ptr: arg0,
        load_context_ptr: arg1,
        in_payload0: arg2,
        out_payload0: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2489.
    return v6;
}

// Generated as internal constructor for term x64_load.
pub fn constructor_x64_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: &ExtKind,
) -> Reg {
    match arg0 {
        I64 => {
            let v11 = constructor_mov64_mr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 2506.
            return v11;
        }
        F32 => {
            let v12 = constructor_x64_movss_load(ctx, arg1);
            let v13 = C::xmm_to_reg(ctx, v12);
            // Rule at src/isa/x64/inst.isle line 2509.
            return v13;
        }
        F64 => {
            let v14 = constructor_x64_movsd_load(ctx, arg1);
            let v15 = C::xmm_to_reg(ctx, v14);
            // Rule at src/isa/x64/inst.isle line 2512.
            return v15;
        }
        F128 => {
            let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
            let v17 = constructor_x64_movdqu_load(ctx, v16);
            let v18 = C::xmm_to_reg(ctx, v17);
            // Rule at src/isa/x64/inst.isle line 2515.
            return v18;
        }
        F32X4 => {
            let v19 = constructor_x64_movups_load(ctx, arg1);
            let v20 = C::xmm_to_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 2518.
            return v20;
        }
        F64X2 => {
            let v21 = constructor_x64_movupd_load(ctx, arg1);
            let v22 = C::xmm_to_reg(ctx, v21);
            // Rule at src/isa/x64/inst.isle line 2521.
            return v22;
        }
        _ => {}
    }
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ExtKind::SignExtend = arg2 {
            let v5 = C::ty_bytes(ctx, v2);
            let v7 = &C::ext_mode(ctx, v5, 0x8_u16);
            let v8 = &constructor_synthetic_amode_to_gpr_mem(ctx, arg1);
            let v9 = constructor_x64_movsx(ctx, v7, v8);
            let v10 = C::gpr_to_reg(ctx, v9);
            // Rule at src/isa/x64/inst.isle line 2502.
            return v10;
        }
    }
    let v23 = C::multi_lane(ctx, arg0);
    if let Some(v24) = v23 {
        let v16 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg1);
        let v17 = constructor_x64_movdqu_load(ctx, v16);
        let v18 = C::xmm_to_reg(ctx, v17);
        // Rule at src/isa/x64/inst.isle line 2524.
        return v18;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_load", "src/isa/x64/inst.isle line 2500")
}

// Generated as internal constructor for term x64_mov.
pub fn constructor_x64_mov<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> Reg {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = constructor_mov64_mr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 2530.
    return v2;
}

// Generated as internal constructor for term x64_movzx.
pub fn constructor_x64_movzx<C: Context>(
    ctx: &mut C,
    arg0: &ExtMode,
    arg1: &GprMem,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovzxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2555.
    return v5;
}

// Generated as internal constructor for term x64_movsx.
pub fn constructor_x64_movsx<C: Context>(
    ctx: &mut C,
    arg0: &ExtMode,
    arg1: &GprMem,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::MovsxRmR {
        ext_mode: arg0.clone(),
        src: arg1.clone(),
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 2561.
    return v5;
}

// Generated as internal constructor for term x64_movss_load.
pub fn constructor_x64_movss_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovss, v2);
        // Rule at src/isa/x64/inst.isle line 2569.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movss, v2);
    // Rule at src/isa/x64/inst.isle line 2567.
    return v3;
}

// Generated as internal constructor for term x64_movss_store.
pub fn constructor_x64_movss_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovss, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2576.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2574.
    return v3.clone();
}

// Generated as internal constructor for term x64_movsd_load.
pub fn constructor_x64_movsd_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovsd, v2);
        // Rule at src/isa/x64/inst.isle line 2583.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movsd, v2);
    // Rule at src/isa/x64/inst.isle line 2581.
    return v3;
}

// Generated as internal constructor for term x64_movsd_store.
pub fn constructor_x64_movsd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovsd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2590.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2588.
    return v3.clone();
}

// Generated as internal constructor for term x64_movups_load.
pub fn constructor_x64_movups_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovups, v2);
        // Rule at src/isa/x64/inst.isle line 2597.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movups, v2);
    // Rule at src/isa/x64/inst.isle line 2595.
    return v3;
}

// Generated as internal constructor for term x64_movups_store.
pub fn constructor_x64_movups_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovups, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2604.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movups, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2602.
    return v3.clone();
}

// Generated as internal constructor for term x64_movupd_load.
pub fn constructor_x64_movupd_load<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovupd, v2);
        // Rule at src/isa/x64/inst.isle line 2611.
        return v6;
    }
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movupd, v2);
    // Rule at src/isa/x64/inst.isle line 2609.
    return v3;
}

// Generated as internal constructor for term x64_movupd_store.
pub fn constructor_x64_movupd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovupd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2618.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movupd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2616.
    return v3.clone();
}

// Generated as internal constructor for term x64_movd_to_gpr.
pub fn constructor_x64_movd_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2626.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2624.
    return v3;
}

// Generated as internal constructor for term x64_movd_to_xmm.
pub fn constructor_x64_movd_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovd, arg0, &OperandSize::Size32);
        // Rule at src/isa/x64/inst.isle line 2634.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movd, arg0, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 2632.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_xmm.
pub fn constructor_x64_movq_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: &GprMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_gpr_to_xmm_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2642.
        return v6;
    }
    let v3 = constructor_gpr_to_xmm(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2640.
    return v3;
}

// Generated as internal constructor for term x64_movq_to_gpr.
pub fn constructor_x64_movq_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovq, arg0, &OperandSize::Size64);
        // Rule at src/isa/x64/inst.isle line 2650.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movq, arg0, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 2648.
    return v3;
}

// Generated as internal constructor for term x64_movdqu_load.
pub fn constructor_x64_movdqu_load<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovdqu, arg0);
        // Rule at src/isa/x64/inst.isle line 2657.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movdqu, arg0);
    // Rule at src/isa/x64/inst.isle line 2655.
    return v2;
}

// Generated as internal constructor for term x64_movdqu_store.
pub fn constructor_x64_movdqu_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
) -> SideEffectNoResult {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_movrm_vex(ctx, &AvxOpcode::Vmovdqu, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 2664.
        return v6.clone();
    }
    let v3 = &constructor_xmm_movrm(ctx, &SseOpcode::Movdqu, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 2662.
    return v3.clone();
}

// Generated as internal constructor for term x64_pmovsxbw.
pub fn constructor_x64_pmovsxbw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2671.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2669.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxbw.
pub fn constructor_x64_pmovzxbw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxbw, arg0);
        // Rule at src/isa/x64/inst.isle line 2678.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxbw, arg0);
    // Rule at src/isa/x64/inst.isle line 2676.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxwd.
pub fn constructor_x64_pmovsxwd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2685.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2683.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxwd.
pub fn constructor_x64_pmovzxwd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxwd, arg0);
        // Rule at src/isa/x64/inst.isle line 2692.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxwd, arg0);
    // Rule at src/isa/x64/inst.isle line 2690.
    return v2;
}

// Generated as internal constructor for term x64_pmovsxdq.
pub fn constructor_x64_pmovsxdq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovsxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2699.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovsxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2697.
    return v2;
}

// Generated as internal constructor for term x64_pmovzxdq.
pub fn constructor_x64_pmovzxdq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpmovzxdq, arg0);
        // Rule at src/isa/x64/inst.isle line 2706.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Pmovzxdq, arg0);
    // Rule at src/isa/x64/inst.isle line 2704.
    return v2;
}

// Generated as internal constructor for term x64_movrm.
pub fn constructor_x64_movrm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovRM {
        size: v3.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 2713.
    return v5;
}

// Generated as internal constructor for term x64_movimm_m.
pub fn constructor_x64_movimm_m<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
    arg2: i32,
) -> SideEffectNoResult {
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::MovImmM {
        size: v3.clone(),
        simm32: arg2,
        dst: arg1.clone(),
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 2718.
    return v5;
}

// Generated as internal constructor for term xmm_movrm.
pub fn constructor_xmm_movrm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRM {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2723.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm.
pub fn constructor_xmm_movrm_imm<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImm {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 2727.
    return v5;
}

// Generated as internal constructor for term xmm_movrm_vex.
pub fn constructor_xmm_movrm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
) -> SideEffectNoResult {
    let v3 = MInst::XmmMovRMVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
    };
    let v4 = SideEffectNoResult::Inst {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 2731.
    return v4;
}

// Generated as internal constructor for term xmm_movrm_imm_vex.
pub fn constructor_xmm_movrm_imm_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: &SyntheticAmode,
    arg2: Xmm,
    arg3: u8,
) -> SideEffectNoResult {
    let v4 = MInst::XmmMovRMImmVex {
        op: arg0.clone(),
        src: arg2,
        dst: arg1.clone(),
        imm: arg3,
    };
    let v5 = SideEffectNoResult::Inst {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 2735.
    return v5;
}

// Generated as internal constructor for term x64_xmm_load_const.
pub fn constructor_x64_xmm_load_const<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: VCodeConstant,
) -> Xmm {
    let v2 = &C::const_to_synthetic_amode(ctx, arg1);
    let v4 = constructor_x64_load(ctx, arg0, v2, &ExtKind::None);
    let v5 = C::xmm_new(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 2740.
    return v5;
}

// Generated as internal constructor for term x64_add.
pub fn constructor_x64_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_addb_mi(ctx, arg1, v8);
                // Rule at src/isa/x64/inst.isle line 2757.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_addl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2764.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_addb_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2768.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_addw_mi(ctx, arg1, v11);
                // Rule at src/isa/x64/inst.isle line 2758.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_addl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2765.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_addw_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2769.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_addl_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2753.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_addl_mi(ctx, arg1, v14);
                // Rule at src/isa/x64/inst.isle line 2759.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_addl_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2770.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_addq_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2754.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_addq_mi_sxl(ctx, arg1, v17);
                // Rule at src/isa/x64/inst.isle line 2760.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_addq_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2771.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_add", "src/isa/x64/inst.isle line 2750")
}

// Generated as internal constructor for term x64_add_with_flags_paired.
pub fn constructor_x64_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Add,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2775.
    return v8;
}

// Generated as internal constructor for term x64_alurmi_with_flags_paired.
pub fn constructor_x64_alurmi_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2786.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_alurmi_with_flags_paired", "src/isa/x64/inst.isle line 2785")
}

// Generated as internal constructor for term x64_alurmi_flags_side_effect.
pub fn constructor_x64_alurmi_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = &C::raw_operand_size_of_type(ctx, v3);
        let v7 = C::temp_writable_gpr(ctx);
        let v8 = MInst::AluRmiR {
            size: v6.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v7,
        };
        let v9 = ProducesFlags::ProducesFlagsSideEffect {
            inst: v8,
        };
        // Rule at src/isa/x64/inst.isle line 2797.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_alurmi_flags_side_effect", "src/isa/x64/inst.isle line 2796")
}

// Generated as internal constructor for term x64_alurmi_with_flags_chained.
pub fn constructor_x64_alurmi_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &AluRmiROpcode,
    arg1: Type,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ConsumesAndProducesFlags {
    let v2 = C::fits_in_64(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::temp_writable_gpr(ctx);
        let v7 = &C::raw_operand_size_of_type(ctx, v3);
        let v9 = constructor_writable_gpr_to_r_reg(ctx, v6);
        let v8 = MInst::AluRmiR {
            size: v7.clone(),
            op: arg0.clone(),
            src1: arg2,
            src2: arg3.clone(),
            dst: v6,
        };
        let v10 = ConsumesAndProducesFlags::ReturnsReg {
            inst: v8,
            result: v9,
        };
        // Rule at src/isa/x64/inst.isle line 2807.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_alurmi_with_flags_chained", "src/isa/x64/inst.isle line 2806")
}

// Generated as internal constructor for term x64_adc_paired.
pub fn constructor_x64_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Adc,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2819.
    return v8;
}

// Generated as internal constructor for term x64_sub.
pub fn constructor_x64_sub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_subb_mi(ctx, arg1, v8);
                // Rule at src/isa/x64/inst.isle line 2839.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_subl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2846.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_subb_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2850.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_subw_mi(ctx, arg1, v11);
                // Rule at src/isa/x64/inst.isle line 2840.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_subl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2847.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_subw_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2851.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_subl_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2835.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_subl_mi(ctx, arg1, v14);
                // Rule at src/isa/x64/inst.isle line 2841.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_subl_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2852.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_subq_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2836.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_subq_mi_sxl(ctx, arg1, v17);
                // Rule at src/isa/x64/inst.isle line 2842.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_subq_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2853.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_sub", "src/isa/x64/inst.isle line 2832")
}

// Generated as internal constructor for term x64_sub_with_flags_paired.
pub fn constructor_x64_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sub,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2857.
    return v8;
}

// Generated as internal constructor for term x64_sbb_paired.
pub fn constructor_x64_sbb_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ConsumesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::Sbb,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 2869.
    return v8;
}

// Generated as internal constructor for term x64_mul.
pub fn constructor_x64_mul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ValueRegs {
    if arg1 == false {
        let v12 = C::ty_32_or_64(ctx, arg0);
        if let Some(v13) = v12 {
            let v14 = C::use_bmi2(ctx);
            if v14 == true {
                let v4 = C::temp_writable_gpr(ctx);
                let v5 = C::temp_writable_gpr(ctx);
                let v15 = &C::raw_operand_size_of_type(ctx, v13);
                let v16 = MInst::MulX {
                    size: v15.clone(),
                    src1: arg2,
                    src2: arg3.clone(),
                    dst_lo: v4,
                    dst_hi: v5,
                };
                let v17 = C::emit(ctx, &v16);
                let v9 = C::writable_gpr_to_gpr(ctx, v4);
                let v10 = C::writable_gpr_to_gpr(ctx, v5);
                let v11 = constructor_value_gprs(ctx, v9, v10);
                // Rule at src/isa/x64/inst.isle line 2890.
                return v11;
            }
        }
    }
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_gpr_to_gpr(ctx, v4);
    let v10 = C::writable_gpr_to_gpr(ctx, v5);
    let v11 = constructor_value_gprs(ctx, v9, v10);
    // Rule at src/isa/x64/inst.isle line 2882.
    return v11;
}

// Generated as internal constructor for term x64_mulx_hi.
pub fn constructor_x64_mulx_hi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::temp_writable_gpr(ctx);
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::writable_invalid_gpr(ctx);
        let v8 = MInst::MulX {
            size: v6.clone(),
            src1: arg1,
            src2: arg2.clone(),
            dst_lo: v7,
            dst_hi: v5,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_gpr_to_gpr(ctx, v5);
        // Rule at src/isa/x64/inst.isle line 2899.
        return v10;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_mulx_hi", "src/isa/x64/inst.isle line 2898")
}

// Generated as internal constructor for term x64_mul8.
pub fn constructor_x64_mul8<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2912.
    return v6;
}

// Generated as internal constructor for term x64_imul.
pub fn constructor_x64_imul<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMul {
        size: v4.clone(),
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2919.
    return v7;
}

// Generated as internal constructor for term x64_imul_imm.
pub fn constructor_x64_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: i32,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = MInst::IMulImm {
        size: v4.clone(),
        src1: arg1.clone(),
        src2: arg2,
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 2927.
    return v7;
}

// Generated as internal constructor for term x64_mul8_with_flags_paired.
pub fn constructor_x64_mul8_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Gpr,
    arg2: &GprMem,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v4 = MInst::Mul8 {
        signed: arg0,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 2934.
    return v6;
}

// Generated as internal constructor for term x64_mul_lo_with_flags_paired.
pub fn constructor_x64_mul_lo_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: bool,
    arg2: Gpr,
    arg3: &GprMem,
) -> ProducesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = &C::raw_operand_size_of_type(ctx, arg0);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v7 = MInst::Mul {
        size: v6.clone(),
        signed: arg1,
        src1: arg2,
        src2: arg3.clone(),
        dst_lo: v4,
        dst_hi: v5,
    };
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/x64/inst.isle line 2941.
    return v9;
}

// Generated as internal constructor for term x64_and.
pub fn constructor_x64_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_andb_mi(ctx, arg1, v8);
                // Rule at src/isa/x64/inst.isle line 2979.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_andl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2986.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_andb_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2990.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_andw_mi(ctx, arg1, v11);
                // Rule at src/isa/x64/inst.isle line 2980.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_andl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 2987.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_andw_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2991.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_andl_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2975.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_andl_mi(ctx, arg1, v14);
                // Rule at src/isa/x64/inst.isle line 2981.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_andl_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2992.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_andq_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 2976.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_andq_mi_sxl(ctx, arg1, v17);
                // Rule at src/isa/x64/inst.isle line 2982.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_andq_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 2993.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_and", "src/isa/x64/inst.isle line 2972")
}

// Generated as internal constructor for term x64_and_with_flags_paired.
pub fn constructor_x64_and_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v6 = MInst::AluRmiR {
        size: v4.clone(),
        op: AluRmiROpcode::And,
        src1: arg1,
        src2: arg2.clone(),
        dst: v3,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v6,
    };
    // Rule at src/isa/x64/inst.isle line 2996.
    return v7;
}

// Generated as internal constructor for term x64_or.
pub fn constructor_x64_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_orb_mi(ctx, arg1, v8);
                // Rule at src/isa/x64/inst.isle line 3015.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_orl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 3022.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_orb_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3026.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_orw_mi(ctx, arg1, v11);
                // Rule at src/isa/x64/inst.isle line 3016.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_orl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 3023.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_orw_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3027.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_orl_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 3011.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_orl_mi(ctx, arg1, v14);
                // Rule at src/isa/x64/inst.isle line 3017.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_orl_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3028.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_orq_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 3012.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_orq_mi_sxl(ctx, arg1, v17);
                // Rule at src/isa/x64/inst.isle line 3018.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_orq_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3029.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_or", "src/isa/x64/inst.isle line 3008")
}

// Generated as internal constructor for term x64_xor.
pub fn constructor_x64_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> Gpr {
    match arg0 {
        I8 => {
            let v7 = C::is_imm8(ctx, arg2);
            if let Some(v8) = v7 {
                let v9 = constructor_x64_xorb_mi(ctx, arg1, v8);
                // Rule at src/isa/x64/inst.isle line 3041.
                return v9;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_xorl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 3048.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v25 = constructor_x64_xorb_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3052.
                return v25;
            }
        }
        I16 => {
            let v10 = C::is_imm16(ctx, arg2);
            if let Some(v11) = v10 {
                let v12 = constructor_x64_xorw_mi(ctx, arg1, v11);
                // Rule at src/isa/x64/inst.isle line 3042.
                return v12;
            }
            let v19 = C::is_gpr(ctx, arg2);
            if let Some(v20) = v19 {
                let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                let v22 = constructor_x64_xorl_rm(ctx, arg1, v21);
                // Rule at src/isa/x64/inst.isle line 3049.
                return v22;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v26 = constructor_x64_xorw_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3053.
                return v26;
            }
        }
        I32 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v5 = constructor_x64_xorl_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 3037.
                return v5;
            }
            let v13 = C::is_imm32(ctx, arg2);
            if let Some(v14) = v13 {
                let v15 = constructor_x64_xorl_mi(ctx, arg1, v14);
                // Rule at src/isa/x64/inst.isle line 3043.
                return v15;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v27 = constructor_x64_xorl_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3054.
                return v27;
            }
        }
        I64 => {
            let v3 = C::is_simm8(ctx, arg2);
            if let Some(v4) = v3 {
                let v6 = constructor_x64_xorq_mi_sxb(ctx, arg1, v4);
                // Rule at src/isa/x64/inst.isle line 3038.
                return v6;
            }
            let v16 = C::is_simm32(ctx, arg2);
            if let Some(v17) = v16 {
                let v18 = constructor_x64_xorq_mi_sxl(ctx, arg1, v17);
                // Rule at src/isa/x64/inst.isle line 3044.
                return v18;
            }
            let v23 = &C::is_gpr_mem(ctx, arg2);
            if let Some(v24) = v23 {
                let v28 = constructor_x64_xorq_rm(ctx, arg1, v24);
                // Rule at src/isa/x64/inst.isle line 3055.
                return v28;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor", "src/isa/x64/inst.isle line 3034")
}

// Generated as internal constructor for term x64_andn.
pub fn constructor_x64_andn<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &GprMem,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Andn, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3060.
    return v4;
}

// Generated as internal constructor for term imm_i64.
pub fn constructor_imm_i64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: i64,
) -> Reg {
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = constructor_imm(ctx, arg0, v2);
    // Rule at src/isa/x64/inst.isle line 3067.
    return v3;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
) -> Reg {
    match arg0 {
        I64 => {
            let v26 = C::nonzero_u64_fits_in_u32(ctx, arg1);
            if let Some(v27) = v26 {
                let v5 = C::temp_writable_gpr(ctx);
                let v29 = MInst::Imm {
                    dst_size: OperandSize::Size32,
                    simm64: v27,
                    dst: v5,
                };
                let v30 = C::emit(ctx, &v29);
                let v31 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 3102.
                return v31;
            }
        }
        F16 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v12 = constructor_imm(ctx, I16, arg1);
                    let v13 = C::gpr_new(ctx, v12);
                    let v14 = constructor_bitcast_gpr_to_xmm(ctx, 0x10_u8, v13);
                    let v15 = C::xmm_to_reg(ctx, v14);
                    // Rule at src/isa/x64/inst.isle line 3089.
                    return v15;
                }
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src/isa/x64/inst.isle line 3120.
                    return v42;
                }
                _ => {}
            }
        }
        F32 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v17 = constructor_imm(ctx, I32, arg1);
                    let v18 = &C::reg_to_gpr_mem(ctx, v17);
                    let v19 = constructor_x64_movd_to_xmm(ctx, v18);
                    let v20 = C::xmm_to_reg(ctx, v19);
                    // Rule at src/isa/x64/inst.isle line 3093.
                    return v20;
                }
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src/isa/x64/inst.isle line 3123.
                    return v42;
                }
                _ => {}
            }
        }
        F64 => {
            let v4 = C::u64_is_zero(ctx, arg1);
            match v4 {
                false => {
                    let v22 = constructor_imm(ctx, I64, arg1);
                    let v23 = &C::reg_to_gpr_mem(ctx, v22);
                    let v24 = constructor_x64_movq_to_xmm(ctx, v23);
                    let v25 = C::xmm_to_reg(ctx, v24);
                    // Rule at src/isa/x64/inst.isle line 3097.
                    return v25;
                }
                true => {
                    let v41 = constructor_xmm_zero(ctx, arg0);
                    let v42 = C::xmm_to_reg(ctx, v41);
                    // Rule at src/isa/x64/inst.isle line 3128.
                    return v42;
                }
                _ => {}
            }
        }
        _ => {}
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::u64_is_zero(ctx, arg1);
        match v4 {
            false => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v7 = MInst::Imm {
                    dst_size: v6.clone(),
                    simm64: arg1,
                    dst: v5,
                };
                let v8 = C::emit(ctx, &v7);
                let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
                // Rule at src/isa/x64/inst.isle line 3082.
                return v9;
            }
            true => {
                let v5 = C::temp_writable_gpr(ctx);
                let v6 = &C::operand_size_of_type_32_64(ctx, v2);
                let v33 = MInst::AluConstOp {
                    op: AluRmiROpcode::Xor,
                    size: v6.clone(),
                    dst: v5,
                };
                let v34 = C::emit(ctx, &v33);
                let v35 = C::writable_gpr_to_gpr(ctx, v5);
                let v36 = C::gpr_to_reg(ctx, v35);
                // Rule at src/isa/x64/inst.isle line 3108.
                return v36;
            }
            _ => {}
        }
    }
    if arg1 == 0x0_u64 {
        let v37 = C::multi_lane(ctx, arg0);
        if let Some(v38) = v37 {
            let v41 = constructor_xmm_zero(ctx, arg0);
            let v42 = C::xmm_to_reg(ctx, v41);
            // Rule at src/isa/x64/inst.isle line 3116.
            return v42;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "imm", "src/isa/x64/inst.isle line 3079")
}

// Generated as internal constructor for term xmm_zero.
pub fn constructor_xmm_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Xmm {
    let v1 = constructor_xmm_uninit_value(ctx);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    let v3 = constructor_x64_xor_vector(ctx, arg0, v1, v2);
    // Rule at src/isa/x64/inst.isle line 3133.
    return v3;
}

// Generated as internal constructor for term shift_r.
pub fn constructor_shift_r<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftKind,
    arg2: Gpr,
    arg3: &Imm8Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::raw_operand_size_of_type(ctx, arg0);
    let v6 = MInst::ShiftR {
        size: v5.clone(),
        kind: arg1.clone(),
        src: arg2,
        num_bits: arg3.clone(),
        dst: v4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 3139.
    return v8;
}

// Generated as internal constructor for term x64_rotl.
pub fn constructor_x64_rotl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = C::ty_bits(ctx, v6);
                let v12 = C::u8_sub(ctx, v11, v8);
                let v13 = constructor_x64_rorx(ctx, v6, v10, v12);
                // Rule at src/isa/x64/inst.isle line 3151.
                return v13;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3149.
    return v4;
}

// Generated as internal constructor for term x64_rotr.
pub fn constructor_x64_rotr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::imm8_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_rorx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 3159.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::RotateRight, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3157.
    return v4;
}

// Generated as internal constructor for term x64_shl.
pub fn constructor_x64_shl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shlx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 3171.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftLeft, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3165.
    return v4;
}

// Generated as internal constructor for term x64_shr.
pub fn constructor_x64_shr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_shrx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 3180.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightLogical, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3177.
    return v4;
}

// Generated as internal constructor for term x64_sar.
pub fn constructor_x64_sar<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: &Imm8Gpr,
) -> Gpr {
    let v5 = C::ty_32_or_64(ctx, arg0);
    if let Some(v6) = v5 {
        let v7 = C::gpr_from_imm8_gpr(ctx, arg2);
        if let Some(v8) = v7 {
            let v9 = C::use_bmi2(ctx);
            if v9 == true {
                let v10 = &C::gpr_to_gpr_mem(ctx, arg1);
                let v11 = constructor_x64_sarx(ctx, v6, v10, v8);
                // Rule at src/isa/x64/inst.isle line 3189.
                return v11;
            }
        }
    }
    let v4 = constructor_shift_r(ctx, arg0, &ShiftKind::ShiftRightArithmetic, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3186.
    return v4;
}

// Generated as internal constructor for term x64_shld.
pub fn constructor_x64_shld<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: u8,
) -> Gpr {
    match arg0 {
        I16 => {
            let v4 = constructor_x64_shldw_mri(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3196.
            return v4;
        }
        I32 => {
            let v5 = constructor_x64_shldl_mri(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3197.
            return v5;
        }
        I64 => {
            let v6 = constructor_x64_shldq_mri(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 3198.
            return v6;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_shld", "src/isa/x64/inst.isle line 3194")
}

// Generated as internal constructor for term x64_bzhi.
pub fn constructor_x64_bzhi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Bzhi, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 3205.
    return v4;
}

// Generated as internal constructor for term x64_bswap.
pub fn constructor_x64_bswap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Bswap {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 3212.
    return v6;
}

// Generated as internal constructor for term cmp_rmi_r.
pub fn constructor_cmp_rmi_r<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &CmpOpcode,
    arg2: Gpr,
    arg3: &GprMemImm,
) -> ProducesFlags {
    let v4 = MInst::CmpRmiR {
        size: arg0.clone(),
        opcode: arg1.clone(),
        src1: arg2,
        src2: arg3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 3220.
    return v5;
}

// Generated as internal constructor for term x64_cmp.
pub fn constructor_x64_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Cmp, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3229.
    return v4.clone();
}

// Generated as internal constructor for term x64_cmp_imm.
pub fn constructor_x64_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: u32,
) -> ProducesFlags {
    let v3 = RegMemImm::Imm {
        simm32: arg2,
    };
    let v4 = &C::gpr_mem_imm_new(ctx, &v3);
    let v5 = &constructor_x64_cmp(ctx, arg0, arg1, v4);
    // Rule at src/isa/x64/inst.isle line 3234.
    return v5.clone();
}

// Generated as internal constructor for term xmm_cmp_rm_r.
pub fn constructor_xmm_cmp_rm_r<C: Context>(
    ctx: &mut C,
    arg0: &SseOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg2);
    let v4 = MInst::XmmCmpRmR {
        op: arg0.clone(),
        src1: arg1,
        src2: v3.clone(),
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 3239.
    return v5;
}

// Generated as internal constructor for term xmm_cmp_rm_r_vex.
pub fn constructor_xmm_cmp_rm_r_vex<C: Context>(
    ctx: &mut C,
    arg0: &AvxOpcode,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    let v3 = MInst::XmmCmpRmRVex {
        op: arg0.clone(),
        src1: arg1,
        src2: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 3245.
    return v4;
}

// Generated as internal constructor for term x64_ucomis.
pub fn constructor_x64_ucomis<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v9 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomiss, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 3255.
                return v9.clone();
            }
            let v4 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomiss, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3251.
            return v4.clone();
        }
        F64 => {
            let v7 = C::use_avx(ctx);
            if v7 == true {
                let v11 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vucomisd, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 3258.
                return v11.clone();
            }
            let v6 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ucomisd, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3253.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_ucomis", "src/isa/x64/inst.isle line 3250")
}

// Generated as internal constructor for term x64_test.
pub fn constructor_x64_test<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: &GprMemImm,
) -> ProducesFlags {
    let v4 = &constructor_cmp_rmi_r(ctx, arg0, &CmpOpcode::Test, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 3264.
    return v4.clone();
}

// Generated as internal constructor for term x64_ptest.
pub fn constructor_x64_ptest<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> ProducesFlags {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &constructor_xmm_cmp_rm_r_vex(ctx, &AvxOpcode::Vptest, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 3271.
        return v6.clone();
    }
    let v3 = &constructor_xmm_cmp_rm_r(ctx, &SseOpcode::Ptest, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3269.
    return v3.clone();
}

// Generated as internal constructor for term cmove.
pub fn constructor_cmove<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &GprMem,
    arg3: Gpr,
) -> ConsumesFlags {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v6 = MInst::Cmove {
        size: v5.clone(),
        cc: arg1.clone(),
        consequent: arg2.clone(),
        alternative: arg3,
        dst: v4,
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 3279.
    return v8;
}

// Generated as internal constructor for term cmove_xmm.
pub fn constructor_cmove_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Xmm,
    arg3: Xmm,
) -> ConsumesFlags {
    let v4 = C::temp_writable_xmm(ctx);
    let v6 = constructor_writable_xmm_to_r_reg(ctx, v4);
    let v5 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg2,
        alternative: arg3,
        dst: v4,
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/x64/inst.isle line 3287.
    return v7;
}

// Generated as internal constructor for term cmove_from_values.
pub fn constructor_cmove_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    false => {
                        if arg0 == I128 {
                            let v7 = C::put_in_regs(ctx, arg2);
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::temp_writable_gpr(ctx);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v13 = constructor_value_regs_get_gpr(ctx, v7, 0x0_usize);
                            let v14 = &C::gpr_to_gpr_mem(ctx, v13);
                            let v15 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v18 = constructor_value_regs_get_gpr(ctx, v7, 0x1_usize);
                            let v19 = &C::gpr_to_gpr_mem(ctx, v18);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v22 = constructor_writable_gpr_to_r_reg(ctx, v9);
                            let v23 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v24 = C::value_regs(ctx, v22, v23);
                            let v16 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v14.clone(),
                                alternative: v15,
                                dst: v9,
                            };
                            let v21 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v19.clone(),
                                alternative: v20,
                                dst: v10,
                            };
                            let v25 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                                inst1: v16,
                                inst2: v21,
                                result: v24,
                            };
                            // Rule at src/isa/x64/inst.isle line 3297.
                            return v25;
                        }
                    }
                    true => {
                        let v26 = &constructor_put_in_gpr_mem(ctx, arg2);
                        let v27 = constructor_put_in_gpr(ctx, arg3);
                        let v28 = &constructor_cmove(ctx, arg0, arg1, v26, v27);
                        // Rule at src/isa/x64/inst.isle line 3318.
                        return v28.clone();
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v29 = constructor_put_in_xmm(ctx, arg2);
                let v30 = constructor_put_in_xmm(ctx, arg3);
                let v31 = &constructor_cmove_xmm(ctx, arg0, arg1, v29, v30);
                // Rule at src/isa/x64/inst.isle line 3321.
                return v31.clone();
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmove_from_values", "src/isa/x64/inst.isle line 3296")
}

// Generated as internal constructor for term cmove_or.
pub fn constructor_cmove_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: &GprMem,
    arg4: Gpr,
) -> ConsumesFlags {
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v9 = C::writable_gpr_to_gpr(ctx, v6);
    let v11 = constructor_writable_gpr_to_value_regs(ctx, v5);
    let v8 = MInst::Cmove {
        size: v7.clone(),
        cc: arg1.clone(),
        consequent: arg3.clone(),
        alternative: arg4,
        dst: v6,
    };
    let v10 = MInst::Cmove {
        size: v7.clone(),
        cc: arg2.clone(),
        consequent: arg3.clone(),
        alternative: v9,
        dst: v5,
    };
    let v12 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v8,
        inst2: v10,
        result: v11,
    };
    // Rule at src/isa/x64/inst.isle line 3328.
    return v12;
}

// Generated as internal constructor for term cmove_or_xmm.
pub fn constructor_cmove_or_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Xmm,
    arg4: Xmm,
) -> ConsumesFlags {
    let v5 = C::temp_writable_xmm(ctx);
    let v6 = C::temp_writable_xmm(ctx);
    let v8 = C::writable_xmm_to_xmm(ctx, v6);
    let v10 = constructor_writable_xmm_to_value_regs(ctx, v5);
    let v7 = MInst::XmmCmove {
        ty: arg0,
        cc: arg1.clone(),
        consequent: arg3,
        alternative: arg4,
        dst: v6,
    };
    let v9 = MInst::XmmCmove {
        ty: arg0,
        cc: arg2.clone(),
        consequent: arg3,
        alternative: v8,
        dst: v5,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v9,
        result: v10,
    };
    // Rule at src/isa/x64/inst.isle line 3340.
    return v11;
}

// Generated as internal constructor for term cmove_or_from_values.
pub fn constructor_cmove_or_from_values<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &CC,
    arg3: Value,
    arg4: Value,
) -> ConsumesFlags {
    let v1 = &C::type_register_class(ctx, arg0);
    if let Some(v2) = v1 {
        match v2 {
            &RegisterClass::Gpr {
                single_register: v3,
            } => {
                match v3 {
                    false => {
                        if arg0 == I128 {
                            let v8 = C::put_in_regs(ctx, arg3);
                            let v9 = C::put_in_regs(ctx, arg4);
                            let v10 = C::temp_writable_gpr(ctx);
                            let v11 = C::temp_writable_gpr(ctx);
                            let v12 = C::temp_writable_gpr(ctx);
                            let v13 = C::temp_writable_gpr(ctx);
                            let v16 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v17 = &C::gpr_to_gpr_mem(ctx, v16);
                            let v18 = constructor_value_regs_get_gpr(ctx, v9, 0x0_usize);
                            let v20 = constructor_value_regs_get_gpr(ctx, v8, 0x0_usize);
                            let v21 = &C::gpr_to_gpr_mem(ctx, v20);
                            let v22 = C::writable_gpr_to_gpr(ctx, v12);
                            let v25 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v26 = &C::gpr_to_gpr_mem(ctx, v25);
                            let v27 = constructor_value_regs_get_gpr(ctx, v9, 0x1_usize);
                            let v29 = constructor_value_regs_get_gpr(ctx, v8, 0x1_usize);
                            let v30 = &C::gpr_to_gpr_mem(ctx, v29);
                            let v31 = C::writable_gpr_to_gpr(ctx, v13);
                            let v33 = constructor_writable_gpr_to_r_reg(ctx, v10);
                            let v34 = constructor_writable_gpr_to_r_reg(ctx, v11);
                            let v35 = C::value_regs(ctx, v33, v34);
                            let v19 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v17.clone(),
                                alternative: v18,
                                dst: v12,
                            };
                            let v23 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v21.clone(),
                                alternative: v22,
                                dst: v10,
                            };
                            let v28 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg1.clone(),
                                consequent: v26.clone(),
                                alternative: v27,
                                dst: v13,
                            };
                            let v32 = MInst::Cmove {
                                size: OperandSize::Size64,
                                cc: arg2.clone(),
                                consequent: v30.clone(),
                                alternative: v31,
                                dst: v11,
                            };
                            let v36 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                                inst1: v19,
                                inst2: v23,
                                inst3: v28,
                                inst4: v32,
                                result: v35,
                            };
                            // Rule at src/isa/x64/inst.isle line 3354.
                            return v36;
                        }
                    }
                    true => {
                        let v37 = &constructor_put_in_gpr_mem(ctx, arg3);
                        let v38 = constructor_put_in_gpr(ctx, arg4);
                        let v39 = &constructor_cmove_or(ctx, arg0, arg1, arg2, v37, v38);
                        // Rule at src/isa/x64/inst.isle line 3373.
                        return v39.clone();
                    }
                    _ => {}
                }
            }
            &RegisterClass::Xmm => {
                let v40 = constructor_put_in_xmm(ctx, arg3);
                let v41 = constructor_put_in_xmm(ctx, arg4);
                let v42 = &constructor_cmove_or_xmm(ctx, arg0, arg1, arg2, v40, v41);
                // Rule at src/isa/x64/inst.isle line 3376.
                return v42.clone();
            }
            _ => {}
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmove_or_from_values", "src/isa/x64/inst.isle line 3353")
}

// Generated as internal constructor for term x64_setcc.
pub fn constructor_x64_setcc<C: Context>(
    ctx: &mut C,
    arg0: &CC,
) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 3381.
    return v4;
}

// Generated as internal constructor for term x64_setcc_paired.
pub fn constructor_x64_setcc_paired<C: Context>(
    ctx: &mut C,
    arg0: &CC,
) -> ConsumesFlags {
    let v1 = C::temp_writable_gpr(ctx);
    let v3 = constructor_writable_gpr_to_r_reg(ctx, v1);
    let v2 = MInst::Setcc {
        cc: arg0.clone(),
        dst: v1,
    };
    let v4 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v2,
        result: v3,
    };
    // Rule at src/isa/x64/inst.isle line 3390.
    return v4;
}

// Generated as internal constructor for term x64_paddb.
pub fn constructor_x64_paddb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3400.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3398.
    return v4;
}

// Generated as internal constructor for term x64_paddw.
pub fn constructor_x64_paddw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3408.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3406.
    return v4;
}

// Generated as internal constructor for term x64_paddd.
pub fn constructor_x64_paddd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3416.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3414.
    return v4;
}

// Generated as internal constructor for term x64_paddq.
pub fn constructor_x64_paddq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3424.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3422.
    return v4;
}

// Generated as internal constructor for term x64_paddsb.
pub fn constructor_x64_paddsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3432.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3430.
    return v4;
}

// Generated as internal constructor for term x64_paddsw.
pub fn constructor_x64_paddsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3440.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3438.
    return v4;
}

// Generated as internal constructor for term x64_phaddw.
pub fn constructor_x64_phaddw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3448.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3446.
    return v4;
}

// Generated as internal constructor for term x64_phaddd.
pub fn constructor_x64_phaddd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vphaddd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3456.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Phaddd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3454.
    return v4;
}

// Generated as internal constructor for term x64_paddusb.
pub fn constructor_x64_paddusb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3464.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3462.
    return v4;
}

// Generated as internal constructor for term x64_paddusw.
pub fn constructor_x64_paddusw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpaddusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3472.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Paddusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3470.
    return v4;
}

// Generated as internal constructor for term x64_psubb.
pub fn constructor_x64_psubb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3480.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3478.
    return v4;
}

// Generated as internal constructor for term x64_psubw.
pub fn constructor_x64_psubw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3488.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3486.
    return v4;
}

// Generated as internal constructor for term x64_psubd.
pub fn constructor_x64_psubd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3496.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3494.
    return v4;
}

// Generated as internal constructor for term x64_psubq.
pub fn constructor_x64_psubq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3504.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3502.
    return v4;
}

// Generated as internal constructor for term x64_psubsb.
pub fn constructor_x64_psubsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3512.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3510.
    return v4;
}

// Generated as internal constructor for term x64_psubsw.
pub fn constructor_x64_psubsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3520.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3518.
    return v4;
}

// Generated as internal constructor for term x64_psubusb.
pub fn constructor_x64_psubusb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3528.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3526.
    return v4;
}

// Generated as internal constructor for term x64_psubusw.
pub fn constructor_x64_psubusw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsubusw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3536.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Psubusw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3534.
    return v4;
}

// Generated as internal constructor for term x64_pavgb.
pub fn constructor_x64_pavgb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3544.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3542.
    return v4;
}

// Generated as internal constructor for term x64_pavgw.
pub fn constructor_x64_pavgw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpavgw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3552.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pavgw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3550.
    return v4;
}

// Generated as internal constructor for term x64_pand.
pub fn constructor_x64_pand<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpand, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3560.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pand, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3558.
    return v4;
}

// Generated as internal constructor for term x64_andps.
pub fn constructor_x64_andps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3568.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3566.
    return v4;
}

// Generated as internal constructor for term x64_andpd.
pub fn constructor_x64_andpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3576.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3574.
    return v4;
}

// Generated as internal constructor for term x64_por.
pub fn constructor_x64_por<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3584.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Por, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3582.
    return v4;
}

// Generated as internal constructor for term x64_orps.
pub fn constructor_x64_orps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3592.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Orps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3590.
    return v4;
}

// Generated as internal constructor for term x64_orpd.
pub fn constructor_x64_orpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = C::use_avx(ctx);
    if v2 == true {
        let v4 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v5 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vorpd, arg0, v4);
        // Rule at src/isa/x64/inst.isle line 3598.
        return v5;
    }
    let v6 = &C::is_xmm_mem(ctx, arg1);
    if let Some(v7) = v6 {
        let v8 = constructor_x64_orpd_a(ctx, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3601.
        return v8;
    }
    let v10 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v11 = constructor_xmm_rm_r(ctx, &SseOpcode::Orpd, arg0, v10);
    // Rule at src/isa/x64/inst.isle line 3602.
    return v11;
}

// Generated as internal constructor for term x64_pxor.
pub fn constructor_x64_pxor<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpxor, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3609.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pxor, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3607.
    return v4;
}

// Generated as internal constructor for term x64_xorps.
pub fn constructor_x64_xorps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3617.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3615.
    return v4;
}

// Generated as internal constructor for term x64_xorpd.
pub fn constructor_x64_xorpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vxorpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3625.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Xorpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3623.
    return v4;
}

// Generated as internal constructor for term x64_pmullw.
pub fn constructor_x64_pmullw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmullw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3633.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmullw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3631.
    return v4;
}

// Generated as internal constructor for term x64_pmulld.
pub fn constructor_x64_pmulld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulld, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3641.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3639.
    return v4;
}

// Generated as internal constructor for term x64_pmulhw.
pub fn constructor_x64_pmulhw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3649.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3647.
    return v4;
}

// Generated as internal constructor for term x64_pmulhrsw.
pub fn constructor_x64_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhrsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3657.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhrsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3655.
    return v4;
}

// Generated as internal constructor for term x64_pmulhuw.
pub fn constructor_x64_pmulhuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmulhuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3665.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmulhuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3663.
    return v4;
}

// Generated as internal constructor for term x64_pmuldq.
pub fn constructor_x64_pmuldq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3673.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3671.
    return v4;
}

// Generated as internal constructor for term x64_pmuludq.
pub fn constructor_x64_pmuludq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmuludq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3681.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmuludq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3679.
    return v4;
}

// Generated as internal constructor for term x64_punpckhwd.
pub fn constructor_x64_punpckhwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3689.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3687.
    return v4;
}

// Generated as internal constructor for term x64_punpcklwd.
pub fn constructor_x64_punpcklwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3697.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3695.
    return v4;
}

// Generated as internal constructor for term x64_punpckldq.
pub fn constructor_x64_punpckldq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckldq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3705.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckldq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3703.
    return v4;
}

// Generated as internal constructor for term x64_punpckhdq.
pub fn constructor_x64_punpckhdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3713.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3711.
    return v4;
}

// Generated as internal constructor for term x64_punpcklqdq.
pub fn constructor_x64_punpcklqdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3721.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3719.
    return v4;
}

// Generated as internal constructor for term x64_punpckhqdq.
pub fn constructor_x64_punpckhqdq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhqdq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3729.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhqdq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3727.
    return v4;
}

// Generated as internal constructor for term x64_unpcklps.
pub fn constructor_x64_unpcklps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3737.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3735.
    return v4;
}

// Generated as internal constructor for term x64_unpcklpd.
pub fn constructor_x64_unpcklpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpcklpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3745.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpcklpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3743.
    return v4;
}

// Generated as internal constructor for term x64_unpckhps.
pub fn constructor_x64_unpckhps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vunpckhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3753.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Unpckhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3751.
    return v4;
}

// Generated as internal constructor for term x64_andnps.
pub fn constructor_x64_andnps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3761.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3759.
    return v4;
}

// Generated as internal constructor for term x64_andnpd.
pub fn constructor_x64_andnpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vandnpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3769.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Andnpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3767.
    return v4;
}

// Generated as internal constructor for term x64_pandn.
pub fn constructor_x64_pandn<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpandn, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3777.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pandn, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3775.
    return v4;
}

// Generated as internal constructor for term x64_addss.
pub fn constructor_x64_addss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3785.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3783.
    return v3;
}

// Generated as internal constructor for term x64_addsd.
pub fn constructor_x64_addsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3793.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Addsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3791.
    return v3;
}

// Generated as internal constructor for term x64_addps.
pub fn constructor_x64_addps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3801.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3799.
    return v4;
}

// Generated as internal constructor for term x64_addpd.
pub fn constructor_x64_addpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vaddpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3809.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Addpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3807.
    return v4;
}

// Generated as internal constructor for term x64_subss.
pub fn constructor_x64_subss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3817.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3815.
    return v3;
}

// Generated as internal constructor for term x64_subsd.
pub fn constructor_x64_subsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3825.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Subsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3823.
    return v3;
}

// Generated as internal constructor for term x64_subps.
pub fn constructor_x64_subps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3833.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3831.
    return v4;
}

// Generated as internal constructor for term x64_subpd.
pub fn constructor_x64_subpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsubpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3841.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Subpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3839.
    return v4;
}

// Generated as internal constructor for term x64_mulss.
pub fn constructor_x64_mulss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3849.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3847.
    return v3;
}

// Generated as internal constructor for term x64_mulsd.
pub fn constructor_x64_mulsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3857.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Mulsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3855.
    return v3;
}

// Generated as internal constructor for term x64_mulps.
pub fn constructor_x64_mulps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3865.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3863.
    return v4;
}

// Generated as internal constructor for term x64_mulpd.
pub fn constructor_x64_mulpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmulpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3873.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Mulpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3871.
    return v4;
}

// Generated as internal constructor for term x64_divss.
pub fn constructor_x64_divss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3881.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3879.
    return v3;
}

// Generated as internal constructor for term x64_divsd.
pub fn constructor_x64_divsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 3889.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Divsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 3887.
    return v3;
}

// Generated as internal constructor for term x64_divps.
pub fn constructor_x64_divps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3897.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3895.
    return v4;
}

// Generated as internal constructor for term x64_divpd.
pub fn constructor_x64_divpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vdivpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3905.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Divpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3903.
    return v4;
}

// Generated as internal constructor for term x64_blendvpd.
pub fn constructor_x64_blendvpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvpd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3913.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvpd, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3911.
    return v5;
}

// Generated as internal constructor for term x64_blendvps.
pub fn constructor_x64_blendvps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vblendvps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3921.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Blendvps, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3919.
    return v5;
}

// Generated as internal constructor for term x64_pblendvb.
pub fn constructor_x64_pblendvb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: Xmm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = constructor_xmm_rmr_blend_vex(ctx, &AvxOpcode::Vpblendvb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3929.
        return v8;
    }
    let v4 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v5 = constructor_xmm_rm_r_blend(ctx, &SseOpcode::Pblendvb, arg0, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 3927.
    return v5;
}

// Generated as internal constructor for term x64_pblendw.
pub fn constructor_x64_pblendw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpblendw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 3937.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pblendw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 3935.
    return v7;
}

// Generated as internal constructor for term x64_movsd_regmove.
pub fn constructor_x64_movsd_regmove<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3952.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3950.
    return v4;
}

// Generated as internal constructor for term x64_movss_regmove.
pub fn constructor_x64_movss_regmove<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovss, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3959.
        return v8;
    }
    let v3 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v4 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Movss, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3957.
    return v4;
}

// Generated as internal constructor for term x64_movlhps.
pub fn constructor_x64_movlhps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmovlhps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3967.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Movlhps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3965.
    return v4;
}

// Generated as internal constructor for term x64_pmaxs.
pub fn constructor_x64_pmaxs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3973.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3974.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3975.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmaxs", "src/isa/x64/inst.isle line 3972")
}

// Generated as internal constructor for term x64_pmaxsb.
pub fn constructor_x64_pmaxsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3979.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3978.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsw.
pub fn constructor_x64_pmaxsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3984.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3983.
    return v4;
}

// Generated as internal constructor for term x64_pmaxsd.
pub fn constructor_x64_pmaxsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 3989.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 3988.
    return v4;
}

// Generated as internal constructor for term x64_pmins.
pub fn constructor_x64_pmins<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminsb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3995.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminsw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3996.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminsd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 3997.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmins", "src/isa/x64/inst.isle line 3994")
}

// Generated as internal constructor for term x64_pminsb.
pub fn constructor_x64_pminsb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4001.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4000.
    return v4;
}

// Generated as internal constructor for term x64_pminsw.
pub fn constructor_x64_pminsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4006.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4005.
    return v4;
}

// Generated as internal constructor for term x64_pminsd.
pub fn constructor_x64_pminsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminsd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4011.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminsd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4010.
    return v4;
}

// Generated as internal constructor for term x64_pmaxu.
pub fn constructor_x64_pmaxu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pmaxub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4017.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pmaxuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4018.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pmaxud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4019.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pmaxu", "src/isa/x64/inst.isle line 4016")
}

// Generated as internal constructor for term x64_pmaxub.
pub fn constructor_x64_pmaxub<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4023.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4022.
    return v4;
}

// Generated as internal constructor for term x64_pmaxuw.
pub fn constructor_x64_pmaxuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4028.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4027.
    return v4;
}

// Generated as internal constructor for term x64_pmaxud.
pub fn constructor_x64_pmaxud<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaxud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4033.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaxud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4032.
    return v4;
}

// Generated as internal constructor for term x64_pminu.
pub fn constructor_x64_pminu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pminub(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4039.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pminuw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4040.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pminud(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4041.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pminu", "src/isa/x64/inst.isle line 4038")
}

// Generated as internal constructor for term x64_pminub.
pub fn constructor_x64_pminub<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminub, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4045.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminub, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4044.
    return v4;
}

// Generated as internal constructor for term x64_pminuw.
pub fn constructor_x64_pminuw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminuw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4050.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminuw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4049.
    return v4;
}

// Generated as internal constructor for term x64_pminud.
pub fn constructor_x64_pminud<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpminud, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4055.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pminud, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4054.
    return v4;
}

// Generated as internal constructor for term x64_punpcklbw.
pub fn constructor_x64_punpcklbw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpcklbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4063.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpcklbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4061.
    return v4;
}

// Generated as internal constructor for term x64_punpckhbw.
pub fn constructor_x64_punpckhbw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpunpckhbw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4071.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Punpckhbw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4069.
    return v4;
}

// Generated as internal constructor for term x64_packsswb.
pub fn constructor_x64_packsswb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpacksswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4079.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packsswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4077.
    return v4;
}

// Generated as internal constructor for term x64_packssdw.
pub fn constructor_x64_packssdw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackssdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4087.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packssdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4085.
    return v4;
}

// Generated as internal constructor for term x64_packuswb.
pub fn constructor_x64_packuswb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackuswb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4095.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packuswb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4093.
    return v4;
}

// Generated as internal constructor for term x64_packusdw.
pub fn constructor_x64_packusdw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpackusdw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4103.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Packusdw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4101.
    return v4;
}

// Generated as internal constructor for term x64_palignr.
pub fn constructor_x64_palignr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vpalignr, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4115.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Palignr, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4109.
    return v7;
}

// Generated as internal constructor for term x64_cmpp.
pub fn constructor_x64_cmpp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
    arg3: &FcmpImm,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v4 = constructor_x64_cmpps(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4121.
            return v4;
        }
        F64X2 => {
            let v5 = constructor_x64_cmppd(ctx, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4122.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_cmpp", "src/isa/x64/inst.isle line 4120")
}

// Generated as internal constructor for term x64_cmpps.
pub fn constructor_x64_cmpps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmpps, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 4131.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmpps, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4125.
    return v8;
}

// Generated as internal constructor for term x64_cmppd.
pub fn constructor_x64_cmppd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: &FcmpImm,
) -> Xmm {
    let v9 = C::use_avx(ctx);
    if v9 == true {
        let v11 = C::encode_fcmp_imm(ctx, arg2);
        let v12 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vcmppd, arg0, arg1, v11);
        // Rule at src/isa/x64/inst.isle line 4148.
        return v12;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v6 = C::encode_fcmp_imm(ctx, arg2);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v8 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Cmppd, v4, v5, v6, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4142.
    return v8;
}

// Generated as internal constructor for term x64_pinsrb.
pub fn constructor_x64_pinsrb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4163.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrb, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4157.
    return v7;
}

// Generated as internal constructor for term x64_pinsrw.
pub fn constructor_x64_pinsrw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4175.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrw, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4169.
    return v7;
}

// Generated as internal constructor for term x64_pinsrd.
pub fn constructor_x64_pinsrd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4187.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4181.
    return v7;
}

// Generated as internal constructor for term x64_pinsrq.
pub fn constructor_x64_pinsrq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &GprMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_vex_pinsr(ctx, &AvxOpcode::Vpinsrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4199.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::gpr_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Pinsrd, v4, v5, arg2, &OperandSize::Size64);
    // Rule at src/isa/x64/inst.isle line 4193.
    return v7;
}

// Generated as internal constructor for term x64_roundss.
pub fn constructor_x64_roundss<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundss, arg0, v10);
        // Rule at src/isa/x64/inst.isle line 4224.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F32, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundss, v5, v6);
    // Rule at src/isa/x64/inst.isle line 4222.
    return v7;
}

// Generated as internal constructor for term x64_roundsd.
pub fn constructor_x64_roundsd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = C::encode_round_imm(ctx, arg1);
        let v11 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundsd, arg0, v10);
        // Rule at src/isa/x64/inst.isle line 4234.
        return v11;
    }
    let v4 = constructor_put_xmm_mem_in_xmm(ctx, F64, arg0);
    let v5 = &constructor_xmm_to_xmm_mem_aligned(ctx, v4);
    let v6 = C::encode_round_imm(ctx, arg1);
    let v7 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundsd, v5, v6);
    // Rule at src/isa/x64/inst.isle line 4232.
    return v7;
}

// Generated as internal constructor for term put_xmm_mem_in_xmm.
pub fn constructor_put_xmm_mem_in_xmm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    match v2 {
        &RegMem::Reg {
            reg: v3,
        } => {
            let v4 = C::xmm_new(ctx, v3);
            // Rule at src/isa/x64/inst.isle line 4243.
            return v4;
        }
        &RegMem::Mem {
            addr: ref v5,
        } => {
            let v7 = constructor_x64_load(ctx, arg0, v5, &ExtKind::None);
            let v8 = C::xmm_new(ctx, v7);
            // Rule at src/isa/x64/inst.isle line 4246.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "put_xmm_mem_in_xmm", "src/isa/x64/inst.isle line 4242")
}

// Generated as internal constructor for term x64_roundps.
pub fn constructor_x64_roundps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundps, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 4254.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundps, v3, v4);
    // Rule at src/isa/x64/inst.isle line 4252.
    return v5;
}

// Generated as internal constructor for term x64_roundpd.
pub fn constructor_x64_roundpd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: &RoundImm,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v8 = C::encode_round_imm(ctx, arg1);
        let v9 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vroundpd, arg0, v8);
        // Rule at src/isa/x64/inst.isle line 4262.
        return v9;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = C::encode_round_imm(ctx, arg1);
    let v5 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Roundpd, v3, v4);
    // Rule at src/isa/x64/inst.isle line 4260.
    return v5;
}

// Generated as internal constructor for term x64_pmaddwd.
pub fn constructor_x64_pmaddwd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddwd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4270.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddwd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4268.
    return v4;
}

// Generated as internal constructor for term x64_pmaddubsw.
pub fn constructor_x64_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpmaddubsw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4277.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pmaddubsw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4275.
    return v4;
}

// Generated as internal constructor for term x64_insertps.
pub fn constructor_x64_insertps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vinsertps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4289.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Insertps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4283.
    return v7;
}

// Generated as internal constructor for term x64_pshufd.
pub fn constructor_x64_pshufd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4297.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufd, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 4295.
    return v4;
}

// Generated as internal constructor for term x64_pshufb.
pub fn constructor_x64_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpshufb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4305.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pshufb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4303.
    return v4;
}

// Generated as internal constructor for term x64_pshuflw.
pub fn constructor_x64_pshuflw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshuflw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4313.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshuflw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 4311.
    return v4;
}

// Generated as internal constructor for term x64_pshufhw.
pub fn constructor_x64_pshufhw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_unary_rm_r_imm_vex(ctx, &AvxOpcode::Vpshufhw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4321.
        return v7;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v4 = constructor_xmm_unary_rm_r_imm(ctx, &SseOpcode::Pshufhw, v3, arg1);
    // Rule at src/isa/x64/inst.isle line 4319.
    return v4;
}

// Generated as internal constructor for term x64_shufps.
pub fn constructor_x64_shufps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
    arg2: u8,
) -> Xmm {
    let v8 = C::use_avx(ctx);
    if v8 == true {
        let v10 = constructor_xmm_rmr_imm_vex(ctx, &AvxOpcode::Vshufps, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4333.
        return v10;
    }
    let v4 = C::xmm_to_reg(ctx, arg0);
    let v5 = &C::xmm_mem_to_reg_mem(ctx, arg1);
    let v7 = constructor_xmm_rm_r_imm(ctx, &SseOpcode::Shufps, v4, v5, arg2, &OperandSize::Size32);
    // Rule at src/isa/x64/inst.isle line 4327.
    return v7;
}

// Generated as internal constructor for term x64_pabsb.
pub fn constructor_x64_pabsb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsb, arg0);
        // Rule at src/isa/x64/inst.isle line 4341.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsb, v2);
    // Rule at src/isa/x64/inst.isle line 4339.
    return v3;
}

// Generated as internal constructor for term x64_pabsw.
pub fn constructor_x64_pabsw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsw, arg0);
        // Rule at src/isa/x64/inst.isle line 4349.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsw, v2);
    // Rule at src/isa/x64/inst.isle line 4347.
    return v3;
}

// Generated as internal constructor for term x64_pabsd.
pub fn constructor_x64_pabsd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpabsd, arg0);
        // Rule at src/isa/x64/inst.isle line 4357.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Pabsd, v2);
    // Rule at src/isa/x64/inst.isle line 4355.
    return v3;
}

// Generated as internal constructor for term x64_vcvtudq2ps.
pub fn constructor_x64_vcvtudq2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vcvtudq2ps, arg0);
    // Rule at src/isa/x64/inst.isle line 4363.
    return v2;
}

// Generated as internal constructor for term x64_vpabsq.
pub fn constructor_x64_vpabsq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpabsq, arg0);
    // Rule at src/isa/x64/inst.isle line 4368.
    return v2;
}

// Generated as internal constructor for term x64_vpopcntb.
pub fn constructor_x64_vpopcntb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_evex(ctx, &Avx512Opcode::Vpopcntb, arg0);
    // Rule at src/isa/x64/inst.isle line 4373.
    return v2;
}

// Generated as internal constructor for term x64_vpmullq.
pub fn constructor_x64_vpmullq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpmullq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4380.
    return v3;
}

// Generated as internal constructor for term x64_vpermi2b.
pub fn constructor_x64_vpermi2b<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    let v3 = C::temp_writable_xmm(ctx);
    let v5 = MInst::XmmRmREvex3 {
        op: Avx512Opcode::Vpermi2b,
        src1: arg0,
        src2: arg1,
        src3: arg2.clone(),
        dst: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_xmm_to_xmm(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 4389.
    return v7;
}

// Generated as internal constructor for term x64_psllw.
pub fn constructor_x64_psllw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4402.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4400.
    return v4;
}

// Generated as internal constructor for term x64_pslld.
pub fn constructor_x64_pslld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpslld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4410.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Pslld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4408.
    return v4;
}

// Generated as internal constructor for term x64_psllq.
pub fn constructor_x64_psllq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsllq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4418.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psllq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4416.
    return v4;
}

// Generated as internal constructor for term x64_psrlw.
pub fn constructor_x64_psrlw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4426.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4424.
    return v4;
}

// Generated as internal constructor for term x64_psrld.
pub fn constructor_x64_psrld<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrld, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4434.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrld, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4432.
    return v4;
}

// Generated as internal constructor for term x64_psrlq.
pub fn constructor_x64_psrlq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrlq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4442.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrlq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4440.
    return v4;
}

// Generated as internal constructor for term x64_psraw.
pub fn constructor_x64_psraw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsraw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4450.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psraw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4448.
    return v4;
}

// Generated as internal constructor for term x64_psrad.
pub fn constructor_x64_psrad<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMemImm,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpsrad, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4458.
        return v7;
    }
    let v3 = &C::xmm_mem_imm_to_xmm_mem_aligned_imm(ctx, arg1);
    let v4 = constructor_xmm_rmi_xmm(ctx, &SseOpcode::Psrad, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4456.
    return v4;
}

// Generated as internal constructor for term x64_vpsraq.
pub fn constructor_x64_vpsraq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v3 = constructor_xmm_rm_r_evex(ctx, &Avx512Opcode::Vpsraq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4464.
    return v3;
}

// Generated as internal constructor for term x64_vpsraq_imm.
pub fn constructor_x64_vpsraq_imm<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
    arg1: u8,
) -> Xmm {
    let v3 = constructor_xmm_unary_rm_r_imm_evex(ctx, &Avx512Opcode::VpsraqImm, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4469.
    return v3;
}

// Generated as internal constructor for term x64_pextrb.
pub fn constructor_x64_pextrb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4476.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrb, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4474.
    return v3;
}

// Generated as internal constructor for term x64_pextrb_store.
pub fn constructor_x64_pextrb_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrb, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4483.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrb, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4481.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrw.
pub fn constructor_x64_pextrw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4491.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrw, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4489.
    return v3;
}

// Generated as internal constructor for term x64_pextrw_store.
pub fn constructor_x64_pextrw_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrw, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4498.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrw, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4496.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrd.
pub fn constructor_x64_pextrd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4506.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4504.
    return v3;
}

// Generated as internal constructor for term x64_pextrd_store.
pub fn constructor_x64_pextrd_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrd, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4513.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrd, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4511.
    return v4.clone();
}

// Generated as internal constructor for term x64_pextrq.
pub fn constructor_x64_pextrq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u8,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1);
        // Rule at src/isa/x64/inst.isle line 4521.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr_imm(ctx, &SseOpcode::Pextrq, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4519.
    return v3;
}

// Generated as internal constructor for term x64_pextrq_store.
pub fn constructor_x64_pextrq_store<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: Xmm,
    arg2: u8,
) -> SideEffectNoResult {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &constructor_xmm_movrm_imm_vex(ctx, &AvxOpcode::Vpextrq, arg0, arg1, arg2);
        // Rule at src/isa/x64/inst.isle line 4528.
        return v7.clone();
    }
    let v4 = &constructor_xmm_movrm_imm(ctx, &SseOpcode::Pextrq, arg0, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 4526.
    return v4.clone();
}

// Generated as internal constructor for term x64_pmovmskb.
pub fn constructor_x64_pmovmskb<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vpmovmskb, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4536.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Pmovmskb, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4534.
    return v3;
}

// Generated as internal constructor for term x64_movmskps.
pub fn constructor_x64_movmskps<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskps, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4544.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskps, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4542.
    return v3;
}

// Generated as internal constructor for term x64_movmskpd.
pub fn constructor_x64_movmskpd<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Xmm,
) -> Gpr {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_to_gpr_vex(ctx, &AvxOpcode::Vmovmskpd, arg1, arg0);
        // Rule at src/isa/x64/inst.isle line 4552.
        return v6;
    }
    let v3 = constructor_xmm_to_gpr(ctx, &SseOpcode::Movmskpd, arg1, arg0);
    // Rule at src/isa/x64/inst.isle line 4550.
    return v3;
}

// Generated as internal constructor for term x64_not.
pub fn constructor_x64_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::Not {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4558.
    return v6;
}

// Generated as internal constructor for term x64_neg.
pub fn constructor_x64_neg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4566.
    return v6;
}

// Generated as internal constructor for term x64_neg_paired.
pub fn constructor_x64_neg_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v4 = MInst::Neg {
        size: v3.clone(),
        src: arg1,
        dst: v2,
    };
    let v6 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v4,
        result: v5,
    };
    // Rule at src/isa/x64/inst.isle line 4574.
    return v6;
}

// Generated as internal constructor for term x64_lea.
pub fn constructor_x64_lea<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &SyntheticAmode,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = MInst::LoadEffectiveAddress {
        addr: arg1.clone(),
        dst: v2,
        size: v3.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 4584.
    return v6;
}

// Generated as internal constructor for term x64_ud2.
pub fn constructor_x64_ud2<C: Context>(
    ctx: &mut C,
    arg0: &TrapCode,
) -> SideEffectNoResult {
    let v1 = MInst::Ud2 {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src/isa/x64/inst.isle line 4591.
    return v2;
}

// Generated as internal constructor for term x64_hlt.
pub fn constructor_x64_hlt<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Hlt,
    };
    // Rule at src/isa/x64/inst.isle line 4596.
    return v1;
}

// Generated as internal constructor for term x64_lzcnt.
pub fn constructor_x64_lzcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Lzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4601.
    return v4;
}

// Generated as internal constructor for term x64_tzcnt.
pub fn constructor_x64_tzcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Tzcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4606.
    return v4;
}

// Generated as internal constructor for term x64_bsr.
pub fn constructor_x64_bsr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsr,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4611.
    return v8;
}

// Generated as internal constructor for term bsr_or_else.
pub fn constructor_bsr_or_else<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &constructor_x64_bsr(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4620.
    return v11;
}

// Generated as internal constructor for term x64_bsf.
pub fn constructor_x64_bsf<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> ProducesFlags {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v7 = constructor_writable_gpr_to_r_reg(ctx, v2);
    let v6 = MInst::UnaryRmR {
        size: v3.clone(),
        op: UnaryRmROpcode::Bsf,
        src: v5.clone(),
        dst: v2,
    };
    let v8 = ProducesFlags::ProducesFlagsReturnsReg {
        inst: v6,
        result: v7,
    };
    // Rule at src/isa/x64/inst.isle line 4631.
    return v8;
}

// Generated as internal constructor for term bsf_or_else.
pub fn constructor_bsf_or_else<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
) -> Gpr {
    let v3 = &constructor_x64_bsf(ctx, arg0, arg1);
    let v4 = constructor_produces_flags_get_reg(ctx, v3);
    let v5 = C::gpr_new(ctx, v4);
    let v7 = &C::gpr_to_gpr_mem(ctx, arg2);
    let v8 = &constructor_cmove(ctx, arg0, &CC::Z, v7, v5);
    let v9 = &constructor_produces_flags_ignore(ctx, v3);
    let v10 = constructor_with_flags_reg(ctx, v9, v8);
    let v11 = C::gpr_new(ctx, v10);
    // Rule at src/isa/x64/inst.isle line 4640.
    return v11;
}

// Generated as internal constructor for term x64_blsi.
pub fn constructor_x64_blsi<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsi, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4651.
    return v4;
}

// Generated as internal constructor for term x64_blsmsk.
pub fn constructor_x64_blsmsk<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsmsk, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4656.
    return v4;
}

// Generated as internal constructor for term x64_blsr.
pub fn constructor_x64_blsr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r_vex(ctx, &UnaryRmRVexOpcode::Blsr, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4661.
    return v4;
}

// Generated as internal constructor for term x64_sarx.
pub fn constructor_x64_sarx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Sarx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4666.
    return v4;
}

// Generated as internal constructor for term x64_shrx.
pub fn constructor_x64_shrx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shrx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4671.
    return v4;
}

// Generated as internal constructor for term x64_shlx.
pub fn constructor_x64_shlx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: Gpr,
) -> Gpr {
    let v4 = constructor_alu_rm_r_vex(ctx, arg0, &AluRmROpcode::Shlx, arg2, arg1);
    // Rule at src/isa/x64/inst.isle line 4676.
    return v4;
}

// Generated as internal constructor for term x64_rorx.
pub fn constructor_x64_rorx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &GprMem,
    arg2: u8,
) -> Gpr {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = constructor_unary_rm_r_imm_vex(ctx, &UnaryRmRImmVexOpcode::Rorx, arg1, v4, arg2);
    // Rule at src/isa/x64/inst.isle line 4681.
    return v5;
}

// Generated as internal constructor for term x64_popcnt.
pub fn constructor_x64_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v3 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v4 = constructor_unary_rm_r(ctx, &UnaryRmROpcode::Popcnt, arg1, v3);
    // Rule at src/isa/x64/inst.isle line 4689.
    return v4;
}

// Generated as internal constructor for term x64_minss.
pub fn constructor_x64_minss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4696.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4694.
    return v3;
}

// Generated as internal constructor for term x64_minsd.
pub fn constructor_x64_minsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4704.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Minsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4702.
    return v3;
}

// Generated as internal constructor for term x64_minps.
pub fn constructor_x64_minps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4712.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4710.
    return v4;
}

// Generated as internal constructor for term x64_minpd.
pub fn constructor_x64_minpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vminpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4720.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Minpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4718.
    return v4;
}

// Generated as internal constructor for term x64_maxss.
pub fn constructor_x64_maxss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4728.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4726.
    return v3;
}

// Generated as internal constructor for term x64_maxsd.
pub fn constructor_x64_maxsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4736.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Maxsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4734.
    return v3;
}

// Generated as internal constructor for term x64_maxps.
pub fn constructor_x64_maxps<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxps, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4744.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxps, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4742.
    return v4;
}

// Generated as internal constructor for term x64_maxpd.
pub fn constructor_x64_maxpd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vmaxpd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4752.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Maxpd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4750.
    return v4;
}

// Generated as internal constructor for term x64_vfmadd213.
pub fn constructor_x64_vfmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4758.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4759.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4760.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4761.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmadd213", "src/isa/x64/inst.isle line 4757")
}

// Generated as internal constructor for term x64_vfmadd132.
pub fn constructor_x64_vfmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4765.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4766.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4767.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4768.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmadd132", "src/isa/x64/inst.isle line 4764")
}

// Generated as internal constructor for term x64_vfnmadd213.
pub fn constructor_x64_vfnmadd213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4772.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4773.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4774.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4775.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmadd213", "src/isa/x64/inst.isle line 4771")
}

// Generated as internal constructor for term x64_vfnmadd132.
pub fn constructor_x64_vfnmadd132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4779.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4780.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4781.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmadd132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4782.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmadd132", "src/isa/x64/inst.isle line 4778")
}

// Generated as internal constructor for term x64_vfmsub213.
pub fn constructor_x64_vfmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4786.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4787.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4788.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4789.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmsub213", "src/isa/x64/inst.isle line 4785")
}

// Generated as internal constructor for term x64_vfmsub132.
pub fn constructor_x64_vfmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4793.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4794.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4795.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfmsub132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4796.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfmsub132", "src/isa/x64/inst.isle line 4792")
}

// Generated as internal constructor for term x64_vfnmsub213.
pub fn constructor_x64_vfnmsub213<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4800.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4801.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4802.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub213pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4803.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmsub213", "src/isa/x64/inst.isle line 4799")
}

// Generated as internal constructor for term x64_vfnmsub132.
pub fn constructor_x64_vfnmsub132<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
    arg3: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v5 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ss, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4807.
            return v5;
        }
        F64 => {
            let v7 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132sd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4808.
            return v7;
        }
        F32X4 => {
            let v9 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132ps, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4809.
            return v9;
        }
        F64X2 => {
            let v11 = constructor_xmm_rmr_vex3(ctx, &AvxOpcode::Vfnmsub132pd, arg1, arg2, arg3);
            // Rule at src/isa/x64/inst.isle line 4810.
            return v11;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_vfnmsub132", "src/isa/x64/inst.isle line 4806")
}

// Generated as internal constructor for term x64_sqrtss.
pub fn constructor_x64_sqrtss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4826.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4825.
    return v3;
}

// Generated as internal constructor for term x64_sqrtsd.
pub fn constructor_x64_sqrtsd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vsqrtsd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4835.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Sqrtsd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4834.
    return v3;
}

// Generated as internal constructor for term x64_sqrtps.
pub fn constructor_x64_sqrtps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtps, arg0);
        // Rule at src/isa/x64/inst.isle line 4842.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtps, v2);
    // Rule at src/isa/x64/inst.isle line 4841.
    return v3;
}

// Generated as internal constructor for term x64_sqrtpd.
pub fn constructor_x64_sqrtpd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vsqrtpd, arg0);
        // Rule at src/isa/x64/inst.isle line 4849.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Sqrtpd, v2);
    // Rule at src/isa/x64/inst.isle line 4848.
    return v3;
}

// Generated as internal constructor for term x64_cvtss2sd.
pub fn constructor_x64_cvtss2sd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtss2sd, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4858.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtss2sd, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4857.
    return v3;
}

// Generated as internal constructor for term x64_cvtsd2ss.
pub fn constructor_x64_cvtsd2ss<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v7 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vcvtsd2ss, arg0, v6);
        // Rule at src/isa/x64/inst.isle line 4867.
        return v7;
    }
    let v3 = constructor_xmm_rm_r_unaligned(ctx, &SseOpcode::Cvtsd2ss, arg0, arg1);
    // Rule at src/isa/x64/inst.isle line 4866.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2ps.
pub fn constructor_x64_cvtdq2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4874.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4873.
    return v3;
}

// Generated as internal constructor for term x64_cvtps2pd.
pub fn constructor_x64_cvtps2pd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtps2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4881.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtps2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4880.
    return v3;
}

// Generated as internal constructor for term x64_cvtpd2ps.
pub fn constructor_x64_cvtpd2ps<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtpd2ps, arg0);
        // Rule at src/isa/x64/inst.isle line 4888.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtpd2ps, v2);
    // Rule at src/isa/x64/inst.isle line 4887.
    return v3;
}

// Generated as internal constructor for term x64_cvtdq2pd.
pub fn constructor_x64_cvtdq2pd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvtdq2pd, arg0);
        // Rule at src/isa/x64/inst.isle line 4895.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvtdq2pd, v2);
    // Rule at src/isa/x64/inst.isle line 4894.
    return v3;
}

// Generated as internal constructor for term x64_cvtsi2ss.
pub fn constructor_x64_cvtsi2ss<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2ss, arg1, arg2, v4);
        // Rule at src/isa/x64/inst.isle line 4903.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2ss, arg1, arg2, v4);
    // Rule at src/isa/x64/inst.isle line 4901.
    return v5;
}

// Generated as internal constructor for term x64_cvtsi2sd.
pub fn constructor_x64_cvtsi2sd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &GprMem,
) -> Xmm {
    let v6 = C::use_avx(ctx);
    if v6 == true {
        let v4 = &C::raw_operand_size_of_type(ctx, arg0);
        let v8 = constructor_cvt_int_to_float_vex(ctx, &AvxOpcode::Vcvtsi2sd, arg1, arg2, v4);
        // Rule at src/isa/x64/inst.isle line 4911.
        return v8;
    }
    let v4 = &C::raw_operand_size_of_type(ctx, arg0);
    let v5 = constructor_cvt_int_to_float(ctx, &SseOpcode::Cvtsi2sd, arg1, arg2, v4);
    // Rule at src/isa/x64/inst.isle line 4909.
    return v5;
}

// Generated as internal constructor for term x64_cvttps2dq.
pub fn constructor_x64_cvttps2dq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttps2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4919.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttps2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4917.
    return v3;
}

// Generated as internal constructor for term x64_cvttpd2dq.
pub fn constructor_x64_cvttpd2dq<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v4 = C::use_avx(ctx);
    if v4 == true {
        let v6 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vcvttpd2dq, arg0);
        // Rule at src/isa/x64/inst.isle line 4927.
        return v6;
    }
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg0);
    let v3 = constructor_xmm_unary_rm_r(ctx, &SseOpcode::Cvttpd2dq, v2);
    // Rule at src/isa/x64/inst.isle line 4925.
    return v3;
}

// Generated as internal constructor for term x64_pcmpeq.
pub fn constructor_x64_pcmpeq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpeqb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4933.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpeqw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4934.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4935.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse41(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpeqq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4936.
                return v7;
            }
            let v5 = constructor_x64_pcmpeqd(ctx, arg1, arg2);
            let v8 = &C::xmm_to_xmm_mem(ctx, v5);
            let v10 = constructor_x64_pshufd(ctx, v8, 0xb1_u8);
            let v11 = &C::xmm_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_pand(ctx, v5, v11);
            // Rule at src/isa/x64/inst.isle line 4945.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pcmpeq", "src/isa/x64/inst.isle line 4932")
}

// Generated as internal constructor for term x64_pcmpeqb.
pub fn constructor_x64_pcmpeqb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4952.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4951.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqw.
pub fn constructor_x64_pcmpeqw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4957.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4956.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqd.
pub fn constructor_x64_pcmpeqd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4962.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4961.
    return v4;
}

// Generated as internal constructor for term x64_pcmpeqq.
pub fn constructor_x64_pcmpeqq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpeqq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 4967.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpeqq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 4966.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgt.
pub fn constructor_x64_pcmpgt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        I8X16 => {
            let v3 = constructor_x64_pcmpgtb(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4973.
            return v3;
        }
        I16X8 => {
            let v4 = constructor_x64_pcmpgtw(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4974.
            return v4;
        }
        I32X4 => {
            let v5 = constructor_x64_pcmpgtd(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 4975.
            return v5;
        }
        I64X2 => {
            let v6 = C::use_sse42(ctx);
            if v6 == true {
                let v7 = constructor_x64_pcmpgtq(ctx, arg1, arg2);
                // Rule at src/isa/x64/inst.isle line 4979.
                return v7;
            }
            let v9 = C::emit_u128_le_const(ctx, 0x800000000000000080000000_u128);
            let v10 = &constructor_const_to_xmm_mem(ctx, v9);
            let v11 = constructor_x64_movdqu_load(ctx, v10);
            let v12 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v13 = constructor_x64_pxor(ctx, v11, v12);
            let v14 = constructor_x64_pxor(ctx, v11, arg2);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_pcmpgtd(ctx, v13, v15);
            let v17 = &C::xmm_to_xmm_mem(ctx, v16);
            let v19 = constructor_x64_pshufd(ctx, v17, 0xa0_u8);
            let v20 = &C::xmm_to_xmm_mem(ctx, v16);
            let v22 = constructor_x64_pshufd(ctx, v20, 0xf5_u8);
            let v23 = &C::xmm_to_xmm_mem(ctx, v14);
            let v24 = constructor_x64_pcmpeqd(ctx, v13, v23);
            let v25 = &C::xmm_to_xmm_mem(ctx, v24);
            let v26 = constructor_x64_pshufd(ctx, v25, 0xf5_u8);
            let v27 = &C::xmm_to_xmm_mem(ctx, v26);
            let v28 = constructor_x64_pand(ctx, v19, v27);
            let v29 = &C::xmm_to_xmm_mem(ctx, v22);
            let v30 = constructor_x64_por(ctx, v28, v29);
            // Rule at src/isa/x64/inst.isle line 5008.
            return v30;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_pcmpgt", "src/isa/x64/inst.isle line 4972")
}

// Generated as internal constructor for term x64_pcmpgtb.
pub fn constructor_x64_pcmpgtb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtb, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 5024.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtb, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 5023.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtw.
pub fn constructor_x64_pcmpgtw<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtw, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 5029.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtw, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 5028.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtd.
pub fn constructor_x64_pcmpgtd<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtd, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 5034.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtd, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 5033.
    return v4;
}

// Generated as internal constructor for term x64_pcmpgtq.
pub fn constructor_x64_pcmpgtq<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v5 = C::use_avx(ctx);
    if v5 == true {
        let v7 = &C::xmm_mem_to_xmm_mem_imm(ctx, arg1);
        let v8 = constructor_xmm_rmir_vex(ctx, &AvxOpcode::Vpcmpgtq, arg0, v7);
        // Rule at src/isa/x64/inst.isle line 5039.
        return v8;
    }
    let v3 = &C::xmm_mem_to_xmm_mem_aligned(ctx, arg1);
    let v4 = constructor_xmm_rm_r(ctx, &SseOpcode::Pcmpgtq, arg0, v3);
    // Rule at src/isa/x64/inst.isle line 5038.
    return v4;
}

// Generated as internal constructor for term alu_rm.
pub fn constructor_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AluRmiROpcode,
    arg2: &Amode,
    arg3: Gpr,
) -> SideEffectNoResult {
    let v4 = &C::operand_size_of_type_32_64(ctx, arg0);
    let v5 = &C::amode_to_synthetic_amode(ctx, arg2);
    let v6 = false;
    let v7 = MInst::AluRM {
        size: v4.clone(),
        op: arg1.clone(),
        src1_dst: v5.clone(),
        src2: arg3,
        lock: v6,
    };
    let v8 = SideEffectNoResult::Inst {
        inst: v7,
    };
    // Rule at src/isa/x64/inst.isle line 5045.
    return v8;
}

// Generated as internal constructor for term x64_add_mem.
pub fn constructor_x64_add_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_addb_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5060.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_addw_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5061.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_addl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5062.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_addq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5063.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_add_mem", "src/isa/x64/inst.isle line 5049")
}

// Generated as internal constructor for term x64_sub_mem.
pub fn constructor_x64_sub_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_subb_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5066.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_subw_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5067.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_subl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5068.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_subq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5069.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_sub_mem", "src/isa/x64/inst.isle line 5065")
}

// Generated as internal constructor for term x64_and_mem.
pub fn constructor_x64_and_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_andb_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5072.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_andw_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5073.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_andl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5074.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_andq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5076.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_andl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5075.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_andq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5077.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_and_mem", "src/isa/x64/inst.isle line 5071")
}

// Generated as internal constructor for term x64_or_mem.
pub fn constructor_x64_or_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_orb_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5080.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_orw_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5081.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_orl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5082.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_orq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5084.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_orl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5083.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_orq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5085.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_or_mem", "src/isa/x64/inst.isle line 5079")
}

// Generated as internal constructor for term x64_xor_mem.
pub fn constructor_x64_xor_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Amode,
    arg2: Gpr,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_x64_xorb_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5088.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_x64_xorw_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5089.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_x64_xorl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5090.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_x64_xorq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5092.
            return v6.clone();
        }
        F32 => {
            let v5 = &constructor_x64_xorl_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5091.
            return v5.clone();
        }
        F64 => {
            let v6 = &constructor_x64_xorq_mr_mem(ctx, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5093.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_xor_mem", "src/isa/x64/inst.isle line 5087")
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cc: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v2,
    };
    // Rule at src/isa/x64/inst.isle line 5097.
    return v3;
}

// Generated as internal constructor for term trap_if_and.
pub fn constructor_trap_if_and<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfAnd {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 5102.
    return v4;
}

// Generated as internal constructor for term trap_if_or.
pub fn constructor_trap_if_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: &TrapCode,
) -> ConsumesFlags {
    let v3 = MInst::TrapIfOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        trap_code: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 5107.
    return v4;
}

// Generated as internal constructor for term trap_if_icmp.
pub fn constructor_trap_if_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v4 = &constructor_trap_if(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/x64/inst.isle line 5111.
        return v5.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_icmp", "src/isa/x64/inst.isle line 5110")
}

// Generated as internal constructor for term trap_if_fcmp.
pub fn constructor_trap_if_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v4 = &constructor_trap_if(ctx, v2, arg1);
            let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
            // Rule at src/isa/x64/inst.isle line 5115.
            return v5.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v6,
            cc1: ref v7,
            cc2: ref v8,
        } => {
            let v9 = &constructor_trap_if_and(ctx, v7, v8, arg1);
            let v10 = &constructor_with_flags_side_effect(ctx, v6, v9);
            // Rule at src/isa/x64/inst.isle line 5117.
            return v10.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v11,
            cc1: ref v12,
            cc2: ref v13,
        } => {
            let v14 = &constructor_trap_if_or(ctx, v12, v13, arg1);
            let v15 = &constructor_with_flags_side_effect(ctx, v11, v14);
            // Rule at src/isa/x64/inst.isle line 5119.
            return v15.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_fcmp", "src/isa/x64/inst.isle line 5114")
}

// Generated as internal constructor for term zero_cond_to_cc.
pub fn constructor_zero_cond_to_cc<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
) -> CC {
    match arg0 {
        &ZeroCond::Zero => {
            // Rule at src/isa/x64/inst.isle line 5129.
            return CC::Z;
        }
        &ZeroCond::NonZero => {
            // Rule at src/isa/x64/inst.isle line 5130.
            return CC::NZ;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "zero_cond_to_cc", "src/isa/x64/inst.isle line 5128")
}

// Generated as internal constructor for term trap_if_val.
pub fn constructor_trap_if_val<C: Context>(
    ctx: &mut C,
    arg0: &ZeroCond,
    arg1: Value,
    arg2: &TrapCode,
) -> SideEffectNoResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v14 = C::put_in_regs(ctx, arg1);
        let v16 = constructor_value_regs_get_gpr(ctx, v14, 0x0_usize);
        let v17 = C::put_in_regs(ctx, arg1);
        let v19 = constructor_value_regs_get_gpr(ctx, v17, 0x1_usize);
        let v21 = &C::gpr_to_gpr_mem_imm(ctx, v16);
        let v22 = constructor_x64_or(ctx, I64, v19, v21);
        let v24 = &C::gpr_to_gpr_mem_imm(ctx, v22);
        let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, v22, v24);
        let v26 = &constructor_zero_cond_to_cc(ctx, arg0);
        let v27 = &constructor_trap_if(ctx, v26, arg2);
        let v28 = &constructor_with_flags_side_effect(ctx, v25, v27);
        // Rule at src/isa/x64/inst.isle line 5139.
        return v28.clone();
    }
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        let v6 = &C::raw_operand_size_of_type(ctx, v4);
        let v7 = C::put_in_reg(ctx, arg1);
        let v8 = C::gpr_new(ctx, v7);
        let v9 = &C::gpr_to_gpr_mem_imm(ctx, v8);
        let v10 = &constructor_x64_test(ctx, v6, v8, v9);
        let v11 = &constructor_zero_cond_to_cc(ctx, arg0);
        let v12 = &constructor_trap_if(ctx, v11, arg2);
        let v13 = &constructor_with_flags_side_effect(ctx, v10, v12);
        // Rule at src/isa/x64/inst.isle line 5133.
        return v13.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "trap_if_val", "src/isa/x64/inst.isle line 5132")
}

// Generated as internal constructor for term x64_movddup.
pub fn constructor_x64_movddup<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v3 = C::use_avx(ctx);
    if v3 == true {
        let v5 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vmovddup, arg0);
        // Rule at src/isa/x64/inst.isle line 5150.
        return v5;
    }
    let v2 = constructor_xmm_unary_rm_r_unaligned(ctx, &SseOpcode::Movddup, arg0);
    // Rule at src/isa/x64/inst.isle line 5148.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastb.
pub fn constructor_x64_vpbroadcastb<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastb, arg0);
    // Rule at src/isa/x64/inst.isle line 5156.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastw.
pub fn constructor_x64_vpbroadcastw<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastw, arg0);
    // Rule at src/isa/x64/inst.isle line 5161.
    return v2;
}

// Generated as internal constructor for term x64_vpbroadcastd.
pub fn constructor_x64_vpbroadcastd<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vpbroadcastd, arg0);
    // Rule at src/isa/x64/inst.isle line 5166.
    return v2;
}

// Generated as internal constructor for term x64_vbroadcastss.
pub fn constructor_x64_vbroadcastss<C: Context>(
    ctx: &mut C,
    arg0: &XmmMem,
) -> Xmm {
    let v2 = constructor_xmm_unary_rm_r_vex(ctx, &AvxOpcode::Vbroadcastss, arg0);
    // Rule at src/isa/x64/inst.isle line 5171.
    return v2;
}

// Generated as internal constructor for term jmp_known.
pub fn constructor_jmp_known<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
) -> SideEffectNoResult {
    let v1 = MInst::JmpKnown {
        dst: arg0,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src/isa/x64/inst.isle line 5178.
    return v2;
}

// Generated as internal constructor for term jmp_cond.
pub fn constructor_jmp_cond<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: MachLabel,
    arg2: MachLabel,
) -> ConsumesFlags {
    let v3 = MInst::JmpCond {
        cc: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v3,
    };
    // Rule at src/isa/x64/inst.isle line 5183.
    return v4;
}

// Generated as internal constructor for term jmp_cond_or.
pub fn constructor_jmp_cond_or<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &CC,
    arg2: MachLabel,
    arg3: MachLabel,
) -> ConsumesFlags {
    let v4 = MInst::JmpCondOr {
        cc1: arg0.clone(),
        cc2: arg1.clone(),
        taken: arg2,
        not_taken: arg3,
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect {
        inst: v4,
    };
    // Rule at src/isa/x64/inst.isle line 5188.
    return v5;
}

// Generated as internal constructor for term jmp_cond_icmp.
pub fn constructor_jmp_cond_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/x64/inst.isle line 5193.
        return v6.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "jmp_cond_icmp", "src/isa/x64/inst.isle line 5192")
}

// Generated as internal constructor for term jmp_cond_fcmp.
pub fn constructor_jmp_cond_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v5 = &constructor_jmp_cond(ctx, v2, arg1, arg2);
            let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
            // Rule at src/isa/x64/inst.isle line 5198.
            return v6.clone();
        }
        &FcmpCondResult::AndCondition {
            producer: ref v7,
            cc1: ref v8,
            cc2: ref v9,
        } => {
            let v10 = &C::cc_invert(ctx, v8);
            let v11 = &C::cc_invert(ctx, v9);
            let v12 = &constructor_jmp_cond_or(ctx, v10, v11, arg2, arg1);
            let v13 = &constructor_with_flags_side_effect(ctx, v7, v12);
            // Rule at src/isa/x64/inst.isle line 5200.
            return v13.clone();
        }
        &FcmpCondResult::OrCondition {
            producer: ref v14,
            cc1: ref v15,
            cc2: ref v16,
        } => {
            let v17 = &constructor_jmp_cond_or(ctx, v15, v16, arg1, arg2);
            let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
            // Rule at src/isa/x64/inst.isle line 5205.
            return v18.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "jmp_cond_fcmp", "src/isa/x64/inst.isle line 5197")
}

// Generated as internal constructor for term jmp_table_seq.
pub fn constructor_jmp_table_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = C::writable_gpr_to_reg(ctx, v5);
    let v9 = MInst::JmpTableSeq {
        idx: v6,
        tmp1: v7,
        tmp2: v8,
        default_target: arg2,
        targets: arg3.clone(),
    };
    let v10 = SideEffectNoResult::Inst {
        inst: v9,
    };
    // Rule at src/isa/x64/inst.isle line 5223.
    return v10;
}

// Generated as internal constructor for term icmp_cond_result.
pub fn constructor_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &CC,
) -> IcmpCondResult {
    let v2 = IcmpCondResult::Condition {
        producer: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 5243.
    return v2;
}

// Generated as internal constructor for term invert_icmp_cond_result.
pub fn constructor_invert_icmp_cond_result<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> IcmpCondResult {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v3 = &C::cc_invert(ctx, v2);
        let v4 = &constructor_icmp_cond_result(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 5246.
        return v4.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "invert_icmp_cond_result", "src/isa/x64/inst.isle line 5245")
}

// Generated as internal constructor for term lower_icmp_bool.
pub fn constructor_lower_icmp_bool<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v3 = &constructor_x64_setcc(ctx, v2);
        let v4 = constructor_with_flags(ctx, v1, v3);
        // Rule at src/isa/x64/inst.isle line 5251.
        return v4;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_icmp_bool", "src/isa/x64/inst.isle line 5250")
}

// Generated as internal constructor for term select_icmp.
pub fn constructor_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IcmpCondResult,
    arg1: Value,
    arg2: Value,
) -> ValueRegs {
    if let &IcmpCondResult::Condition {
        producer: ref v1,
        cc: ref v2,
    } = arg0 {
        let v4 = C::value_type(ctx, arg1);
        let v5 = &C::type_register_class(ctx, v4);
        if let Some(v6) = v5 {
            if let &RegisterClass::Gpr {
                single_register: v7,
            } = v6 {
                if v7 == true {
                    let v9 = constructor_put_in_gpr(ctx, arg1);
                    let v10 = &C::gpr_to_gpr_mem(ctx, v9);
                    let v11 = constructor_put_in_gpr(ctx, arg2);
                    let v12 = &constructor_cmove(ctx, v4, v2, v10, v11);
                    let v13 = constructor_with_flags(ctx, v1, v12);
                    // Rule at src/isa/x64/inst.isle line 5260.
                    return v13;
                }
            }
        }
        let v14 = &constructor_cmove_from_values(ctx, v4, v2, arg1, arg2);
        let v15 = constructor_with_flags(ctx, v1, v14);
        // Rule at src/isa/x64/inst.isle line 5264.
        return v15;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "select_icmp", "src/isa/x64/inst.isle line 5255")
}

// Generated as internal constructor for term emit_cmp.
pub fn constructor_emit_cmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
) -> IcmpCondResult {
    let v2 = C::value_type(ctx, arg1);
    if v2 == I128 {
        let v44 = C::put_in_regs(ctx, arg1);
        let v46 = constructor_value_regs_get_gpr(ctx, v44, 0x0_usize);
        let v47 = C::put_in_regs(ctx, arg1);
        let v49 = constructor_value_regs_get_gpr(ctx, v47, 0x1_usize);
        let v50 = C::put_in_regs(ctx, arg2);
        let v51 = constructor_value_regs_get_gpr(ctx, v50, 0x0_usize);
        let v52 = C::put_in_regs(ctx, arg2);
        let v53 = constructor_value_regs_get_gpr(ctx, v52, 0x1_usize);
        let v54 = &C::intcc_to_cc(ctx, arg0);
        let v55 = &constructor_emit_cmp_i128(ctx, v54, v49, v46, v53, v51);
        // Rule at src/isa/x64/inst.isle line 5295.
        return v55.clone();
    }
    let v29 = C::def_inst(ctx, arg1);
    if let Some(v30) = v29 {
        let v31 = &C::inst_data(ctx, v30);
        if let &InstructionData::UnaryImm {
            opcode: ref v32,
            imm: v33,
        } = v31 {
            if let &Opcode::Iconst = v32 {
                let v34 = C::u64_from_imm64(ctx, v33);
                if v34 == 0x0_u64 {
                    let v35 = C::value_type(ctx, arg2);
                    let v36 = &C::raw_operand_size_of_type(ctx, v35);
                    let v37 = C::put_in_reg(ctx, arg2);
                    let v38 = C::gpr_new(ctx, v37);
                    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
                    let v40 = &constructor_x64_test(ctx, v36, v38, v39);
                    let v41 = &C::intcc_swap_args(ctx, arg0);
                    let v42 = &C::intcc_to_cc(ctx, v41);
                    let v43 = &constructor_icmp_cond_result(ctx, v40, v42);
                    // Rule at src/isa/x64/inst.isle line 5288.
                    return v43.clone();
                }
            }
        }
    }
    let v17 = C::def_inst(ctx, arg2);
    if let Some(v18) = v17 {
        let v19 = &C::inst_data(ctx, v18);
        if let &InstructionData::UnaryImm {
            opcode: ref v20,
            imm: v21,
        } = v19 {
            if let &Opcode::Iconst = v20 {
                let v22 = C::u64_from_imm64(ctx, v21);
                if v22 == 0x0_u64 {
                    let v4 = &C::raw_operand_size_of_type(ctx, v2);
                    let v23 = C::put_in_reg(ctx, arg1);
                    let v24 = C::gpr_new(ctx, v23);
                    let v25 = &C::gpr_to_gpr_mem_imm(ctx, v24);
                    let v26 = &constructor_x64_test(ctx, v4, v24, v25);
                    let v27 = &C::intcc_to_cc(ctx, arg0);
                    let v28 = &constructor_icmp_cond_result(ctx, v26, v27);
                    // Rule at src/isa/x64/inst.isle line 5283.
                    return v28.clone();
                }
            }
        }
    }
    let v10 = &C::simm32_from_value(ctx, arg1);
    if let Some(v11) = v10 {
        let v4 = &C::raw_operand_size_of_type(ctx, v2);
        let v12 = constructor_put_in_gpr(ctx, arg2);
        let v13 = &constructor_x64_cmp(ctx, v4, v12, v11);
        let v14 = &C::intcc_swap_args(ctx, arg0);
        let v15 = &C::intcc_to_cc(ctx, v14);
        let v16 = &constructor_icmp_cond_result(ctx, v13, v15);
        // Rule at src/isa/x64/inst.isle line 5278.
        return v16.clone();
    }
    let v4 = &C::raw_operand_size_of_type(ctx, v2);
    let v5 = constructor_put_in_gpr(ctx, arg1);
    let v6 = &constructor_put_in_gpr_mem_imm(ctx, arg2);
    let v7 = &constructor_x64_cmp(ctx, v4, v5, v6);
    let v8 = &C::intcc_to_cc(ctx, arg0);
    let v9 = &constructor_icmp_cond_result(ctx, v7, v8);
    // Rule at src/isa/x64/inst.isle line 5271.
    return v9.clone();
}

// Generated as internal constructor for term emit_cmp_i128.
pub fn constructor_emit_cmp_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
    arg4: Gpr,
) -> IcmpCondResult {
    match arg0 {
        &CC::BE => {
            let v12 = &constructor_emit_cmp_i128(ctx, &CC::NB, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5310.
            return v12.clone();
        }
        &CC::NBE => {
            let v10 = &constructor_emit_cmp_i128(ctx, &CC::B, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5308.
            return v10.clone();
        }
        &CC::LE => {
            let v8 = &constructor_emit_cmp_i128(ctx, &CC::NL, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5306.
            return v8.clone();
        }
        &CC::NLE => {
            let v6 = &constructor_emit_cmp_i128(ctx, &CC::L, arg3, arg4, arg1, arg2);
            // Rule at src/isa/x64/inst.isle line 5304.
            return v6.clone();
        }
        _ => {}
    }
    let v13 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v14) = v13 {
        let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
        let v17 = constructor_x64_xor(ctx, I64, arg2, v16);
        let v18 = C::gpr_to_reg(ctx, v17);
        let v19 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
        let v20 = constructor_x64_xor(ctx, I64, arg1, v19);
        let v21 = C::gpr_to_reg(ctx, v20);
        let v23 = C::gpr_new(ctx, v18);
        let v24 = &constructor_reg_to_gpr_mem_imm(ctx, v21);
        let v25 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v23, v24);
        let v26 = &constructor_icmp_cond_result(ctx, v25, v14);
        // Rule at src/isa/x64/inst.isle line 5315.
        return v26.clone();
    }
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, arg4);
    let v28 = &constructor_x64_cmp(ctx, &OperandSize::Size64, arg2, v16);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, arg3);
    let v31 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Sbb, I64, arg1, v30);
    let v32 = &constructor_produces_flags_concat(ctx, v28, v31);
    let v33 = &constructor_icmp_cond_result(ctx, v32, arg0);
    // Rule at src/isa/x64/inst.isle line 5325.
    return v33.clone();
}

// Generated as internal constructor for term lower_fcmp_bool.
pub fn constructor_lower_fcmp_bool<C: Context>(
    ctx: &mut C,
    arg0: &FcmpCondResult,
) -> ValueRegs {
    match arg0 {
        &FcmpCondResult::Condition {
            producer: ref v1,
            cc: ref v2,
        } => {
            let v3 = &constructor_x64_setcc(ctx, v2);
            let v4 = constructor_with_flags(ctx, v1, v3);
            // Rule at src/isa/x64/inst.isle line 5346.
            return v4;
        }
        &FcmpCondResult::AndCondition {
            producer: ref v5,
            cc1: ref v6,
            cc2: ref v7,
        } => {
            let v8 = &constructor_x64_setcc(ctx, v6);
            let v9 = &constructor_x64_setcc(ctx, v7);
            let v10 = &constructor_consumes_flags_concat(ctx, v8, v9);
            let v11 = constructor_with_flags(ctx, v5, v10);
            let v13 = constructor_value_regs_get_gpr(ctx, v11, 0x0_usize);
            let v15 = constructor_value_regs_get_gpr(ctx, v11, 0x1_usize);
            let v17 = &C::gpr_to_gpr_mem_imm(ctx, v15);
            let v18 = constructor_x64_and(ctx, I8, v13, v17);
            let v19 = C::gpr_to_reg(ctx, v18);
            let v20 = C::value_reg(ctx, v19);
            // Rule at src/isa/x64/inst.isle line 5349.
            return v20;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v21,
            cc1: ref v22,
            cc2: ref v23,
        } => {
            let v24 = &constructor_x64_setcc(ctx, v22);
            let v25 = &constructor_x64_setcc(ctx, v23);
            let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
            let v27 = constructor_with_flags(ctx, v21, v26);
            let v28 = constructor_value_regs_get_gpr(ctx, v27, 0x0_usize);
            let v29 = constructor_value_regs_get_gpr(ctx, v27, 0x1_usize);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
            let v31 = constructor_x64_or(ctx, I8, v28, v30);
            let v32 = C::gpr_to_reg(ctx, v31);
            let v33 = C::value_reg(ctx, v32);
            // Rule at src/isa/x64/inst.isle line 5358.
            return v33;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_fcmp_bool", "src/isa/x64/inst.isle line 5344")
}

// Generated as internal constructor for term emit_fcmp.
pub fn constructor_emit_fcmp<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> FcmpCondResult {
    match arg0 {
        &FloatCC::Equal => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v11 = FcmpCondResult::AndCondition {
                    producer: v8.clone(),
                    cc1: CC::NP,
                    cc2: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 5385.
                return v11;
            }
        }
        &FloatCC::GreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v20 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 5401.
                return v20;
            }
        }
        &FloatCC::GreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v22 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 5403.
                return v22;
            }
        }
        &FloatCC::LessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v30 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NBE,
                };
                // Rule at src/isa/x64/inst.isle line 5413.
                return v30;
            }
        }
        &FloatCC::LessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v31 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::NB,
                };
                // Rule at src/isa/x64/inst.isle line 5416.
                return v31;
            }
        }
        &FloatCC::NotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v14 = FcmpCondResult::OrCondition {
                    producer: v8.clone(),
                    cc1: CC::P,
                    cc2: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 5388.
                return v14;
            }
        }
        &FloatCC::Ordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v15 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NP,
                };
                // Rule at src/isa/x64/inst.isle line 5393.
                return v15;
            }
        }
        &FloatCC::OrderedNotEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v17 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::NZ,
                };
                // Rule at src/isa/x64/inst.isle line 5397.
                return v17;
            }
        }
        &FloatCC::Unordered => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v16 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::P,
                };
                // Rule at src/isa/x64/inst.isle line 5395.
                return v16;
            }
        }
        &FloatCC::UnorderedOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v18 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::Z,
                };
                // Rule at src/isa/x64/inst.isle line 5399.
                return v18;
            }
        }
        &FloatCC::UnorderedOrGreaterThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v32 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 5419.
                return v32;
            }
        }
        &FloatCC::UnorderedOrGreaterThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v27 = constructor_put_in_xmm(ctx, arg2);
                let v28 = &C::put_in_xmm_mem(ctx, arg1);
                let v29 = &constructor_x64_ucomis(ctx, v4, v27, v28);
                let v33 = FcmpCondResult::Condition {
                    producer: v29.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 5422.
                return v33;
            }
        }
        &FloatCC::UnorderedOrLessThan => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v24 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::B,
                };
                // Rule at src/isa/x64/inst.isle line 5405.
                return v24;
            }
        }
        &FloatCC::UnorderedOrLessThanOrEqual => {
            let v2 = C::value_type(ctx, arg1);
            let v3 = C::ty_scalar_float(ctx, v2);
            if let Some(v4) = v3 {
                let v6 = constructor_put_in_xmm(ctx, arg1);
                let v7 = &C::put_in_xmm_mem(ctx, arg2);
                let v8 = &constructor_x64_ucomis(ctx, v4, v6, v7);
                let v26 = FcmpCondResult::Condition {
                    producer: v8.clone(),
                    cc: CC::BE,
                };
                // Rule at src/isa/x64/inst.isle line 5407.
                return v26;
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_fcmp", "src/isa/x64/inst.isle line 5383")
}

// Generated as internal constructor for term x64_mfence.
pub fn constructor_x64_mfence<C: Context>(
    ctx: &mut C,
) -> SideEffectNoResult {
    let v1 = MInst::Fence {
        kind: FenceKind::MFence,
    };
    let v2 = SideEffectNoResult::Inst {
        inst: v1,
    };
    // Rule at src/isa/x64/inst.isle line 5435.
    return v2;
}

// Generated as internal constructor for term x64_cmpxchg.
pub fn constructor_x64_cmpxchg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
    arg2: Gpr,
    arg3: &SyntheticAmode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::gpr_to_reg(ctx, arg2);
    let v6 = C::gpr_to_reg(ctx, arg1);
    let v7 = C::writable_gpr_to_reg(ctx, v4);
    let v8 = MInst::LockCmpxchg {
        ty: arg0,
        replacement: v5,
        expected: v6,
        mem: arg3.clone(),
        dst_old: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 5439.
    return v10;
}

// Generated as internal constructor for term x64_cmpxchg16b.
pub fn constructor_x64_cmpxchg16b<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
    arg2: &SyntheticAmode,
) -> ValueRegs {
    let v4 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v8 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = C::temp_writable_gpr(ctx);
    let v10 = C::temp_writable_gpr(ctx);
    let v11 = C::gpr_to_reg(ctx, v7);
    let v12 = C::gpr_to_reg(ctx, v8);
    let v13 = C::gpr_to_reg(ctx, v4);
    let v14 = C::gpr_to_reg(ctx, v6);
    let v16 = C::writable_gpr_to_reg(ctx, v9);
    let v17 = C::writable_gpr_to_reg(ctx, v10);
    let v15 = &C::box_synthetic_amode(ctx, arg2);
    let v18 = MInst::LockCmpxchg16b {
        replacement_low: v11,
        replacement_high: v12,
        expected_low: v13,
        expected_high: v14,
        mem: v15.clone(),
        dst_old_low: v16,
        dst_old_high: v17,
    };
    let v19 = C::emit(ctx, &v18);
    let v20 = constructor_writable_gpr_to_r_reg(ctx, v9);
    let v21 = constructor_writable_gpr_to_r_reg(ctx, v10);
    let v22 = C::value_regs(ctx, v20, v21);
    // Rule at src/isa/x64/inst.isle line 5445.
    return v22;
}

// Generated as internal constructor for term x64_xadd.
pub fn constructor_x64_xadd<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::gpr_to_reg(ctx, arg2);
    let v5 = C::writable_gpr_to_reg(ctx, v3);
    let v6 = MInst::LockXadd {
        size: arg0.clone(),
        operand: v4,
        mem: arg1.clone(),
        dst_old: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 5456.
    return v8;
}

// Generated as internal constructor for term x64_xchg.
pub fn constructor_x64_xchg<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::gpr_to_reg(ctx, arg2);
    let v5 = C::writable_gpr_to_reg(ctx, v3);
    let v6 = MInst::Xchg {
        size: arg0.clone(),
        operand: v4,
        mem: arg1.clone(),
        dst_old: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_gpr_to_gpr(ctx, v3);
    // Rule at src/isa/x64/inst.isle line 5462.
    return v8;
}

// Generated as internal constructor for term lock_alu_rm.
pub fn constructor_lock_alu_rm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &AluRmiROpcode,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Reg {
    let v4 = true;
    let v5 = MInst::AluRM {
        size: arg0.clone(),
        op: arg1.clone(),
        src1_dst: arg2.clone(),
        src2: arg3,
        lock: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::invalid_reg(ctx);
    // Rule at src/isa/x64/inst.isle line 5468.
    return v7;
}

// Generated as internal constructor for term x64_lock_add.
pub fn constructor_x64_lock_add<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Reg {
    let v4 = constructor_lock_alu_rm(ctx, arg0, &AluRmiROpcode::Add, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 5473.
    return v4;
}

// Generated as internal constructor for term x64_lock_sub.
pub fn constructor_x64_lock_sub<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Reg {
    let v4 = constructor_lock_alu_rm(ctx, arg0, &AluRmiROpcode::Sub, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 5477.
    return v4;
}

// Generated as internal constructor for term x64_lock_and.
pub fn constructor_x64_lock_and<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Reg {
    let v4 = constructor_lock_alu_rm(ctx, arg0, &AluRmiROpcode::And, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 5481.
    return v4;
}

// Generated as internal constructor for term x64_lock_or.
pub fn constructor_x64_lock_or<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Reg {
    let v4 = constructor_lock_alu_rm(ctx, arg0, &AluRmiROpcode::Or, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 5485.
    return v4;
}

// Generated as internal constructor for term x64_lock_xor.
pub fn constructor_x64_lock_xor<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: &SyntheticAmode,
    arg2: Gpr,
) -> Reg {
    let v4 = constructor_lock_alu_rm(ctx, arg0, &AluRmiROpcode::Xor, arg1, arg2);
    // Rule at src/isa/x64/inst.isle line 5489.
    return v4;
}

// Generated as internal constructor for term x64_atomic_rmw_seq.
pub fn constructor_x64_atomic_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &AtomicRmwSeqOp,
    arg2: &SyntheticAmode,
    arg3: Gpr,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::gpr_to_reg(ctx, arg3);
    let v7 = C::writable_gpr_to_reg(ctx, v5);
    let v8 = C::writable_gpr_to_reg(ctx, v4);
    let v9 = MInst::AtomicRmwSeq {
        ty: arg0,
        op: arg1.clone(),
        mem: arg2.clone(),
        operand: v6,
        temp: v7,
        dst_old: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 5493.
    return v11;
}

// Generated as internal constructor for term x64_atomic_128_rmw_seq.
pub fn constructor_x64_atomic_128_rmw_seq<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
    arg1: &SyntheticAmode,
    arg2: ValueRegs,
) -> ValueRegs {
    if let &AtomicRmwOp::Xchg = arg0 {
        let v3 = C::temp_writable_gpr(ctx);
        let v4 = C::temp_writable_gpr(ctx);
        let v24 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
        let v25 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::gpr_to_reg(ctx, v25);
        let v28 = C::writable_gpr_to_reg(ctx, v3);
        let v29 = C::writable_gpr_to_reg(ctx, v4);
        let v30 = MInst::Atomic128XchgSeq {
            mem: arg1.clone(),
            operand_low: v26,
            operand_high: v27,
            dst_old_low: v28,
            dst_old_high: v29,
        };
        let v31 = C::emit(ctx, &v30);
        let v32 = constructor_writable_gpr_to_r_reg(ctx, v3);
        let v33 = constructor_writable_gpr_to_r_reg(ctx, v4);
        let v34 = C::value_regs(ctx, v32, v33);
        // Rule at src/isa/x64/inst.isle line 5510.
        return v34;
    }
    let v3 = C::temp_writable_gpr(ctx);
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = C::temp_writable_gpr(ctx);
    let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
    let v10 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
    let v11 = &constructor_atomic_128_rmw_seq_op(ctx, arg0);
    let v13 = C::gpr_to_reg(ctx, v8);
    let v14 = C::gpr_to_reg(ctx, v10);
    let v15 = C::writable_gpr_to_reg(ctx, v5);
    let v16 = C::writable_gpr_to_reg(ctx, v6);
    let v17 = C::writable_gpr_to_reg(ctx, v3);
    let v18 = C::writable_gpr_to_reg(ctx, v4);
    let v12 = &C::box_synthetic_amode(ctx, arg1);
    let v19 = MInst::Atomic128RmwSeq {
        op: v11.clone(),
        mem: v12.clone(),
        operand_low: v13,
        operand_high: v14,
        temp_low: v15,
        temp_high: v16,
        dst_old_low: v17,
        dst_old_high: v18,
    };
    let v20 = C::emit(ctx, &v19);
    let v21 = constructor_writable_gpr_to_r_reg(ctx, v3);
    let v22 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v23 = C::value_regs(ctx, v21, v22);
    // Rule at src/isa/x64/inst.isle line 5500.
    return v23;
}

// Generated as internal constructor for term x64_atomic_128_store_seq.
pub fn constructor_x64_atomic_128_store_seq<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
    arg1: ValueRegs,
) -> SideEffectNoResult {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::temp_writable_gpr(ctx);
    let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v8 = C::gpr_to_reg(ctx, v5);
    let v9 = C::gpr_to_reg(ctx, v7);
    let v10 = C::writable_gpr_to_reg(ctx, v2);
    let v11 = C::writable_gpr_to_reg(ctx, v3);
    let v12 = MInst::Atomic128XchgSeq {
        mem: arg0.clone(),
        operand_low: v8,
        operand_high: v9,
        dst_old_low: v10,
        dst_old_high: v11,
    };
    let v13 = SideEffectNoResult::Inst {
        inst: v12,
    };
    // Rule at src/isa/x64/inst.isle line 5519.
    return v13;
}

// Generated as internal constructor for term atomic_rmw_seq_op.
pub fn constructor_atomic_rmw_seq_op<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
) -> AtomicRmwSeqOp {
    match arg0 {
        &AtomicRmwOp::And => {
            // Rule at src/isa/x64/inst.isle line 5538.
            return AtomicRmwSeqOp::And;
        }
        &AtomicRmwOp::Nand => {
            // Rule at src/isa/x64/inst.isle line 5539.
            return AtomicRmwSeqOp::Nand;
        }
        &AtomicRmwOp::Or => {
            // Rule at src/isa/x64/inst.isle line 5540.
            return AtomicRmwSeqOp::Or;
        }
        &AtomicRmwOp::Smax => {
            // Rule at src/isa/x64/inst.isle line 5545.
            return AtomicRmwSeqOp::Smax;
        }
        &AtomicRmwOp::Smin => {
            // Rule at src/isa/x64/inst.isle line 5544.
            return AtomicRmwSeqOp::Smin;
        }
        &AtomicRmwOp::Umax => {
            // Rule at src/isa/x64/inst.isle line 5543.
            return AtomicRmwSeqOp::Umax;
        }
        &AtomicRmwOp::Umin => {
            // Rule at src/isa/x64/inst.isle line 5542.
            return AtomicRmwSeqOp::Umin;
        }
        &AtomicRmwOp::Xor => {
            // Rule at src/isa/x64/inst.isle line 5541.
            return AtomicRmwSeqOp::Xor;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_rmw_seq_op", "src/isa/x64/inst.isle line 5537")
}

// Generated as internal constructor for term atomic_128_rmw_seq_op.
pub fn constructor_atomic_128_rmw_seq_op<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRmwOp,
) -> Atomic128RmwSeqOp {
    match arg0 {
        &AtomicRmwOp::Add => {
            // Rule at src/isa/x64/inst.isle line 5560.
            return Atomic128RmwSeqOp::Add;
        }
        &AtomicRmwOp::And => {
            // Rule at src/isa/x64/inst.isle line 5562.
            return Atomic128RmwSeqOp::And;
        }
        &AtomicRmwOp::Nand => {
            // Rule at src/isa/x64/inst.isle line 5563.
            return Atomic128RmwSeqOp::Nand;
        }
        &AtomicRmwOp::Or => {
            // Rule at src/isa/x64/inst.isle line 5564.
            return Atomic128RmwSeqOp::Or;
        }
        &AtomicRmwOp::Smax => {
            // Rule at src/isa/x64/inst.isle line 5569.
            return Atomic128RmwSeqOp::Smax;
        }
        &AtomicRmwOp::Smin => {
            // Rule at src/isa/x64/inst.isle line 5568.
            return Atomic128RmwSeqOp::Smin;
        }
        &AtomicRmwOp::Sub => {
            // Rule at src/isa/x64/inst.isle line 5561.
            return Atomic128RmwSeqOp::Sub;
        }
        &AtomicRmwOp::Umax => {
            // Rule at src/isa/x64/inst.isle line 5567.
            return Atomic128RmwSeqOp::Umax;
        }
        &AtomicRmwOp::Umin => {
            // Rule at src/isa/x64/inst.isle line 5566.
            return Atomic128RmwSeqOp::Umin;
        }
        &AtomicRmwOp::Xor => {
            // Rule at src/isa/x64/inst.isle line 5565.
            return Atomic128RmwSeqOp::Xor;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "atomic_128_rmw_seq_op", "src/isa/x64/inst.isle line 5559")
}

// Generated as internal constructor for term bitcast_xmm_to_gpr.
pub fn constructor_bitcast_xmm_to_gpr<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: Xmm,
) -> Gpr {
    match arg0 {
        0x10_u8 => {
            let v3 = constructor_x64_pextrw(ctx, arg1, 0x0_u8);
            // Rule at src/isa/x64/inst.isle line 5574.
            return v3;
        }
        0x20_u8 => {
            let v4 = constructor_x64_movd_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 5576.
            return v4;
        }
        0x40_u8 => {
            let v5 = constructor_x64_movq_to_gpr(ctx, arg1);
            // Rule at src/isa/x64/inst.isle line 5578.
            return v5;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitcast_xmm_to_gpr", "src/isa/x64/inst.isle line 5573")
}

// Generated as internal constructor for term bitcast_xmm_to_gprs.
pub fn constructor_bitcast_xmm_to_gprs<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> ValueRegs {
    let v1 = constructor_x64_movq_to_gpr(ctx, arg0);
    let v2 = C::gpr_to_reg(ctx, v1);
    let v3 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v5 = constructor_x64_pshufd(ctx, v3, 0xee_u8);
    let v6 = constructor_x64_movq_to_gpr(ctx, v5);
    let v7 = C::gpr_to_reg(ctx, v6);
    let v8 = C::value_regs(ctx, v2, v7);
    // Rule at src/isa/x64/inst.isle line 5582.
    return v8;
}

// Generated as internal constructor for term bitcast_gpr_to_xmm.
pub fn constructor_bitcast_gpr_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: Gpr,
) -> Xmm {
    match arg0 {
        0x10_u8 => {
            let v2 = constructor_xmm_uninit_value(ctx);
            let v3 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v5 = constructor_x64_pinsrw(ctx, v2, v3, 0x0_u8);
            // Rule at src/isa/x64/inst.isle line 5586.
            return v5;
        }
        0x20_u8 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v7 = constructor_x64_movd_to_xmm(ctx, v6);
            // Rule at src/isa/x64/inst.isle line 5588.
            return v7;
        }
        0x40_u8 => {
            let v6 = &C::gpr_to_gpr_mem(ctx, arg1);
            let v8 = constructor_x64_movq_to_xmm(ctx, v6);
            // Rule at src/isa/x64/inst.isle line 5590.
            return v8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "bitcast_gpr_to_xmm", "src/isa/x64/inst.isle line 5585")
}

// Generated as internal constructor for term bitcast_gprs_to_xmm.
pub fn constructor_bitcast_gprs_to_xmm<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
) -> Xmm {
    let v2 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v3 = &C::gpr_to_gpr_mem(ctx, v2);
    let v4 = constructor_x64_movq_to_xmm(ctx, v3);
    let v6 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_gpr_mem(ctx, v6);
    let v8 = constructor_x64_movq_to_xmm(ctx, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_punpcklqdq(ctx, v4, v9);
    // Rule at src/isa/x64/inst.isle line 5594.
    return v10;
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = C::writable_gpr_to_reg(ctx, v2);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 5600.
    return v6;
}

// Generated as internal constructor for term x64_checked_srem_seq.
pub fn constructor_x64_checked_srem_seq<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Gpr,
    arg2: Gpr,
    arg3: Gpr,
) -> ValueRegs {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = C::temp_writable_gpr(ctx);
    let v6 = MInst::CheckedSRemSeq {
        size: arg0.clone(),
        dividend_lo: arg1,
        dividend_hi: arg2,
        divisor: arg3,
        dst_quotient: v4,
        dst_remainder: v5,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = constructor_writable_gpr_to_r_reg(ctx, v4);
    let v9 = constructor_writable_gpr_to_r_reg(ctx, v5);
    let v10 = C::value_regs(ctx, v8, v9);
    // Rule at src/isa/x64/inst.isle line 5609.
    return v10;
}

// Generated as internal constructor for term x64_checked_srem_seq8.
pub fn constructor_x64_checked_srem_seq8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CheckedSRemSeq8 {
        dividend: arg0,
        divisor: arg1,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 5616.
    return v5;
}

// Generated as internal constructor for term x64_div8.
pub fn constructor_x64_div8<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
    arg2: &DivSignedness,
    arg3: &TrapCode,
) -> Gpr {
    let v4 = C::temp_writable_gpr(ctx);
    let v5 = MInst::Div8 {
        sign: arg2.clone(),
        trap: arg3.clone(),
        divisor: arg1.clone(),
        dividend: arg0,
        dst: v4,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_gpr_to_gpr(ctx, v4);
    // Rule at src/isa/x64/inst.isle line 5623.
    return v7;
}

// Generated as internal constructor for term x64_div.
pub fn constructor_x64_div<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = C::temp_writable_gpr(ctx);
    let v7 = C::temp_writable_gpr(ctx);
    let v8 = MInst::Div {
        size: arg3.clone(),
        sign: arg4.clone(),
        trap: arg5.clone(),
        divisor: arg2.clone(),
        dividend_lo: arg0,
        dividend_hi: arg1,
        dst_quotient: v6,
        dst_remainder: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = constructor_writable_gpr_to_r_reg(ctx, v6);
    let v11 = constructor_writable_gpr_to_r_reg(ctx, v7);
    let v12 = C::value_regs(ctx, v10, v11);
    // Rule at src/isa/x64/inst.isle line 5633.
    return v12;
}

// Generated as internal constructor for term x64_div_quotient.
pub fn constructor_x64_div_quotient<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x0_usize);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 5641.
    return v9;
}

// Generated as internal constructor for term x64_div_remainder.
pub fn constructor_x64_div_remainder<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &OperandSize,
    arg4: &DivSignedness,
    arg5: &TrapCode,
) -> ValueRegs {
    let v6 = constructor_x64_div(ctx, arg0, arg1, arg2, arg3, arg4, arg5);
    let v8 = C::value_regs_get(ctx, v6, 0x1_usize);
    let v9 = C::value_reg(ctx, v8);
    // Rule at src/isa/x64/inst.isle line 5646.
    return v9;
}

// Generated as internal constructor for term x64_sign_extend_data.
pub fn constructor_x64_sign_extend_data<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &OperandSize,
) -> Gpr {
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::SignExtendData {
        size: arg1.clone(),
        src: arg0,
        dst: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v2);
    // Rule at src/isa/x64/inst.isle line 5651.
    return v5;
}

// Generated as internal constructor for term read_pinned_gpr.
pub fn constructor_read_pinned_gpr<C: Context>(
    ctx: &mut C,
) -> Gpr {
    let v0 = C::preg_pinned(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    let v2 = C::gpr_new(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5659.
    return v2;
}

// Generated as internal constructor for term write_pinned_gpr.
pub fn constructor_write_pinned_gpr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/x64/inst.isle line 5663.
    return v2.clone();
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::ElfTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5705.
    return v4;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        dst: v1,
    };
    let v3 = C::emit(ctx, &v2);
    let v4 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5712.
    return v4;
}

// Generated as internal constructor for term coff_tls_get_addr.
pub fn constructor_coff_tls_get_addr<C: Context>(
    ctx: &mut C,
    arg0: ExternalName,
) -> Gpr {
    let v1 = C::temp_writable_gpr(ctx);
    let v2 = C::temp_writable_gpr(ctx);
    let v3 = MInst::CoffTlsGetAddr {
        symbol: arg0,
        dst: v1,
        tmp: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_gpr_to_gpr(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5719.
    return v5;
}

// Generated as internal constructor for term reg_to_xmm_mem.
pub fn constructor_reg_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5805.
    return v2.clone();
}

// Generated as internal constructor for term xmm_to_reg_mem.
pub fn constructor_xmm_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
) -> XmmMem {
    let v1 = C::xmm_new(ctx, arg0);
    let v2 = C::xmm_to_reg(ctx, v1);
    let v3 = RegMem::Reg {
        reg: v2,
    };
    let v4 = &C::reg_mem_to_xmm_mem(ctx, &v3);
    // Rule at src/isa/x64/inst.isle line 5808.
    return v4.clone();
}

// Generated as internal constructor for term writable_gpr_to_r_reg.
pub fn constructor_writable_gpr_to_r_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> Reg {
    let v1 = C::writable_gpr_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5812.
    return v2;
}

// Generated as internal constructor for term writable_gpr_to_gpr_mem.
pub fn constructor_writable_gpr_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> GprMem {
    let v1 = C::writable_gpr_to_gpr(ctx, arg0);
    let v2 = &C::gpr_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5815.
    return v2.clone();
}

// Generated as internal constructor for term writable_gpr_to_value_regs.
pub fn constructor_writable_gpr_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableGpr,
) -> ValueRegs {
    let v1 = constructor_writable_gpr_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5818.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_r_reg.
pub fn constructor_writable_xmm_to_r_reg<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> Reg {
    let v1 = C::writable_xmm_to_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5821.
    return v2;
}

// Generated as internal constructor for term writable_xmm_to_xmm_mem.
pub fn constructor_writable_xmm_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> XmmMem {
    let v1 = C::writable_xmm_to_xmm(ctx, arg0);
    let v2 = &C::xmm_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5824.
    return v2.clone();
}

// Generated as internal constructor for term writable_xmm_to_value_regs.
pub fn constructor_writable_xmm_to_value_regs<C: Context>(
    ctx: &mut C,
    arg0: WritableXmm,
) -> ValueRegs {
    let v1 = constructor_writable_xmm_to_r_reg(ctx, arg0);
    let v2 = C::value_reg(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5827.
    return v2;
}

// Generated as internal constructor for term synthetic_amode_to_gpr_mem.
pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> GprMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5837.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_gpr_mem.
pub fn constructor_amode_to_gpr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> GprMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_gpr_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5835.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem.
pub fn constructor_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMem {
    let v1 = &C::amode_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5840.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem.
pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMem {
    let v1 = &C::synthetic_amode_to_reg_mem(ctx, arg0);
    let v2 = &C::reg_mem_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5843.
    return v2.clone();
}

// Generated as internal constructor for term const_to_xmm_mem.
pub fn constructor_const_to_xmm_mem<C: Context>(
    ctx: &mut C,
    arg0: VCodeConstant,
) -> XmmMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = &constructor_synthetic_amode_to_xmm_mem(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5848.
    return v2.clone();
}

// Generated as internal constructor for term const_to_reg_mem.
pub fn constructor_const_to_reg_mem<C: Context>(
    ctx: &mut C,
    arg0: VCodeConstant,
) -> RegMem {
    let v1 = &C::const_to_synthetic_amode(ctx, arg0);
    let v2 = RegMem::Mem {
        addr: v1.clone(),
    };
    // Rule at src/isa/x64/inst.isle line 5850.
    return v2;
}

// Generated as internal constructor for term xmm_to_xmm_mem_aligned.
pub fn constructor_xmm_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> XmmMemAligned {
    let v1 = &C::xmm_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5853.
    return v2.clone();
}

// Generated as internal constructor for term amode_to_xmm_mem_aligned.
pub fn constructor_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
) -> XmmMemAligned {
    let v1 = &constructor_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5855.
    return v2.clone();
}

// Generated as internal constructor for term synthetic_amode_to_xmm_mem_aligned.
pub fn constructor_synthetic_amode_to_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: &SyntheticAmode,
) -> XmmMemAligned {
    let v1 = &constructor_synthetic_amode_to_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5857.
    return v2.clone();
}

// Generated as internal constructor for term put_in_xmm_mem_aligned.
pub fn constructor_put_in_xmm_mem_aligned<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> XmmMemAligned {
    let v1 = &C::put_in_xmm_mem(ctx, arg0);
    let v2 = &C::xmm_mem_to_xmm_mem_aligned(ctx, v1);
    // Rule at src/isa/x64/inst.isle line 5859.
    return v2.clone();
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg {
        src: arg1,
        dst: arg0,
    };
    let v3 = SideEffectNoResult::Inst {
        inst: v2,
    };
    // Rule at src/isa/x64/inst.isle line 5862.
    return v3;
}

// Generated as internal constructor for term x64_rbp.
pub fn constructor_x64_rbp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_rbp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5875.
    return v1;
}

// Generated as internal constructor for term x64_rsp.
pub fn constructor_x64_rsp<C: Context>(
    ctx: &mut C,
) -> Reg {
    let v0 = C::preg_rsp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/x64/inst.isle line 5879.
    return v1;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(
    ctx: &mut C,
    arg0: Inst,
) -> Option<InstOutput> {
    let v6 = &C::inst_data(ctx, arg0);
    match v6 {
        &InstructionData::AtomicCas {
            opcode: ref v2360,
            args: ref v2361,
            flags: v2362,
        } => {
            if let &Opcode::AtomicCas = v2360 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v2326 = C::use_cmpxchg16b(ctx);
                        if v2326 == true {
                            let v2363 = C::unpack_value_array_3(ctx, v2361);
                            let v2375 = C::put_in_regs(ctx, v2363.1);
                            let v2376 = C::put_in_regs(ctx, v2363.2);
                            let v2369 = C::zero_offset(ctx);
                            let v2370 = &constructor_to_amode(ctx, v2362, v2363.0, v2369);
                            let v2371 = &C::amode_to_synthetic_amode(ctx, v2370);
                            let v2377 = constructor_x64_cmpxchg16b(ctx, v2375, v2376, v2371);
                            let v2378 = C::output(ctx, v2377);
                            let v2379 = Some(v2378);
                            // Rule at src/isa/x64/lower.isle line 3404.
                            return v2379;
                        }
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v2318 = C::ty_int(ctx, v3);
                        if let Some(v2319) = v2318 {
                            let v2363 = C::unpack_value_array_3(ctx, v2361);
                            let v2367 = constructor_put_in_gpr(ctx, v2363.1);
                            let v2368 = constructor_put_in_gpr(ctx, v2363.2);
                            let v2369 = C::zero_offset(ctx);
                            let v2370 = &constructor_to_amode(ctx, v2362, v2363.0, v2369);
                            let v2371 = &C::amode_to_synthetic_amode(ctx, v2370);
                            let v2372 = constructor_x64_cmpxchg(ctx, v5, v2367, v2368, v2371);
                            let v2373 = constructor_output_gpr(ctx, v2372);
                            let v2374 = Some(v2373);
                            // Rule at src/isa/x64/lower.isle line 3401.
                            return v2374;
                        }
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2380,
            args: ref v2381,
            flags: v2382,
            op: ref v2383,
        } => {
            if let &Opcode::AtomicRmw = v2380 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v2326 = C::use_cmpxchg16b(ctx);
                        if v2326 == true {
                            let v70 = C::zero_offset(ctx);
                            let v2384 = C::unpack_value_array_2(ctx, v2381);
                            let v2424 = &constructor_to_amode(ctx, v2382, v2384.0, v70);
                            let v2425 = &C::amode_to_synthetic_amode(ctx, v2424);
                            let v2426 = C::put_in_regs(ctx, v2384.1);
                            let v2427 = constructor_x64_atomic_128_rmw_seq(ctx, v2383, v2425, v2426);
                            let v2428 = C::output(ctx, v2427);
                            let v2429 = Some(v2428);
                            // Rule at src/isa/x64/lower.isle line 3457.
                            return v2429;
                        }
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        match v2383 {
                            &AtomicRmwOp::Add => {
                                let v2405 = C::ty_int(ctx, v5);
                                if let Some(v2406) = v2405 {
                                    let v2407 = C::value_is_unused(ctx, v2);
                                    if v2407 == true {
                                        let v2408 = &C::raw_operand_size_of_type(ctx, v2406);
                                        let v2320 = C::zero_offset(ctx);
                                        let v2384 = C::unpack_value_array_2(ctx, v2381);
                                        let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                        let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                        let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                        let v2409 = constructor_x64_lock_add(ctx, v2408, v2389, v2390);
                                        let v2410 = constructor_output_reg(ctx, v2409);
                                        let v2411 = Some(v2410);
                                        // Rule at src/isa/x64/lower.isle line 3430.
                                        return v2411;
                                    }
                                }
                                let v2318 = C::ty_int(ctx, v3);
                                if let Some(v2319) = v2318 {
                                    let v2394 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2320 = C::zero_offset(ctx);
                                    let v2384 = C::unpack_value_array_2(ctx, v2381);
                                    let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                    let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                    let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                    let v2395 = constructor_x64_xadd(ctx, v2394, v2389, v2390);
                                    let v2396 = constructor_output_gpr(ctx, v2395);
                                    let v2397 = Some(v2396);
                                    // Rule at src/isa/x64/lower.isle line 3417.
                                    return v2397;
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v2405 = C::ty_int(ctx, v5);
                                if let Some(v2406) = v2405 {
                                    let v2407 = C::value_is_unused(ctx, v2);
                                    if v2407 == true {
                                        let v2408 = &C::raw_operand_size_of_type(ctx, v2406);
                                        let v2320 = C::zero_offset(ctx);
                                        let v2384 = C::unpack_value_array_2(ctx, v2381);
                                        let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                        let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                        let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                        let v2415 = constructor_x64_lock_and(ctx, v2408, v2389, v2390);
                                        let v2416 = constructor_output_reg(ctx, v2415);
                                        let v2417 = Some(v2416);
                                        // Rule at src/isa/x64/lower.isle line 3440.
                                        return v2417;
                                    }
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v2405 = C::ty_int(ctx, v5);
                                if let Some(v2406) = v2405 {
                                    let v2407 = C::value_is_unused(ctx, v2);
                                    if v2407 == true {
                                        let v2408 = &C::raw_operand_size_of_type(ctx, v2406);
                                        let v2320 = C::zero_offset(ctx);
                                        let v2384 = C::unpack_value_array_2(ctx, v2381);
                                        let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                        let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                        let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                        let v2418 = constructor_x64_lock_or(ctx, v2408, v2389, v2390);
                                        let v2419 = constructor_output_reg(ctx, v2418);
                                        let v2420 = Some(v2419);
                                        // Rule at src/isa/x64/lower.isle line 3445.
                                        return v2420;
                                    }
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v2405 = C::ty_int(ctx, v5);
                                if let Some(v2406) = v2405 {
                                    let v2407 = C::value_is_unused(ctx, v2);
                                    if v2407 == true {
                                        let v2408 = &C::raw_operand_size_of_type(ctx, v2406);
                                        let v2320 = C::zero_offset(ctx);
                                        let v2384 = C::unpack_value_array_2(ctx, v2381);
                                        let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                        let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                        let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                        let v2412 = constructor_x64_lock_sub(ctx, v2408, v2389, v2390);
                                        let v2413 = constructor_output_reg(ctx, v2412);
                                        let v2414 = Some(v2413);
                                        // Rule at src/isa/x64/lower.isle line 3435.
                                        return v2414;
                                    }
                                }
                                let v2318 = C::ty_int(ctx, v3);
                                if let Some(v2319) = v2318 {
                                    let v2394 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2320 = C::zero_offset(ctx);
                                    let v2384 = C::unpack_value_array_2(ctx, v2381);
                                    let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                    let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                    let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                    let v2398 = constructor_x64_neg(ctx, v5, v2390);
                                    let v2399 = constructor_x64_xadd(ctx, v2394, v2389, v2398);
                                    let v2400 = constructor_output_gpr(ctx, v2399);
                                    let v2401 = Some(v2400);
                                    // Rule at src/isa/x64/lower.isle line 3420.
                                    return v2401;
                                }
                            }
                            &AtomicRmwOp::Xchg => {
                                let v2318 = C::ty_int(ctx, v3);
                                if let Some(v2319) = v2318 {
                                    let v2394 = &C::raw_operand_size_of_type(ctx, v5);
                                    let v2320 = C::zero_offset(ctx);
                                    let v2384 = C::unpack_value_array_2(ctx, v2381);
                                    let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                    let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                    let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                    let v2402 = constructor_x64_xchg(ctx, v2394, v2389, v2390);
                                    let v2403 = constructor_output_gpr(ctx, v2402);
                                    let v2404 = Some(v2403);
                                    // Rule at src/isa/x64/lower.isle line 3424.
                                    return v2404;
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v2405 = C::ty_int(ctx, v5);
                                if let Some(v2406) = v2405 {
                                    let v2407 = C::value_is_unused(ctx, v2);
                                    if v2407 == true {
                                        let v2408 = &C::raw_operand_size_of_type(ctx, v2406);
                                        let v2320 = C::zero_offset(ctx);
                                        let v2384 = C::unpack_value_array_2(ctx, v2381);
                                        let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                                        let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                                        let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                                        let v2421 = constructor_x64_lock_xor(ctx, v2408, v2389, v2390);
                                        let v2422 = constructor_output_reg(ctx, v2421);
                                        let v2423 = Some(v2422);
                                        // Rule at src/isa/x64/lower.isle line 3450.
                                        return v2423;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v2318 = C::ty_int(ctx, v3);
                        if let Some(v2319) = v2318 {
                            let v2387 = &constructor_atomic_rmw_seq_op(ctx, v2383);
                            let v2320 = C::zero_offset(ctx);
                            let v2384 = C::unpack_value_array_2(ctx, v2381);
                            let v2388 = &constructor_to_amode(ctx, v2382, v2384.0, v2320);
                            let v2389 = &C::amode_to_synthetic_amode(ctx, v2388);
                            let v2390 = constructor_put_in_gpr(ctx, v2384.1);
                            let v2391 = constructor_x64_atomic_rmw_seq(ctx, v5, v2387, v2389, v2390);
                            let v2392 = constructor_output_gpr(ctx, v2391);
                            let v2393 = Some(v2392);
                            // Rule at src/isa/x64/lower.isle line 3412.
                            return v2393;
                        }
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v57,
            args: ref v58,
        } => {
            match v57 {
                &Opcode::Swizzle => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                    let v3170 = C::emit_u128_le_const(ctx, 0x70707070707070707070707070707070_u128);
                    let v3171 = &constructor_const_to_xmm_mem(ctx, v3170);
                    let v3172 = constructor_x64_paddusb(ctx, v1756, v3171);
                    let v514 = constructor_put_in_xmm(ctx, v59.0);
                    let v3173 = C::xmm_to_reg(ctx, v3172);
                    let v3174 = &constructor_xmm_to_reg_mem(ctx, v3173);
                    let v3175 = &C::xmm_mem_to_reg_mem(ctx, v3174);
                    let v3176 = constructor_lower_pshufb(ctx, v514, v3175);
                    let v3177 = constructor_output_xmm(ctx, v3176);
                    let v3178 = Some(v3177);
                    // Rule at src/isa/x64/lower.isle line 4627.
                    return v3178;
                }
                &Opcode::X86Pshufb => {
                    let v750 = C::use_ssse3(ctx);
                    if v750 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                        let v3179 = constructor_x64_pshufb(ctx, v93, v94);
                        let v3180 = constructor_output_xmm(ctx, v3179);
                        let v3181 = Some(v3180);
                        // Rule at src/isa/x64/lower.isle line 4633.
                        return v3181;
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1135 = C::ty_vec128(ctx, v3);
                        if let Some(v1136) = v1135 {
                            let v1140 = constructor_has_pmins(ctx, v1136);
                            if v1140 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1141 = constructor_x64_pmins(ctx, v1136, v93, v94);
                                let v1142 = constructor_output_xmm(ctx, v1141);
                                let v1143 = Some(v1142);
                                // Rule at src/isa/x64/lower.isle line 1799.
                                return v1143;
                            }
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v483 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1144 = constructor_x64_pcmpgt(ctx, v1136, v660, v483);
                            let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1145 = constructor_x64_pand(ctx, v1144, v485);
                            let v665 = &C::xmm_to_xmm_mem(ctx, v660);
                            let v1146 = constructor_x64_pandn(ctx, v1144, v665);
                            let v1147 = &C::xmm_to_xmm_mem(ctx, v1146);
                            let v1148 = constructor_x64_por(ctx, v1145, v1147);
                            let v1149 = constructor_output_xmm(ctx, v1148);
                            let v1150 = Some(v1149);
                            // Rule at src/isa/x64/lower.isle line 1803.
                            return v1150;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1128 = constructor_cmp_and_choose(ctx, v5, &CC::L, v59.0, v59.1);
                            let v1129 = C::output(ctx, v1128);
                            let v1130 = Some(v1129);
                            // Rule at src/isa/x64/lower.isle line 1749.
                            return v1130;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1135 = C::ty_vec128(ctx, v3);
                        if let Some(v1136) = v1135 {
                            let v1175 = constructor_has_pminu(ctx, v1136);
                            if v1175 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1176 = constructor_x64_pminu(ctx, v1136, v93, v94);
                                let v1177 = constructor_output_xmm(ctx, v1176);
                                let v1178 = Some(v1177);
                                // Rule at src/isa/x64/lower.isle line 1851.
                                return v1178;
                            }
                        }
                        if v3 == I16X8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v234 = constructor_x64_psubusw(ctx, v93, v94);
                            let v1179 = &C::xmm_to_xmm_mem(ctx, v234);
                            let v1180 = constructor_x64_psubw(ctx, v93, v1179);
                            let v1181 = constructor_output_xmm(ctx, v1180);
                            let v1182 = Some(v1181);
                            // Rule at src/isa/x64/lower.isle line 1857.
                            return v1182;
                        }
                        if let Some(v1136) = v1135 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v1160 = constructor_flip_high_bit_mask(ctx, v1136);
                            let v1161 = &C::xmm_to_xmm_mem(ctx, v1160);
                            let v1162 = constructor_x64_pxor(ctx, v93, v1161);
                            let v1163 = &C::xmm_to_xmm_mem(ctx, v1160);
                            let v1164 = constructor_x64_pxor(ctx, v660, v1163);
                            let v1183 = &C::xmm_to_xmm_mem(ctx, v1162);
                            let v1184 = constructor_x64_pcmpgt(ctx, v1136, v1164, v1183);
                            let v1167 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1185 = constructor_x64_pand(ctx, v1184, v1167);
                            let v1169 = &C::xmm_to_xmm_mem(ctx, v660);
                            let v1186 = constructor_x64_pandn(ctx, v1184, v1169);
                            let v1187 = &C::xmm_to_xmm_mem(ctx, v1186);
                            let v1188 = constructor_x64_por(ctx, v1185, v1187);
                            let v1189 = constructor_output_xmm(ctx, v1188);
                            let v1190 = Some(v1189);
                            // Rule at src/isa/x64/lower.isle line 1862.
                            return v1190;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1120 = constructor_cmp_and_choose(ctx, v5, &CC::B, v59.0, v59.1);
                            let v1121 = C::output(ctx, v1120);
                            let v1122 = Some(v1121);
                            // Rule at src/isa/x64/lower.isle line 1743.
                            return v1122;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1135 = C::ty_vec128(ctx, v3);
                        if let Some(v1136) = v1135 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v1137 = constructor_lower_vec_smax(ctx, v1136, v93, v660);
                            let v1138 = constructor_output_xmm(ctx, v1137);
                            let v1139 = Some(v1138);
                            // Rule at src/isa/x64/lower.isle line 1779.
                            return v1139;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1132 = constructor_cmp_and_choose(ctx, v5, &CC::NL, v59.0, v59.1);
                            let v1133 = C::output(ctx, v1132);
                            let v1134 = Some(v1133);
                            // Rule at src/isa/x64/lower.isle line 1752.
                            return v1134;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1135 = C::ty_vec128(ctx, v3);
                        if let Some(v1136) = v1135 {
                            let v1151 = constructor_has_pmaxu(ctx, v1136);
                            if v1151 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1152 = constructor_x64_pmaxu(ctx, v1136, v93, v94);
                                let v1153 = constructor_output_xmm(ctx, v1152);
                                let v1154 = Some(v1153);
                                // Rule at src/isa/x64/lower.isle line 1815.
                                return v1154;
                            }
                        }
                        if v3 == I16X8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v483 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1155 = constructor_x64_psubusw(ctx, v660, v483);
                            let v1156 = &C::xmm_to_xmm_mem(ctx, v1155);
                            let v1157 = constructor_x64_paddw(ctx, v93, v1156);
                            let v1158 = constructor_output_xmm(ctx, v1157);
                            let v1159 = Some(v1158);
                            // Rule at src/isa/x64/lower.isle line 1821.
                            return v1159;
                        }
                        if let Some(v1136) = v1135 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v1160 = constructor_flip_high_bit_mask(ctx, v1136);
                            let v1161 = &C::xmm_to_xmm_mem(ctx, v1160);
                            let v1162 = constructor_x64_pxor(ctx, v93, v1161);
                            let v1163 = &C::xmm_to_xmm_mem(ctx, v1160);
                            let v1164 = constructor_x64_pxor(ctx, v660, v1163);
                            let v1165 = &C::xmm_to_xmm_mem(ctx, v1164);
                            let v1166 = constructor_x64_pcmpgt(ctx, v1136, v1162, v1165);
                            let v1167 = &C::xmm_to_xmm_mem(ctx, v93);
                            let v1168 = constructor_x64_pand(ctx, v1166, v1167);
                            let v1169 = &C::xmm_to_xmm_mem(ctx, v660);
                            let v1170 = constructor_x64_pandn(ctx, v1166, v1169);
                            let v1171 = &C::xmm_to_xmm_mem(ctx, v1170);
                            let v1172 = constructor_x64_por(ctx, v1168, v1171);
                            let v1173 = constructor_output_xmm(ctx, v1172);
                            let v1174 = Some(v1173);
                            // Rule at src/isa/x64/lower.isle line 1828.
                            return v1174;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v1124 = constructor_cmp_and_choose(ctx, v5, &CC::NB, v59.0, v59.1);
                            let v1125 = C::output(ctx, v1124);
                            let v1126 = Some(v1125);
                            // Rule at src/isa/x64/lower.isle line 1746.
                            return v1126;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v599 = constructor_x64_pavgb(ctx, v93, v94);
                                        let v600 = constructor_output_xmm(ctx, v599);
                                        let v601 = Some(v600);
                                        // Rule at src/isa/x64/lower.isle line 1006.
                                        return v601;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v602 = constructor_x64_pavgw(ctx, v93, v94);
                                        let v603 = constructor_output_xmm(ctx, v602);
                                        let v604 = Some(v603);
                                        // Rule at src/isa/x64/lower.isle line 1010.
                                        return v604;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v195 = constructor_x64_paddusb(ctx, v93, v94);
                                        let v196 = constructor_output_xmm(ctx, v195);
                                        let v197 = Some(v196);
                                        // Rule at src/isa/x64/lower.isle line 217.
                                        return v197;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v198 = constructor_x64_paddusw(ctx, v93, v94);
                                        let v199 = constructor_output_xmm(ctx, v198);
                                        let v200 = Some(v199);
                                        // Rule at src/isa/x64/lower.isle line 221.
                                        return v200;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v189 = constructor_x64_paddsb(ctx, v93, v94);
                                        let v190 = constructor_output_xmm(ctx, v189);
                                        let v191 = Some(v190);
                                        // Rule at src/isa/x64/lower.isle line 207.
                                        return v191;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v192 = constructor_x64_paddsw(ctx, v93, v94);
                                        let v193 = constructor_output_xmm(ctx, v192);
                                        let v194 = Some(v193);
                                        // Rule at src/isa/x64/lower.isle line 211.
                                        return v194;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v231 = constructor_x64_psubusb(ctx, v93, v94);
                                        let v232 = constructor_output_xmm(ctx, v231);
                                        let v233 = Some(v232);
                                        // Rule at src/isa/x64/lower.isle line 290.
                                        return v233;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v234 = constructor_x64_psubusw(ctx, v93, v94);
                                        let v235 = constructor_output_xmm(ctx, v234);
                                        let v236 = Some(v235);
                                        // Rule at src/isa/x64/lower.isle line 294.
                                        return v236;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v225 = constructor_x64_psubsb(ctx, v93, v94);
                                        let v226 = constructor_output_xmm(ctx, v225);
                                        let v227 = Some(v226);
                                        // Rule at src/isa/x64/lower.isle line 280.
                                        return v227;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v228 = constructor_x64_psubsw(ctx, v93, v94);
                                        let v229 = constructor_output_xmm(ctx, v228);
                                        let v230 = Some(v229);
                                        // Rule at src/isa/x64/lower.isle line 284.
                                        return v230;
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v107 = C::put_in_regs(ctx, v59.0);
                                            let v128 = C::put_in_regs(ctx, v59.0);
                                            let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                            let v130 = C::put_in_regs(ctx, v59.0);
                                            let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                            let v132 = &constructor_put_in_gpr_mem_imm(ctx, v125.0);
                                            let v133 = &constructor_put_in_gpr_mem_imm(ctx, v125.1);
                                            let v134 = constructor_iadd128(ctx, v129, v131, v132, v133);
                                            let v135 = C::output(ctx, v134);
                                            let v136 = Some(v135);
                                            // Rule at src/isa/x64/lower.isle line 106.
                                            return v136;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        if let &Opcode::Uextend = v137 {
                                            let v139 = C::value_type(ctx, v138);
                                            if v139 == I64 {
                                                let v107 = C::put_in_regs(ctx, v59.0);
                                                let v128 = C::put_in_regs(ctx, v59.0);
                                                let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                                let v130 = C::put_in_regs(ctx, v59.0);
                                                let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                                let v140 = &constructor_put_in_gpr_mem_imm(ctx, v138);
                                                let v142 = RegMemImm::Imm {
                                                    simm32: 0x0_u32,
                                                };
                                                let v143 = &C::gpr_mem_imm_new(ctx, &v142);
                                                let v144 = constructor_iadd128(ctx, v129, v131, v140, v143);
                                                let v145 = C::output(ctx, v144);
                                                let v146 = Some(v145);
                                                // Rule at src/isa/x64/lower.isle line 109.
                                                return v146;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v114 = &C::gpr_to_gpr_mem_imm(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v116 = &C::gpr_to_gpr_mem_imm(ctx, v115);
                            let v117 = constructor_iadd128(ctx, v110, v112, v114, v116);
                            let v118 = C::output(ctx, v117);
                            let v119 = Some(v118);
                            // Rule at src/isa/x64/lower.isle line 97.
                            return v119;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v95 = constructor_x64_paddb(ctx, v93, v94);
                                        let v96 = constructor_output_xmm(ctx, v95);
                                        let v97 = Some(v96);
                                        // Rule at src/isa/x64/lower.isle line 80.
                                        return v97;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v98 = constructor_x64_paddw(ctx, v93, v94);
                                        let v99 = constructor_output_xmm(ctx, v98);
                                        let v100 = Some(v99);
                                        // Rule at src/isa/x64/lower.isle line 84.
                                        return v100;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v101 = constructor_x64_paddd(ctx, v93, v94);
                                        let v102 = constructor_output_xmm(ctx, v101);
                                        let v103 = Some(v102);
                                        // Rule at src/isa/x64/lower.isle line 88.
                                        return v103;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v104 = constructor_x64_paddq(ctx, v93, v94);
                                        let v105 = constructor_output_xmm(ctx, v104);
                                        let v106 = Some(v105);
                                        // Rule at src/isa/x64/lower.isle line 92.
                                        return v106;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v86 = constructor_x64_add(ctx, v5, v84, v85);
                                let v87 = constructor_output_gpr(ctx, v86);
                                let v88 = Some(v87);
                                // Rule at src/isa/x64/lower.isle line 74.
                                return v88;
                            }
                            let v76 = &C::sinkable_load(ctx, v59.1);
                            if let Some(v77) = v76 {
                                let v62 = constructor_put_in_gpr(ctx, v59.0);
                                let v78 = &constructor_sink_load_to_gpr_mem_imm(ctx, v77);
                                let v79 = constructor_x64_add(ctx, v5, v62, v78);
                                let v80 = constructor_output_gpr(ctx, v79);
                                let v81 = Some(v80);
                                // Rule at src/isa/x64/lower.isle line 71.
                                return v81;
                            }
                        }
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v70 = C::zero_offset(ctx);
                            let v69 = C::mem_flags_trusted(ctx);
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v71 = &constructor_to_amode_add(ctx, v69, v59.0, v59.1, v70);
                            let v72 = &C::amode_to_synthetic_amode(ctx, v71);
                            let v73 = constructor_x64_lea(ctx, v68, v72);
                            let v74 = constructor_output_gpr(ctx, v73);
                            let v75 = Some(v74);
                            // Rule at src/isa/x64/lower.isle line 65.
                            return v75;
                        }
                        let v55 = C::fits_in_16(ctx, v3);
                        if let Some(v56) = v55 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v64 = constructor_x64_add(ctx, v56, v62, v63);
                            let v65 = constructor_output_gpr(ctx, v64);
                            let v66 = Some(v65);
                            // Rule at src/isa/x64/lower.isle line 54.
                            return v66;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v107 = C::put_in_regs(ctx, v59.0);
                                            let v128 = C::put_in_regs(ctx, v59.0);
                                            let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                            let v130 = C::put_in_regs(ctx, v59.0);
                                            let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                            let v125 = C::unpack_value_array_2(ctx, v124);
                                            let v132 = &constructor_put_in_gpr_mem_imm(ctx, v125.0);
                                            let v133 = &constructor_put_in_gpr_mem_imm(ctx, v125.1);
                                            let v219 = constructor_isub128(ctx, v129, v131, v132, v133);
                                            let v220 = C::output(ctx, v219);
                                            let v221 = Some(v220);
                                            // Rule at src/isa/x64/lower.isle line 262.
                                            return v221;
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        if let &Opcode::Uextend = v137 {
                                            let v139 = C::value_type(ctx, v138);
                                            if v139 == I64 {
                                                let v107 = C::put_in_regs(ctx, v59.0);
                                                let v128 = C::put_in_regs(ctx, v59.0);
                                                let v129 = constructor_value_regs_get_gpr(ctx, v128, 0x0_usize);
                                                let v130 = C::put_in_regs(ctx, v59.0);
                                                let v131 = constructor_value_regs_get_gpr(ctx, v130, 0x1_usize);
                                                let v140 = &constructor_put_in_gpr_mem_imm(ctx, v138);
                                                let v142 = RegMemImm::Imm {
                                                    simm32: 0x0_u32,
                                                };
                                                let v143 = &C::gpr_mem_imm_new(ctx, &v142);
                                                let v222 = constructor_isub128(ctx, v129, v131, v140, v143);
                                                let v223 = C::output(ctx, v222);
                                                let v224 = Some(v223);
                                                // Rule at src/isa/x64/lower.isle line 265.
                                                return v224;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v114 = &C::gpr_to_gpr_mem_imm(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v116 = &C::gpr_to_gpr_mem_imm(ctx, v115);
                            let v216 = constructor_isub128(ctx, v110, v112, v114, v116);
                            let v217 = C::output(ctx, v216);
                            let v218 = Some(v217);
                            // Rule at src/isa/x64/lower.isle line 253.
                            return v218;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x8_u32 => {
                                    if v90.1 == 0x10_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v204 = constructor_x64_psubb(ctx, v93, v94);
                                        let v205 = constructor_output_xmm(ctx, v204);
                                        let v206 = Some(v205);
                                        // Rule at src/isa/x64/lower.isle line 236.
                                        return v206;
                                    }
                                }
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v207 = constructor_x64_psubw(ctx, v93, v94);
                                        let v208 = constructor_output_xmm(ctx, v207);
                                        let v209 = Some(v208);
                                        // Rule at src/isa/x64/lower.isle line 240.
                                        return v209;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v210 = constructor_x64_psubd(ctx, v93, v94);
                                        let v211 = constructor_output_xmm(ctx, v210);
                                        let v212 = Some(v211);
                                        // Rule at src/isa/x64/lower.isle line 244.
                                        return v212;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v213 = constructor_x64_psubq(ctx, v93, v94);
                                        let v214 = constructor_output_xmm(ctx, v213);
                                        let v215 = Some(v214);
                                        // Rule at src/isa/x64/lower.isle line 248.
                                        return v215;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v201 = constructor_x64_sub(ctx, v5, v62, v63);
                            let v202 = constructor_output_gpr(ctx, v201);
                            let v203 = Some(v202);
                            // Rule at src/isa/x64/lower.isle line 230.
                            return v203;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data(ctx, v121);
                                match v122 {
                                    &InstructionData::Binary {
                                        opcode: ref v123,
                                        args: ref v124,
                                    } => {
                                        if let &Opcode::Iconcat = v123 {
                                            let v266 = C::def_inst(ctx, v59.0);
                                            if let Some(v267) = v266 {
                                                let v268 = &C::inst_data(ctx, v267);
                                                if let &InstructionData::Binary {
                                                    opcode: ref v350,
                                                    args: ref v351,
                                                } = v268 {
                                                    if let &Opcode::Iconcat = v350 {
                                                        let v352 = C::unpack_value_array_2(ctx, v351);
                                                        let v375 = constructor_put_in_gpr(ctx, v352.0);
                                                        let v640 = constructor_put_in_gpr(ctx, v352.1);
                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                        let v641 = &constructor_put_in_gpr_mem(ctx, v125.0);
                                                        let v642 = &constructor_put_in_gpr_mem(ctx, v125.1);
                                                        let v643 = constructor_imul128(ctx, v375, v640, v641, v642);
                                                        let v644 = C::output(ctx, v643);
                                                        let v645 = Some(v644);
                                                        // Rule at src/isa/x64/lower.isle line 1054.
                                                        return v645;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } => {
                                        match v137 {
                                            &Opcode::Uextend => {
                                                let v139 = C::value_type(ctx, v138);
                                                if v139 == I64 {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::Uextend = v269 {
                                                                let v646 = C::value_type(ctx, v270);
                                                                if v646 == I64 {
                                                                    let v281 = constructor_put_in_gpr(ctx, v270);
                                                                    let v628 = &constructor_put_in_gpr_mem(ctx, v138);
                                                                    let v172 = false;
                                                                    let v647 = constructor_x64_mul(ctx, I64, v172, v281, v628);
                                                                    let v648 = C::output(ctx, v647);
                                                                    let v649 = Some(v648);
                                                                    // Rule at src/isa/x64/lower.isle line 1096.
                                                                    return v649;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::Sextend => {
                                                let v139 = C::value_type(ctx, v138);
                                                if v139 == I64 {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::Sextend = v269 {
                                                                let v646 = C::value_type(ctx, v270);
                                                                if v646 == I64 {
                                                                    let v281 = constructor_put_in_gpr(ctx, v270);
                                                                    let v628 = &constructor_put_in_gpr_mem(ctx, v138);
                                                                    let v182 = true;
                                                                    let v650 = constructor_x64_mul(ctx, I64, v182, v281, v628);
                                                                    let v651 = C::output(ctx, v650);
                                                                    let v652 = Some(v651);
                                                                    // Rule at src/isa/x64/lower.isle line 1099.
                                                                    return v652;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            if v90.0 == 0x40_u32 {
                                if v90.1 == 0x2_u32 {
                                    let v502 = C::use_avx512vl(ctx);
                                    if v502 == true {
                                        let v678 = C::use_avx512dq(ctx);
                                        if v678 == true {
                                            let v59 = C::unpack_value_array_2(ctx, v58);
                                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                            let v679 = constructor_x64_vpmullq(ctx, v93, v94);
                                            let v680 = constructor_output_xmm(ctx, v679);
                                            let v681 = Some(v680);
                                            // Rule at src/isa/x64/lower.isle line 1130.
                                            return v681;
                                        }
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v110 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v112 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v113 = constructor_value_regs_get_gpr(ctx, v108, 0x0_usize);
                            let v635 = &C::gpr_to_gpr_mem(ctx, v113);
                            let v115 = constructor_value_regs_get_gpr(ctx, v108, 0x1_usize);
                            let v636 = &C::gpr_to_gpr_mem(ctx, v115);
                            let v637 = constructor_imul128(ctx, v110, v112, v635, v636);
                            let v638 = C::output(ctx, v637);
                            let v639 = Some(v638);
                            // Rule at src/isa/x64/lower.isle line 1045.
                            return v639;
                        }
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x10_u32 => {
                                    if v90.1 == 0x8_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v653 = constructor_x64_pmullw(ctx, v93, v94);
                                        let v654 = constructor_output_xmm(ctx, v653);
                                        let v655 = Some(v654);
                                        // Rule at src/isa/x64/lower.isle line 1107.
                                        return v655;
                                    }
                                }
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data(ctx, v121);
                                            if let &InstructionData::Unary {
                                                opcode: ref v137,
                                                arg: v138,
                                            } = v122 {
                                                match v137 {
                                                    &Opcode::SwidenLow => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::SwidenLow = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x10_u32 {
                                                                            if v701.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x10_u32 {
                                                                                        if v705.1 == 0x8_u32 {
                                                                                            let v271 = constructor_put_in_xmm(ctx, v270);
                                                                                            let v708 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v709 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v710 = constructor_x64_pmullw(ctx, v271, v709);
                                                                                            let v711 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v712 = constructor_x64_pmulhw(ctx, v271, v711);
                                                                                            let v713 = &C::xmm_to_xmm_mem(ctx, v712);
                                                                                            let v726 = constructor_x64_punpcklwd(ctx, v710, v713);
                                                                                            let v727 = constructor_output_xmm(ctx, v726);
                                                                                            let v728 = Some(v727);
                                                                                            // Rule at src/isa/x64/lower.isle line 1200.
                                                                                            return v728;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::SwidenHigh = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x10_u32 {
                                                                            if v701.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x10_u32 {
                                                                                        if v705.1 == 0x8_u32 {
                                                                                            let v271 = constructor_put_in_xmm(ctx, v270);
                                                                                            let v708 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v709 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v710 = constructor_x64_pmullw(ctx, v271, v709);
                                                                                            let v711 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v712 = constructor_x64_pmulhw(ctx, v271, v711);
                                                                                            let v713 = &C::xmm_to_xmm_mem(ctx, v712);
                                                                                            let v714 = constructor_x64_punpckhwd(ctx, v710, v713);
                                                                                            let v715 = constructor_output_xmm(ctx, v714);
                                                                                            let v716 = Some(v715);
                                                                                            // Rule at src/isa/x64/lower.isle line 1177.
                                                                                            return v716;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::UwidenLow = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x10_u32 {
                                                                            if v701.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x10_u32 {
                                                                                        if v705.1 == 0x8_u32 {
                                                                                            let v271 = constructor_put_in_xmm(ctx, v270);
                                                                                            let v708 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v709 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v710 = constructor_x64_pmullw(ctx, v271, v709);
                                                                                            let v711 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v736 = constructor_x64_pmulhuw(ctx, v271, v711);
                                                                                            let v737 = &C::xmm_to_xmm_mem(ctx, v736);
                                                                                            let v744 = constructor_x64_punpcklwd(ctx, v710, v737);
                                                                                            let v745 = constructor_output_xmm(ctx, v744);
                                                                                            let v746 = Some(v745);
                                                                                            // Rule at src/isa/x64/lower.isle line 1245.
                                                                                            return v746;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::UwidenHigh = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x10_u32 {
                                                                            if v701.1 == 0x8_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x10_u32 {
                                                                                        if v705.1 == 0x8_u32 {
                                                                                            let v271 = constructor_put_in_xmm(ctx, v270);
                                                                                            let v708 = constructor_put_in_xmm(ctx, v138);
                                                                                            let v709 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v710 = constructor_x64_pmullw(ctx, v271, v709);
                                                                                            let v711 = &C::xmm_to_xmm_mem(ctx, v708);
                                                                                            let v736 = constructor_x64_pmulhuw(ctx, v271, v711);
                                                                                            let v737 = &C::xmm_to_xmm_mem(ctx, v736);
                                                                                            let v738 = constructor_x64_punpckhwd(ctx, v710, v737);
                                                                                            let v739 = constructor_output_xmm(ctx, v738);
                                                                                            let v740 = Some(v739);
                                                                                            // Rule at src/isa/x64/lower.isle line 1223.
                                                                                            return v740;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v656 = C::use_sse41(ctx);
                                        if v656 == true {
                                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                            let v657 = constructor_x64_pmulld(ctx, v93, v94);
                                            let v658 = constructor_output_xmm(ctx, v657);
                                            let v659 = Some(v658);
                                            // Rule at src/isa/x64/lower.isle line 1110.
                                            return v659;
                                        }
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v660 = constructor_put_in_xmm(ctx, v59.1);
                                        let v483 = &C::xmm_to_xmm_mem(ctx, v93);
                                        let v662 = constructor_x64_pshufd(ctx, v483, 0x31_u8);
                                        let v663 = &C::xmm_to_xmm_mem(ctx, v660);
                                        let v664 = constructor_x64_pshufd(ctx, v663, 0x31_u8);
                                        let v665 = &C::xmm_to_xmm_mem(ctx, v660);
                                        let v666 = constructor_x64_pmuludq(ctx, v93, v665);
                                        let v667 = &C::xmm_to_xmm_mem(ctx, v666);
                                        let v669 = constructor_x64_pshufd(ctx, v667, 0x8_u8);
                                        let v670 = &C::xmm_to_xmm_mem(ctx, v664);
                                        let v671 = constructor_x64_pmuludq(ctx, v662, v670);
                                        let v672 = &C::xmm_to_xmm_mem(ctx, v671);
                                        let v673 = constructor_x64_pshufd(ctx, v672, 0x8_u8);
                                        let v674 = &C::xmm_to_xmm_mem(ctx, v673);
                                        let v675 = constructor_x64_punpckldq(ctx, v669, v674);
                                        let v676 = constructor_output_xmm(ctx, v675);
                                        let v677 = Some(v676);
                                        // Rule at src/isa/x64/lower.isle line 1117.
                                        return v677;
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data(ctx, v121);
                                            if let &InstructionData::Unary {
                                                opcode: ref v137,
                                                arg: v138,
                                            } = v122 {
                                                match v137 {
                                                    &Opcode::SwidenLow => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::SwidenLow = v269 {
                                                                    let v656 = C::use_sse41(ctx);
                                                                    if v656 == true {
                                                                        let v646 = C::value_type(ctx, v270);
                                                                        let v700 = C::multi_lane(ctx, v646);
                                                                        if let Some(v701) = v700 {
                                                                            if v701.0 == 0x20_u32 {
                                                                                if v701.1 == 0x4_u32 {
                                                                                    let v139 = C::value_type(ctx, v138);
                                                                                    let v704 = C::multi_lane(ctx, v139);
                                                                                    if let Some(v705) = v704 {
                                                                                        if v705.0 == 0x20_u32 {
                                                                                            if v705.1 == 0x4_u32 {
                                                                                                let v717 = &C::put_in_xmm_mem(ctx, v270);
                                                                                                let v730 = constructor_x64_pshufd(ctx, v717, 0x50_u8);
                                                                                                let v720 = &C::put_in_xmm_mem(ctx, v138);
                                                                                                let v731 = constructor_x64_pshufd(ctx, v720, 0x50_u8);
                                                                                                let v732 = &C::xmm_to_xmm_mem(ctx, v731);
                                                                                                let v733 = constructor_x64_pmuldq(ctx, v730, v732);
                                                                                                let v734 = constructor_output_xmm(ctx, v733);
                                                                                                let v735 = Some(v734);
                                                                                                // Rule at src/isa/x64/lower.isle line 1212.
                                                                                                return v735;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::SwidenHigh => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::SwidenHigh = v269 {
                                                                    let v656 = C::use_sse41(ctx);
                                                                    if v656 == true {
                                                                        let v646 = C::value_type(ctx, v270);
                                                                        let v700 = C::multi_lane(ctx, v646);
                                                                        if let Some(v701) = v700 {
                                                                            if v701.0 == 0x20_u32 {
                                                                                if v701.1 == 0x4_u32 {
                                                                                    let v139 = C::value_type(ctx, v138);
                                                                                    let v704 = C::multi_lane(ctx, v139);
                                                                                    if let Some(v705) = v704 {
                                                                                        if v705.0 == 0x20_u32 {
                                                                                            if v705.1 == 0x4_u32 {
                                                                                                let v717 = &C::put_in_xmm_mem(ctx, v270);
                                                                                                let v719 = constructor_x64_pshufd(ctx, v717, 0xfa_u8);
                                                                                                let v720 = &C::put_in_xmm_mem(ctx, v138);
                                                                                                let v721 = constructor_x64_pshufd(ctx, v720, 0xfa_u8);
                                                                                                let v722 = &C::xmm_to_xmm_mem(ctx, v721);
                                                                                                let v723 = constructor_x64_pmuldq(ctx, v719, v722);
                                                                                                let v724 = constructor_output_xmm(ctx, v723);
                                                                                                let v725 = Some(v724);
                                                                                                // Rule at src/isa/x64/lower.isle line 1189.
                                                                                                return v725;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenLow => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::UwidenLow = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x20_u32 {
                                                                            if v701.1 == 0x4_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x20_u32 {
                                                                                        if v705.1 == 0x4_u32 {
                                                                                            let v717 = &C::put_in_xmm_mem(ctx, v270);
                                                                                            let v730 = constructor_x64_pshufd(ctx, v717, 0x50_u8);
                                                                                            let v720 = &C::put_in_xmm_mem(ctx, v138);
                                                                                            let v731 = constructor_x64_pshufd(ctx, v720, 0x50_u8);
                                                                                            let v732 = &C::xmm_to_xmm_mem(ctx, v731);
                                                                                            let v747 = constructor_x64_pmuludq(ctx, v730, v732);
                                                                                            let v748 = constructor_output_xmm(ctx, v747);
                                                                                            let v749 = Some(v748);
                                                                                            // Rule at src/isa/x64/lower.isle line 1257.
                                                                                            return v749;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &Opcode::UwidenHigh => {
                                                        let v266 = C::def_inst(ctx, v59.0);
                                                        if let Some(v267) = v266 {
                                                            let v268 = &C::inst_data(ctx, v267);
                                                            if let &InstructionData::Unary {
                                                                opcode: ref v269,
                                                                arg: v270,
                                                            } = v268 {
                                                                if let &Opcode::UwidenHigh = v269 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    let v700 = C::multi_lane(ctx, v646);
                                                                    if let Some(v701) = v700 {
                                                                        if v701.0 == 0x20_u32 {
                                                                            if v701.1 == 0x4_u32 {
                                                                                let v139 = C::value_type(ctx, v138);
                                                                                let v704 = C::multi_lane(ctx, v139);
                                                                                if let Some(v705) = v704 {
                                                                                    if v705.0 == 0x20_u32 {
                                                                                        if v705.1 == 0x4_u32 {
                                                                                            let v717 = &C::put_in_xmm_mem(ctx, v270);
                                                                                            let v719 = constructor_x64_pshufd(ctx, v717, 0xfa_u8);
                                                                                            let v720 = &C::put_in_xmm_mem(ctx, v138);
                                                                                            let v721 = constructor_x64_pshufd(ctx, v720, 0xfa_u8);
                                                                                            let v722 = &C::xmm_to_xmm_mem(ctx, v721);
                                                                                            let v741 = constructor_x64_pmuludq(ctx, v719, v722);
                                                                                            let v742 = constructor_output_xmm(ctx, v741);
                                                                                            let v743 = Some(v742);
                                                                                            // Rule at src/isa/x64/lower.isle line 1235.
                                                                                            return v743;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v660 = constructor_put_in_xmm(ctx, v59.1);
                                        let v683 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v684 = constructor_x64_psrlq(ctx, v93, v683);
                                        let v663 = &C::xmm_to_xmm_mem(ctx, v660);
                                        let v685 = constructor_x64_pmuludq(ctx, v684, v663);
                                        let v686 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v687 = constructor_x64_psrlq(ctx, v660, v686);
                                        let v688 = &C::xmm_to_xmm_mem(ctx, v687);
                                        let v689 = constructor_x64_pmuludq(ctx, v93, v688);
                                        let v690 = &C::xmm_to_xmm_mem(ctx, v689);
                                        let v691 = constructor_x64_paddq(ctx, v685, v690);
                                        let v692 = &C::xmi_imm(ctx, 0x20_u32);
                                        let v693 = constructor_x64_psllq(ctx, v691, v692);
                                        let v694 = &C::xmm_to_xmm_mem(ctx, v660);
                                        let v695 = constructor_x64_pmuludq(ctx, v93, v694);
                                        let v696 = &C::xmm_to_xmm_mem(ctx, v693);
                                        let v697 = constructor_x64_paddq(ctx, v695, v696);
                                        let v698 = constructor_output_xmm(ctx, v697);
                                        let v699 = Some(v698);
                                        // Rule at src/isa/x64/lower.isle line 1155.
                                        return v699;
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v3 == I16 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data(ctx, v121);
                                if let &InstructionData::Unary {
                                    opcode: ref v137,
                                    arg: v138,
                                } = v122 {
                                    match v137 {
                                        &Opcode::Uextend => {
                                            let v266 = C::def_inst(ctx, v59.0);
                                            if let Some(v267) = v266 {
                                                let v268 = &C::inst_data(ctx, v267);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v269,
                                                    arg: v270,
                                                } = v268 {
                                                    if let &Opcode::Uextend = v269 {
                                                        let v281 = constructor_put_in_gpr(ctx, v270);
                                                        let v628 = &constructor_put_in_gpr_mem(ctx, v138);
                                                        let v172 = false;
                                                        let v632 = constructor_x64_mul8(ctx, v172, v281, v628);
                                                        let v633 = constructor_output_gpr(ctx, v632);
                                                        let v634 = Some(v633);
                                                        // Rule at src/isa/x64/lower.isle line 1040.
                                                        return v634;
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v266 = C::def_inst(ctx, v59.0);
                                            if let Some(v267) = v266 {
                                                let v268 = &C::inst_data(ctx, v267);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v269,
                                                    arg: v270,
                                                } = v268 {
                                                    if let &Opcode::Sextend = v269 {
                                                        let v281 = constructor_put_in_gpr(ctx, v270);
                                                        let v628 = &constructor_put_in_gpr_mem(ctx, v138);
                                                        let v182 = true;
                                                        let v629 = constructor_x64_mul8(ctx, v182, v281, v628);
                                                        let v630 = constructor_output_gpr(ctx, v629);
                                                        let v631 = Some(v630);
                                                        // Rule at src/isa/x64/lower.isle line 1038.
                                                        return v631;
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v348 = C::ty_int_ref_16_to_64(ctx, v3);
                        if let Some(v349) = v348 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v623 = C::i32_from_iconst(ctx, v59.0);
                            if let Some(v624) = v623 {
                                let v293 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                let v625 = constructor_x64_imul_imm(ctx, v349, v293, v624);
                                let v626 = constructor_output_gpr(ctx, v625);
                                let v627 = Some(v626);
                                // Rule at src/isa/x64/lower.isle line 1032.
                                return v627;
                            }
                            let v618 = C::i32_from_iconst(ctx, v59.1);
                            if let Some(v619) = v618 {
                                let v287 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                let v620 = constructor_x64_imul_imm(ctx, v349, v287, v619);
                                let v621 = constructor_output_gpr(ctx, v620);
                                let v622 = Some(v621);
                                // Rule at src/isa/x64/lower.isle line 1030.
                                return v622;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v608 = &constructor_sink_load_to_gpr_mem(ctx, v83);
                                let v615 = constructor_x64_imul(ctx, v349, v84, v608);
                                let v616 = constructor_output_gpr(ctx, v615);
                                let v617 = Some(v616);
                                // Rule at src/isa/x64/lower.isle line 1026.
                                return v617;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v612 = constructor_x64_imul(ctx, v349, v62, v173);
                            let v613 = constructor_output_gpr(ctx, v612);
                            let v614 = Some(v613);
                            // Rule at src/isa/x64/lower.isle line 1024.
                            return v614;
                        }
                        if v3 == I8 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v608 = &constructor_sink_load_to_gpr_mem(ctx, v83);
                                let v172 = false;
                                let v609 = constructor_x64_mul8(ctx, v172, v84, v608);
                                let v610 = constructor_output_gpr(ctx, v609);
                                let v611 = Some(v610);
                                // Rule at src/isa/x64/lower.isle line 1021.
                                return v611;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v172 = false;
                            let v605 = constructor_x64_mul8(ctx, v172, v62, v173);
                            let v606 = constructor_output_gpr(ctx, v605);
                            let v607 = Some(v606);
                            // Rule at src/isa/x64/lower.isle line 1020.
                            return v607;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v304 = C::use_bmi2(ctx);
                    if v304 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v2831 = C::value_type(ctx, v59.0);
                        let v3012 = C::ty_32_or_64(ctx, v2831);
                        if let Some(v3013) = v3012 {
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                            let v3014 = constructor_x64_mulx_hi(ctx, v3013, v62, v173);
                            let v3015 = constructor_output_gpr(ctx, v3014);
                            let v3016 = Some(v3015);
                            // Rule at src/isa/x64/lower.isle line 4440.
                            return v3016;
                        }
                    }
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    let v3006 = C::ty_int_ref_16_to_64(ctx, v2831);
                    if let Some(v3007) = v3006 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v172 = false;
                        let v3008 = constructor_x64_mul(ctx, v3007, v172, v62, v173);
                        let v3009 = constructor_value_regs_get_gpr(ctx, v3008, 0x1_usize);
                        let v3010 = constructor_output_gpr(ctx, v3009);
                        let v3011 = Some(v3010);
                        // Rule at src/isa/x64/lower.isle line 4433.
                        return v3011;
                    }
                    if v2831 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v172 = false;
                        let v605 = constructor_x64_mul8(ctx, v172, v62, v173);
                        let v3002 = &C::imm8_to_imm8_gpr(ctx, 0x8_u8);
                        let v3003 = constructor_x64_shr(ctx, I16, v605, v3002);
                        let v3004 = constructor_output_gpr(ctx, v3003);
                        let v3005 = Some(v3004);
                        // Rule at src/isa/x64/lower.isle line 4430.
                        return v3005;
                    }
                }
                &Opcode::Smulhi => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    let v3006 = C::ty_int_ref_16_to_64(ctx, v2831);
                    if let Some(v3007) = v3006 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v182 = true;
                        let v3021 = constructor_x64_mul(ctx, v3007, v182, v62, v173);
                        let v3022 = constructor_value_regs_get_gpr(ctx, v3021, 0x1_usize);
                        let v3023 = constructor_output_gpr(ctx, v3022);
                        let v3024 = Some(v3023);
                        // Rule at src/isa/x64/lower.isle line 4449.
                        return v3024;
                    }
                    if v2831 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v182 = true;
                        let v3017 = constructor_x64_mul8(ctx, v182, v62, v173);
                        let v3002 = &C::imm8_to_imm8_gpr(ctx, 0x8_u8);
                        let v3018 = constructor_x64_sar(ctx, I16, v3017, v3002);
                        let v3019 = constructor_output_gpr(ctx, v3018);
                        let v3020 = Some(v3019);
                        // Rule at src/isa/x64/lower.isle line 4446.
                        return v3020;
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I16X8 {
                        let v750 = C::use_ssse3(ctx);
                        if v750 == true {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v660 = constructor_put_in_xmm(ctx, v59.1);
                            let v3386 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
                            let v3387 = &constructor_const_to_xmm_mem(ctx, v3386);
                            let v663 = &C::xmm_to_xmm_mem(ctx, v660);
                            let v3388 = constructor_x64_pmulhrsw(ctx, v93, v663);
                            let v3389 = constructor_x64_pcmpeqw(ctx, v3388, v3387);
                            let v3390 = &C::xmm_to_xmm_mem(ctx, v3389);
                            let v3391 = constructor_x64_pxor(ctx, v3388, v3390);
                            let v3392 = constructor_output_xmm(ctx, v3391);
                            let v3393 = Some(v3392);
                            // Rule at src/isa/x64/lower.isle line 4925.
                            return v3393;
                        }
                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                        let v660 = constructor_put_in_xmm(ctx, v59.1);
                        let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                        let v3394 = constructor_x64_pmullw(ctx, v93, v1869);
                        let v663 = &C::xmm_to_xmm_mem(ctx, v660);
                        let v3395 = constructor_x64_pmulhw(ctx, v93, v663);
                        let v3396 = &C::xmm_to_xmm_mem(ctx, v3395);
                        let v3397 = constructor_x64_punpcklwd(ctx, v3394, v3396);
                        let v3398 = &C::xmm_to_xmm_mem(ctx, v3395);
                        let v3399 = constructor_x64_punpckhwd(ctx, v3394, v3398);
                        let v3401 = C::emit_u128_le_const(ctx, 0x4000000040000000400000004000_u128);
                        let v3402 = &constructor_const_to_xmm_mem(ctx, v3401);
                        let v3403 = constructor_x64_movdqu_load(ctx, v3402);
                        let v3404 = &C::xmm_to_xmm_mem(ctx, v3403);
                        let v3405 = constructor_x64_paddd(ctx, v3397, v3404);
                        let v3406 = &C::xmm_to_xmm_mem(ctx, v3403);
                        let v3407 = constructor_x64_paddd(ctx, v3399, v3406);
                        let v3409 = &C::xmi_imm(ctx, 0xf_u32);
                        let v3410 = constructor_x64_psrad(ctx, v3405, v3409);
                        let v3411 = &C::xmi_imm(ctx, 0xf_u32);
                        let v3412 = constructor_x64_psrad(ctx, v3407, v3411);
                        let v3413 = &C::xmm_to_xmm_mem(ctx, v3412);
                        let v3414 = constructor_x64_packssdw(ctx, v3410, v3413);
                        let v3415 = constructor_output_xmm(ctx, v3414);
                        let v3416 = Some(v3415);
                        // Rule at src/isa/x64/lower.isle line 4941.
                        return v3416;
                    }
                }
                &Opcode::X86Pmulhrsw => {
                    let v750 = C::use_ssse3(ctx);
                    if v750 == true {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v2831 = C::value_type(ctx, v59.0);
                        if v2831 == I16X8 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v3417 = constructor_x64_pmulhrsw(ctx, v93, v94);
                            let v3418 = constructor_output_xmm(ctx, v3417);
                            let v3419 = Some(v3418);
                            // Rule at src/isa/x64/lower.isle line 4967.
                            return v3419;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I8 {
                        let v2936 = constructor_extend_to_gpr(ctx, v59.0, I32, &ExtendKind::Zero);
                        let v529 = constructor_put_in_gpr(ctx, v59.1);
                        let v2937 = &C::gpr_to_gpr_mem(ctx, v529);
                        let v2940 = constructor_x64_div8(ctx, v2936, v2937, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v2941 = constructor_output_gpr(ctx, v2940);
                        let v2942 = Some(v2941);
                        // Rule at src/isa/x64/lower.isle line 4309.
                        return v2942;
                    }
                    let v2943 = C::fits_in_64(ctx, v2831);
                    if let Some(v2944) = v2943 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v2945 = C::gpr_new(ctx, v16);
                        let v2946 = constructor_put_in_gpr(ctx, v59.1);
                        let v2947 = &C::gpr_to_gpr_mem(ctx, v2946);
                        let v2948 = &C::raw_operand_size_of_type(ctx, v2944);
                        let v2949 = constructor_x64_div_quotient(ctx, v62, v2945, v2947, v2948, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v2950 = C::output(ctx, v2949);
                        let v2951 = Some(v2950);
                        // Rule at src/isa/x64/lower.isle line 4318.
                        return v2951;
                    }
                }
                &Opcode::Sdiv => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2953 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                        let v2954 = constructor_nonzero_sdiv_divisor(ctx, I8, v59.1);
                        let v2955 = &C::reg_to_gpr_mem(ctx, v2954);
                        let v2958 = constructor_x64_div8(ctx, v2953, v2955, &DivSignedness::Signed, &TrapCode::INTEGER_OVERFLOW);
                        let v2959 = constructor_output_gpr(ctx, v2958);
                        let v2960 = Some(v2959);
                        // Rule at src/isa/x64/lower.isle line 4328.
                        return v2960;
                    }
                    let v2943 = C::fits_in_64(ctx, v2831);
                    if let Some(v2944) = v2943 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2961 = &C::raw_operand_size_of_type(ctx, v2944);
                        let v2962 = constructor_x64_sign_extend_data(ctx, v62, v2961);
                        let v2963 = constructor_nonzero_sdiv_divisor(ctx, v2944, v59.1);
                        let v2964 = &C::reg_to_gpr_mem(ctx, v2963);
                        let v2965 = constructor_x64_div_quotient(ctx, v62, v2962, v2964, v2961, &DivSignedness::Signed, &TrapCode::INTEGER_OVERFLOW);
                        let v2966 = C::output(ctx, v2965);
                        let v2967 = Some(v2966);
                        // Rule at src/isa/x64/lower.isle line 4334.
                        return v2967;
                    }
                }
                &Opcode::Urem => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I8 {
                        let v2936 = constructor_extend_to_gpr(ctx, v59.0, I32, &ExtendKind::Zero);
                        let v529 = constructor_put_in_gpr(ctx, v59.1);
                        let v2937 = &C::gpr_to_gpr_mem(ctx, v529);
                        let v2940 = constructor_x64_div8(ctx, v2936, v2937, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v1707 = Imm8Reg::Imm8 {
                            imm: 0x8_u8,
                        };
                        let v2968 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                        let v2969 = constructor_x64_shr(ctx, I64, v2940, v2968);
                        let v2970 = constructor_output_gpr(ctx, v2969);
                        let v2971 = Some(v2970);
                        // Rule at src/isa/x64/lower.isle line 4367.
                        return v2971;
                    }
                    let v2943 = C::fits_in_64(ctx, v2831);
                    if let Some(v2944) = v2943 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v2945 = C::gpr_new(ctx, v16);
                        let v2946 = constructor_put_in_gpr(ctx, v59.1);
                        let v2947 = &C::gpr_to_gpr_mem(ctx, v2946);
                        let v2948 = &C::raw_operand_size_of_type(ctx, v2944);
                        let v2972 = constructor_x64_div_remainder(ctx, v62, v2945, v2947, v2948, &DivSignedness::Unsigned, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                        let v2973 = C::output(ctx, v2972);
                        let v2974 = Some(v2973);
                        // Rule at src/isa/x64/lower.isle line 4376.
                        return v2974;
                    }
                }
                &Opcode::Srem => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v120 = C::def_inst(ctx, v59.1);
                    if let Some(v121) = v120 {
                        let v122 = &C::inst_data(ctx, v121);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v500,
                            imm: v501,
                        } = v122 {
                            if let &Opcode::Iconst = v500 {
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == I8 {
                                    let v2975 = C::safe_divisor_from_imm64(ctx, I8, v501);
                                    if let Some(v2976) = v2975 {
                                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                                        let v2953 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                                        let v2977 = constructor_imm(ctx, I8, v2976);
                                        let v2978 = &C::reg_to_gpr_mem(ctx, v2977);
                                        let v2979 = constructor_x64_div8(ctx, v2953, v2978, &DivSignedness::Signed, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                                        let v1707 = Imm8Reg::Imm8 {
                                            imm: 0x8_u8,
                                        };
                                        let v2980 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                                        let v2981 = constructor_x64_shr(ctx, I64, v2979, v2980);
                                        let v2982 = constructor_output_gpr(ctx, v2981);
                                        let v2983 = Some(v2982);
                                        // Rule at src/isa/x64/lower.isle line 4391.
                                        return v2983;
                                    }
                                }
                                let v2984 = C::safe_divisor_from_imm64(ctx, v2831, v501);
                                if let Some(v2985) = v2984 {
                                    let v62 = constructor_put_in_gpr(ctx, v59.0);
                                    let v2986 = &C::raw_operand_size_of_type(ctx, v2831);
                                    let v2987 = constructor_x64_sign_extend_data(ctx, v62, v2986);
                                    let v2988 = constructor_imm(ctx, v2831, v2985);
                                    let v2989 = &C::reg_to_gpr_mem(ctx, v2988);
                                    let v2990 = constructor_x64_div_remainder(ctx, v62, v2987, v2989, v2986, &DivSignedness::Signed, &TrapCode::INTEGER_DIVISION_BY_ZERO);
                                    let v2991 = C::output(ctx, v2990);
                                    let v2992 = Some(v2991);
                                    // Rule at src/isa/x64/lower.isle line 4400.
                                    return v2992;
                                }
                            }
                        }
                    }
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v2953 = constructor_x64_sign_extend_data(ctx, v62, &OperandSize::Size8);
                        let v2993 = constructor_put_in_gpr(ctx, v59.1);
                        let v2994 = constructor_x64_checked_srem_seq8(ctx, v2953, v2993);
                        let v1707 = Imm8Reg::Imm8 {
                            imm: 0x8_u8,
                        };
                        let v2968 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                        let v2995 = constructor_x64_shr(ctx, I64, v2994, v2968);
                        let v2996 = constructor_output_gpr(ctx, v2995);
                        let v2997 = Some(v2996);
                        // Rule at src/isa/x64/lower.isle line 4413.
                        return v2997;
                    }
                    let v62 = constructor_put_in_gpr(ctx, v59.0);
                    let v2986 = &C::raw_operand_size_of_type(ctx, v2831);
                    let v2987 = constructor_x64_sign_extend_data(ctx, v62, v2986);
                    let v2946 = constructor_put_in_gpr(ctx, v59.1);
                    let v2998 = constructor_x64_checked_srem_seq(ctx, v2986, v62, v2987, v2946);
                    let v2999 = C::value_regs_get(ctx, v2998, 0x1_usize);
                    let v3000 = constructor_output_reg(ctx, v2999);
                    let v3001 = Some(v3000);
                    // Rule at src/isa/x64/lower.isle line 4419.
                    return v3001;
                }
                &Opcode::UaddOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v148 = C::fits_in_64(ctx, v147);
                    if let Some(v149) = v148 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v152 = constructor_construct_overflow_op_alu(ctx, v149, &CC::B, &AluRmiROpcode::Add, v62, v63);
                        let v153 = Some(v152);
                        // Rule at src/isa/x64/lower.isle line 158.
                        return v153;
                    }
                    if v147 == I128 {
                        let v155 = constructor_construct_overflow_op_alu_128(ctx, &CC::B, &AluRmiROpcode::Add, &AluRmiROpcode::Adc, v59.0, v59.1);
                        let v156 = Some(v155);
                        // Rule at src/isa/x64/lower.isle line 162.
                        return v156;
                    }
                }
                &Opcode::SaddOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v148 = C::fits_in_64(ctx, v147);
                    if let Some(v149) = v148 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v158 = constructor_construct_overflow_op_alu(ctx, v149, &CC::O, &AluRmiROpcode::Add, v62, v63);
                        let v159 = Some(v158);
                        // Rule at src/isa/x64/lower.isle line 167.
                        return v159;
                    }
                    if v147 == I128 {
                        let v160 = constructor_construct_overflow_op_alu_128(ctx, &CC::O, &AluRmiROpcode::Add, &AluRmiROpcode::Adc, v59.0, v59.1);
                        let v161 = Some(v160);
                        // Rule at src/isa/x64/lower.isle line 170.
                        return v161;
                    }
                }
                &Opcode::UsubOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v148 = C::fits_in_64(ctx, v147);
                    if let Some(v149) = v148 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v163 = constructor_construct_overflow_op_alu(ctx, v149, &CC::B, &AluRmiROpcode::Sub, v62, v63);
                        let v164 = Some(v163);
                        // Rule at src/isa/x64/lower.isle line 175.
                        return v164;
                    }
                    if v147 == I128 {
                        let v166 = constructor_construct_overflow_op_alu_128(ctx, &CC::B, &AluRmiROpcode::Sub, &AluRmiROpcode::Sbb, v59.0, v59.1);
                        let v167 = Some(v166);
                        // Rule at src/isa/x64/lower.isle line 178.
                        return v167;
                    }
                }
                &Opcode::SsubOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v148 = C::fits_in_64(ctx, v147);
                    if let Some(v149) = v148 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                        let v168 = constructor_construct_overflow_op_alu(ctx, v149, &CC::O, &AluRmiROpcode::Sub, v62, v63);
                        let v169 = Some(v168);
                        // Rule at src/isa/x64/lower.isle line 183.
                        return v169;
                    }
                    if v147 == I128 {
                        let v170 = constructor_construct_overflow_op_alu_128(ctx, &CC::O, &AluRmiROpcode::Sub, &AluRmiROpcode::Sbb, v59.0, v59.1);
                        let v171 = Some(v170);
                        // Rule at src/isa/x64/lower.isle line 186.
                        return v171;
                    }
                }
                &Opcode::UmulOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v177 = C::ty_int_ref_16_to_64(ctx, v147);
                    if let Some(v178) = v177 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v172 = false;
                        let v179 = &constructor_x64_mul_lo_with_flags_paired(ctx, v178, v172, v62, v173);
                        let v180 = constructor_construct_overflow_op(ctx, &CC::O, v179);
                        let v181 = Some(v180);
                        // Rule at src/isa/x64/lower.isle line 194.
                        return v181;
                    }
                    if v147 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v172 = false;
                        let v174 = &constructor_x64_mul8_with_flags_paired(ctx, v172, v62, v173);
                        let v175 = constructor_construct_overflow_op(ctx, &CC::O, v174);
                        let v176 = Some(v175);
                        // Rule at src/isa/x64/lower.isle line 191.
                        return v176;
                    }
                }
                &Opcode::SmulOverflow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v147 = C::value_type(ctx, v59.1);
                    let v177 = C::ty_int_ref_16_to_64(ctx, v147);
                    if let Some(v178) = v177 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v182 = true;
                        let v186 = &constructor_x64_mul_lo_with_flags_paired(ctx, v178, v182, v62, v173);
                        let v187 = constructor_construct_overflow_op(ctx, &CC::O, v186);
                        let v188 = Some(v187);
                        // Rule at src/isa/x64/lower.isle line 202.
                        return v188;
                    }
                    if v147 == I8 {
                        let v62 = constructor_put_in_gpr(ctx, v59.0);
                        let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                        let v182 = true;
                        let v183 = &constructor_x64_mul8_with_flags_paired(ctx, v182, v62, v173);
                        let v184 = constructor_construct_overflow_op(ctx, &CC::O, v183);
                        let v185 = Some(v184);
                        // Rule at src/isa/x64/lower.isle line 199.
                        return v185;
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v285 = constructor_val_minus_one(ctx, v59.1);
                            if let Some(v286) = v285 {
                                let v304 = C::use_bmi2(ctx);
                                if v304 == true {
                                    let v305 = C::def_inst(ctx, v286);
                                    if let Some(v306) = v305 {
                                        let v307 = &C::inst_data(ctx, v306);
                                        if let &InstructionData::Binary {
                                            opcode: ref v308,
                                            args: ref v309,
                                        } = v307 {
                                            if let &Opcode::Ishl = v308 {
                                                let v310 = C::unpack_value_array_2(ctx, v309);
                                                let v313 = C::def_inst(ctx, v310.0);
                                                if let Some(v314) = v313 {
                                                    let v315 = &C::inst_data(ctx, v314);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v316,
                                                        imm: v317,
                                                    } = v315 {
                                                        if let &Opcode::Iconst = v316 {
                                                            let v318 = C::u64_from_imm64(ctx, v317);
                                                            if v318 == 0x1_u64 {
                                                                let v287 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                                                let v319 = constructor_put_in_gpr(ctx, v310.1);
                                                                let v320 = C::ty_bits(ctx, v68);
                                                                let v321 = C::u8_as_u32(ctx, v320);
                                                                let v323 = C::u32_sub(ctx, v321, 0x1_u32);
                                                                let v324 = RegMemImm::Imm {
                                                                    simm32: v323,
                                                                };
                                                                let v325 = &C::gpr_mem_imm_new(ctx, &v324);
                                                                let v326 = constructor_x64_and(ctx, v68, v319, v325);
                                                                let v327 = constructor_x64_bzhi(ctx, v68, v287, v326);
                                                                let v328 = constructor_output_gpr(ctx, v327);
                                                                let v329 = Some(v328);
                                                                // Rule at src/isa/x64/lower.isle line 417.
                                                                return v329;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v275 = C::use_bmi1(ctx);
                            if v275 == true {
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data(ctx, v121);
                                    if let &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } = v122 {
                                        if let &Opcode::Ineg = v137 {
                                            if v59.0 == v138 {
                                                let v287 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                                let v301 = constructor_x64_blsi(ctx, v68, v287);
                                                let v302 = constructor_output_gpr(ctx, v301);
                                                let v303 = Some(v302);
                                                // Rule at src/isa/x64/lower.isle line 404.
                                                return v303;
                                            }
                                        }
                                    }
                                }
                                let v266 = C::def_inst(ctx, v59.0);
                                if let Some(v267) = v266 {
                                    let v268 = &C::inst_data(ctx, v267);
                                    if let &InstructionData::Unary {
                                        opcode: ref v269,
                                        arg: v270,
                                    } = v268 {
                                        if let &Opcode::Ineg = v269 {
                                            if v59.1 == v270 {
                                                let v297 = &constructor_put_in_gpr_mem(ctx, v270);
                                                let v298 = constructor_x64_blsi(ctx, v68, v297);
                                                let v299 = constructor_output_gpr(ctx, v298);
                                                let v300 = Some(v299);
                                                // Rule at src/isa/x64/lower.isle line 401.
                                                return v300;
                                            }
                                        }
                                    }
                                }
                                let v291 = constructor_val_minus_one(ctx, v59.0);
                                if let Some(v292) = v291 {
                                    if v59.1 == v292 {
                                        let v293 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                        let v294 = constructor_x64_blsr(ctx, v68, v293);
                                        let v295 = constructor_output_gpr(ctx, v294);
                                        let v296 = Some(v295);
                                        // Rule at src/isa/x64/lower.isle line 394.
                                        return v296;
                                    }
                                }
                                if let Some(v286) = v285 {
                                    if v59.0 == v286 {
                                        let v287 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                        let v288 = constructor_x64_blsr(ctx, v68, v287);
                                        let v289 = constructor_output_gpr(ctx, v288);
                                        let v290 = Some(v289);
                                        // Rule at src/isa/x64/lower.isle line 390.
                                        return v290;
                                    }
                                }
                            }
                        }
                        let v237 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v238) = v237 {
                            let v275 = C::use_bmi1(ctx);
                            if v275 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v266 = C::def_inst(ctx, v59.0);
                                if let Some(v267) = v266 {
                                    let v268 = &C::inst_data(ctx, v267);
                                    if let &InstructionData::Unary {
                                        opcode: ref v269,
                                        arg: v270,
                                    } = v268 {
                                        if let &Opcode::Bnot = v269 {
                                            let v281 = constructor_put_in_gpr(ctx, v270);
                                            let v173 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                            let v282 = constructor_x64_andn(ctx, v3, v281, v173);
                                            let v283 = constructor_output_gpr(ctx, v282);
                                            let v284 = Some(v283);
                                            // Rule at src/isa/x64/lower.isle line 378.
                                            return v284;
                                        }
                                    }
                                }
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data(ctx, v121);
                                    if let &InstructionData::Unary {
                                        opcode: ref v137,
                                        arg: v138,
                                    } = v122 {
                                        if let &Opcode::Bnot = v137 {
                                            let v276 = constructor_put_in_gpr(ctx, v138);
                                            let v277 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                            let v278 = constructor_x64_andn(ctx, v3, v276, v277);
                                            let v279 = constructor_output_gpr(ctx, v278);
                                            let v280 = Some(v279);
                                            // Rule at src/isa/x64/lower.isle line 373.
                                            return v280;
                                        }
                                    }
                                }
                            }
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v266 = C::def_inst(ctx, v59.0);
                            if let Some(v267) = v266 {
                                let v268 = &C::inst_data(ctx, v267);
                                if let &InstructionData::Unary {
                                    opcode: ref v269,
                                    arg: v270,
                                } = v268 {
                                    if let &Opcode::Bnot = v269 {
                                        let v271 = constructor_put_in_xmm(ctx, v270);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v272 = constructor_sse_and_not(ctx, v3, v271, v94);
                                        let v273 = constructor_output_xmm(ctx, v272);
                                        let v274 = Some(v273);
                                        // Rule at src/isa/x64/lower.isle line 370.
                                        return v274;
                                    }
                                }
                            }
                            let v120 = C::def_inst(ctx, v59.1);
                            if let Some(v121) = v120 {
                                let v122 = &C::inst_data(ctx, v121);
                                if let &InstructionData::Unary {
                                    opcode: ref v137,
                                    arg: v138,
                                } = v122 {
                                    if let &Opcode::Bnot = v137 {
                                        let v261 = constructor_put_in_xmm(ctx, v138);
                                        let v262 = &C::put_in_xmm_mem(ctx, v59.0);
                                        let v263 = constructor_sse_and_not(ctx, v3, v261, v262);
                                        let v264 = constructor_output_xmm(ctx, v263);
                                        let v265 = Some(v264);
                                        // Rule at src/isa/x64/lower.isle line 368.
                                        return v265;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v258 = constructor_and_i128(ctx, v107, v108);
                            let v259 = C::output(ctx, v258);
                            let v260 = Some(v259);
                            // Rule at src/isa/x64/lower.isle line 349.
                            return v260;
                        }
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v255 = constructor_sse_and(ctx, v3, v93, v94);
                            let v256 = constructor_output_xmm(ctx, v255);
                            let v257 = Some(v256);
                            // Rule at src/isa/x64/lower.isle line 332.
                            return v257;
                        }
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v252 = constructor_sse_and(ctx, v251, v93, v94);
                            let v253 = constructor_output_xmm(ctx, v252);
                            let v254 = Some(v253);
                            // Rule at src/isa/x64/lower.isle line 320.
                            return v254;
                        }
                        if let Some(v238) = v237 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v245 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v246) = v245 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v247 = constructor_x64_and(ctx, v3, v84, v246);
                                let v248 = constructor_output_gpr(ctx, v247);
                                let v249 = Some(v248);
                                // Rule at src/isa/x64/lower.isle line 314.
                                return v249;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v242 = constructor_x64_and(ctx, v3, v84, v85);
                                let v243 = constructor_output_gpr(ctx, v242);
                                let v244 = Some(v243);
                                // Rule at src/isa/x64/lower.isle line 310.
                                return v244;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v239 = constructor_x64_and(ctx, v3, v62, v63);
                            let v240 = constructor_output_gpr(ctx, v239);
                            let v241 = Some(v240);
                            // Rule at src/isa/x64/lower.isle line 303.
                            return v241;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v59 = C::unpack_value_array_2(ctx, v58);
                        let v120 = C::def_inst(ctx, v59.1);
                        if let Some(v121) = v120 {
                            let v122 = &C::inst_data(ctx, v121);
                            if let &InstructionData::Binary {
                                opcode: ref v123,
                                args: ref v124,
                            } = v122 {
                                match v123 {
                                    &Opcode::Ishl => {
                                        let v266 = C::def_inst(ctx, v59.0);
                                        if let Some(v267) = v266 {
                                            let v268 = &C::inst_data(ctx, v267);
                                            if let &InstructionData::Binary {
                                                opcode: ref v350,
                                                args: ref v351,
                                            } = v268 {
                                                if let &Opcode::Ushr = v350 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v348 = C::ty_int_ref_16_to_64(ctx, v3);
                                                    if let Some(v349) = v348 {
                                                        let v352 = C::unpack_value_array_2(ctx, v351);
                                                        let v355 = C::def_inst(ctx, v352.1);
                                                        if let Some(v356) = v355 {
                                                            let v357 = &C::inst_data(ctx, v356);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v358,
                                                                imm: v359,
                                                            } = v357 {
                                                                if let &Opcode::Iconst = v358 {
                                                                    let v360 = C::uimm8(ctx, v359);
                                                                    if let Some(v361) = v360 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v362 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v363) = v362 {
                                                                            let v364 = &C::inst_data(ctx, v363);
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v365,
                                                                                imm: v366,
                                                                            } = v364 {
                                                                                if let &Opcode::Iconst = v365 {
                                                                                    let v367 = C::uimm8(ctx, v366);
                                                                                    if let Some(v368) = v367 {
                                                                                        let v369 = C::ty_bits(ctx, v349);
                                                                                        let v370 = C::u8_as_u64(ctx, v369);
                                                                                        let v372 = C::u8_as_u64(ctx, v368);
                                                                                        let v371 = C::u8_as_u64(ctx, v361);
                                                                                        let v380 = C::u64_add(ctx, v372, v371);
                                                                                        let v381 = C::u64_eq(ctx, v370, v380);
                                                                                        if v381 == true {
                                                                                            let v382 = constructor_put_in_gpr(ctx, v125.0);
                                                                                            let v383 = constructor_put_in_gpr(ctx, v352.0);
                                                                                            let v384 = constructor_x64_shld(ctx, v349, v382, v383, v368);
                                                                                            let v385 = constructor_output_gpr(ctx, v384);
                                                                                            let v386 = Some(v385);
                                                                                            // Rule at src/isa/x64/lower.isle line 483.
                                                                                            return v386;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Ushr => {
                                        let v266 = C::def_inst(ctx, v59.0);
                                        if let Some(v267) = v266 {
                                            let v268 = &C::inst_data(ctx, v267);
                                            if let &InstructionData::Binary {
                                                opcode: ref v350,
                                                args: ref v351,
                                            } = v268 {
                                                if let &Opcode::Ishl = v350 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v348 = C::ty_int_ref_16_to_64(ctx, v3);
                                                    if let Some(v349) = v348 {
                                                        let v352 = C::unpack_value_array_2(ctx, v351);
                                                        let v355 = C::def_inst(ctx, v352.1);
                                                        if let Some(v356) = v355 {
                                                            let v357 = &C::inst_data(ctx, v356);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v358,
                                                                imm: v359,
                                                            } = v357 {
                                                                if let &Opcode::Iconst = v358 {
                                                                    let v360 = C::uimm8(ctx, v359);
                                                                    if let Some(v361) = v360 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v362 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v363) = v362 {
                                                                            let v364 = &C::inst_data(ctx, v363);
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v365,
                                                                                imm: v366,
                                                                            } = v364 {
                                                                                if let &Opcode::Iconst = v365 {
                                                                                    let v367 = C::uimm8(ctx, v366);
                                                                                    if let Some(v368) = v367 {
                                                                                        let v369 = C::ty_bits(ctx, v349);
                                                                                        let v370 = C::u8_as_u64(ctx, v369);
                                                                                        let v371 = C::u8_as_u64(ctx, v361);
                                                                                        let v372 = C::u8_as_u64(ctx, v368);
                                                                                        let v373 = C::u64_add(ctx, v371, v372);
                                                                                        let v374 = C::u64_eq(ctx, v370, v373);
                                                                                        if v374 == true {
                                                                                            let v375 = constructor_put_in_gpr(ctx, v352.0);
                                                                                            let v376 = constructor_put_in_gpr(ctx, v125.0);
                                                                                            let v377 = constructor_x64_shld(ctx, v349, v375, v376, v361);
                                                                                            let v378 = constructor_output_gpr(ctx, v377);
                                                                                            let v379 = Some(v378);
                                                                                            // Rule at src/isa/x64/lower.isle line 479.
                                                                                            return v379;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v108 = C::put_in_regs(ctx, v59.1);
                            let v345 = constructor_or_i128(ctx, v107, v108);
                            let v346 = C::output(ctx, v345);
                            let v347 = Some(v346);
                            // Rule at src/isa/x64/lower.isle line 471.
                            return v347;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v342 = constructor_sse_or(ctx, v3, v93, v94);
                            let v343 = constructor_output_xmm(ctx, v342);
                            let v344 = Some(v343);
                            // Rule at src/isa/x64/lower.isle line 456.
                            return v344;
                        }
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v339 = constructor_sse_or(ctx, v251, v93, v94);
                            let v340 = constructor_output_xmm(ctx, v339);
                            let v341 = Some(v340);
                            // Rule at src/isa/x64/lower.isle line 444.
                            return v341;
                        }
                        let v237 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v238) = v237 {
                            let v245 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v246) = v245 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v336 = constructor_x64_or(ctx, v3, v84, v246);
                                let v337 = constructor_output_gpr(ctx, v336);
                                let v338 = Some(v337);
                                // Rule at src/isa/x64/lower.isle line 438.
                                return v338;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v333 = constructor_x64_or(ctx, v3, v84, v85);
                                let v334 = constructor_output_gpr(ctx, v333);
                                let v335 = Some(v334);
                                // Rule at src/isa/x64/lower.isle line 434.
                                return v335;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v330 = constructor_x64_or(ctx, v3, v62, v63);
                            let v331 = constructor_output_gpr(ctx, v330);
                            let v332 = Some(v331);
                            // Rule at src/isa/x64/lower.isle line 427.
                            return v332;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v275 = C::use_bmi1(ctx);
                            if v275 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v291 = constructor_val_minus_one(ctx, v59.0);
                                if let Some(v292) = v291 {
                                    if v59.1 == v292 {
                                        let v293 = &constructor_put_in_gpr_mem(ctx, v59.1);
                                        let v417 = constructor_x64_blsmsk(ctx, v68, v293);
                                        let v418 = constructor_output_gpr(ctx, v417);
                                        let v419 = Some(v418);
                                        // Rule at src/isa/x64/lower.isle line 537.
                                        return v419;
                                    }
                                }
                                let v285 = constructor_val_minus_one(ctx, v59.1);
                                if let Some(v286) = v285 {
                                    if v59.0 == v286 {
                                        let v287 = &constructor_put_in_gpr_mem(ctx, v59.0);
                                        let v414 = constructor_x64_blsmsk(ctx, v68, v287);
                                        let v415 = constructor_output_gpr(ctx, v414);
                                        let v416 = Some(v415);
                                        // Rule at src/isa/x64/lower.isle line 533.
                                        return v416;
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v402 = constructor_value_regs_get_gpr(ctx, v107, 0x0_usize);
                            let v403 = constructor_value_regs_get_gpr(ctx, v107, 0x1_usize);
                            let v404 = C::put_in_regs(ctx, v59.1);
                            let v405 = constructor_value_regs_get_gpr(ctx, v404, 0x0_usize);
                            let v406 = constructor_value_regs_get_gpr(ctx, v404, 0x1_usize);
                            let v407 = &C::gpr_to_gpr_mem_imm(ctx, v405);
                            let v408 = constructor_x64_xor(ctx, I64, v402, v407);
                            let v409 = &C::gpr_to_gpr_mem_imm(ctx, v406);
                            let v410 = constructor_x64_xor(ctx, I64, v403, v409);
                            let v411 = constructor_value_gprs(ctx, v408, v410);
                            let v412 = C::output(ctx, v411);
                            let v413 = Some(v412);
                            // Rule at src/isa/x64/lower.isle line 521.
                            return v413;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v399 = constructor_x64_xor_vector(ctx, v3, v93, v94);
                            let v400 = constructor_output_xmm(ctx, v399);
                            let v401 = Some(v400);
                            // Rule at src/isa/x64/lower.isle line 516.
                            return v401;
                        }
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v93 = constructor_put_in_xmm(ctx, v59.0);
                            let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                            let v396 = constructor_x64_xor_vector(ctx, v251, v93, v94);
                            let v397 = constructor_output_xmm(ctx, v396);
                            let v398 = Some(v397);
                            // Rule at src/isa/x64/lower.isle line 511.
                            return v398;
                        }
                        let v237 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v238) = v237 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v245 = &C::simm32_from_value(ctx, v59.0);
                            if let Some(v246) = v245 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v393 = constructor_x64_xor(ctx, v3, v84, v246);
                                let v394 = constructor_output_gpr(ctx, v393);
                                let v395 = Some(v394);
                                // Rule at src/isa/x64/lower.isle line 505.
                                return v395;
                            }
                            let v82 = &C::sinkable_load(ctx, v59.0);
                            if let Some(v83) = v82 {
                                let v84 = constructor_put_in_gpr(ctx, v59.1);
                                let v85 = &constructor_sink_load_to_gpr_mem_imm(ctx, v83);
                                let v390 = constructor_x64_xor(ctx, v3, v84, v85);
                                let v391 = constructor_output_gpr(ctx, v390);
                                let v392 = Some(v391);
                                // Rule at src/isa/x64/lower.isle line 501.
                                return v392;
                            }
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v63 = &constructor_put_in_gpr_mem_imm(ctx, v59.1);
                            let v387 = constructor_x64_xor(ctx, v3, v62, v63);
                            let v388 = constructor_output_gpr(ctx, v387);
                            let v389 = Some(v388);
                            // Rule at src/isa/x64/lower.isle line 494.
                            return v389;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v539 = constructor_lo_gpr(ctx, v59.1);
                            let v540 = constructor_shl_i128(ctx, v107, v539);
                            let v542 = constructor_imm(ctx, I64, 0x80_u64);
                            let v543 = C::gpr_new(ctx, v542);
                            let v544 = &C::gpr_to_gpr_mem_imm(ctx, v539);
                            let v545 = constructor_x64_sub(ctx, I64, v543, v544);
                            let v546 = constructor_shr_i128(ctx, v107, v545);
                            let v547 = constructor_or_i128(ctx, v540, v546);
                            let v548 = C::output(ctx, v547);
                            let v549 = Some(v548);
                            // Rule at src/isa/x64/lower.isle line 943.
                            return v549;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v420 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v536 = constructor_x64_rotl(ctx, v5, v62, v420);
                            let v537 = constructor_output_gpr(ctx, v536);
                            let v538 = Some(v537);
                            // Rule at src/isa/x64/lower.isle line 937.
                            return v538;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v107 = C::put_in_regs(ctx, v59.0);
                            let v539 = constructor_lo_gpr(ctx, v59.1);
                            let v553 = constructor_shr_i128(ctx, v107, v539);
                            let v542 = constructor_imm(ctx, I64, 0x80_u64);
                            let v543 = C::gpr_new(ctx, v542);
                            let v544 = &C::gpr_to_gpr_mem_imm(ctx, v539);
                            let v545 = constructor_x64_sub(ctx, I64, v543, v544);
                            let v554 = constructor_shl_i128(ctx, v107, v545);
                            let v555 = constructor_or_i128(ctx, v553, v554);
                            let v556 = C::output(ctx, v555);
                            let v557 = Some(v556);
                            // Rule at src/isa/x64/lower.isle line 964.
                            return v557;
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v420 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v550 = constructor_x64_rotr(ctx, v5, v62, v420);
                            let v551 = constructor_output_gpr(ctx, v550);
                            let v552 = Some(v551);
                            // Rule at src/isa/x64/lower.isle line 958.
                            return v552;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v424 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v425 = constructor_shl_i128(ctx, v128, v424);
                                let v426 = C::output(ctx, v425);
                                let v427 = Some(v426);
                                // Rule at src/isa/x64/lower.isle line 585.
                                return v427;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v428 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v429 = constructor_put_in_xmm(ctx, v59.0);
                                let v430 = &constructor_mov_rmi_to_xmm(ctx, v428);
                                let v431 = constructor_x64_psllw(ctx, v429, v430);
                                let v432 = &constructor_ishl_i8x16_mask(ctx, v428);
                                let v435 = constructor_x64_load(ctx, I8X16, v432, &ExtKind::None);
                                let v436 = RegMem::Reg {
                                    reg: v435,
                                };
                                let v437 = &C::reg_mem_to_xmm_mem(ctx, &v436);
                                let v438 = constructor_sse_and(ctx, I8X16, v431, v437);
                                let v439 = constructor_output_xmm(ctx, v438);
                                let v440 = Some(v439);
                                // Rule at src/isa/x64/lower.isle line 597.
                                return v440;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v443 = constructor_x64_psllw(ctx, v93, v442);
                                let v444 = constructor_output_xmm(ctx, v443);
                                let v445 = Some(v444);
                                // Rule at src/isa/x64/lower.isle line 642.
                                return v445;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v446 = constructor_x64_pslld(ctx, v93, v442);
                                let v447 = constructor_output_xmm(ctx, v446);
                                let v448 = Some(v447);
                                // Rule at src/isa/x64/lower.isle line 645.
                                return v448;
                            }
                            I64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v449 = constructor_x64_psllq(ctx, v93, v442);
                                let v450 = constructor_output_xmm(ctx, v449);
                                let v451 = Some(v450);
                                // Rule at src/isa/x64/lower.isle line 648.
                                return v451;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v62 = constructor_put_in_gpr(ctx, v59.0);
                            let v420 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v421 = constructor_x64_shl(ctx, v5, v62, v420);
                            let v422 = constructor_output_gpr(ctx, v421);
                            let v423 = Some(v422);
                            // Rule at src/isa/x64/lower.isle line 546.
                            return v423;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v424 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v457 = constructor_shr_i128(ctx, v128, v424);
                                let v458 = C::output(ctx, v457);
                                let v459 = Some(v458);
                                // Rule at src/isa/x64/lower.isle line 692.
                                return v459;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v428 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v429 = constructor_put_in_xmm(ctx, v59.0);
                                let v430 = &constructor_mov_rmi_to_xmm(ctx, v428);
                                let v460 = constructor_x64_psrlw(ctx, v429, v430);
                                let v461 = &constructor_ushr_i8x16_mask(ctx, v428);
                                let v462 = &constructor_synthetic_amode_to_xmm_mem(ctx, v461);
                                let v463 = constructor_sse_and(ctx, I8X16, v460, v462);
                                let v464 = constructor_output_xmm(ctx, v463);
                                let v465 = Some(v464);
                                // Rule at src/isa/x64/lower.isle line 702.
                                return v465;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v466 = constructor_x64_psrlw(ctx, v93, v442);
                                let v467 = constructor_output_xmm(ctx, v466);
                                let v468 = Some(v467);
                                // Rule at src/isa/x64/lower.isle line 748.
                                return v468;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v469 = constructor_x64_psrld(ctx, v93, v442);
                                let v470 = constructor_output_xmm(ctx, v469);
                                let v471 = Some(v470);
                                // Rule at src/isa/x64/lower.isle line 751.
                                return v471;
                            }
                            I64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v472 = constructor_x64_psrlq(ctx, v93, v442);
                                let v473 = constructor_output_xmm(ctx, v472);
                                let v474 = Some(v473);
                                // Rule at src/isa/x64/lower.isle line 754.
                                return v474;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v453 = constructor_extend_to_gpr(ctx, v59.0, v5, &ExtendKind::Zero);
                            let v420 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v454 = constructor_x64_shr(ctx, v5, v453, v420);
                            let v455 = constructor_output_gpr(ctx, v454);
                            let v456 = Some(v455);
                            // Rule at src/isa/x64/lower.isle line 655.
                            return v456;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v424 = constructor_lo_gpr(ctx, v59.1);
                                let v128 = C::put_in_regs(ctx, v59.0);
                                let v480 = constructor_sar_i128(ctx, v128, v424);
                                let v481 = C::output(ctx, v480);
                                let v482 = Some(v481);
                                // Rule at src/isa/x64/lower.isle line 804.
                                return v482;
                            }
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v483 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v484 = constructor_x64_punpcklbw(ctx, v93, v483);
                                let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v486 = constructor_x64_punpckhbw(ctx, v93, v485);
                                let v147 = C::value_type(ctx, v59.1);
                                let v487 = &constructor_sshr_i8x16_bigger_shift(ctx, v147, v441);
                                let v488 = constructor_x64_psraw(ctx, v484, v487);
                                let v489 = constructor_x64_psraw(ctx, v486, v487);
                                let v490 = &C::xmm_to_xmm_mem(ctx, v489);
                                let v491 = constructor_x64_packsswb(ctx, v488, v490);
                                let v492 = constructor_output_xmm(ctx, v491);
                                let v493 = Some(v492);
                                // Rule at src/isa/x64/lower.isle line 825.
                                return v493;
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v494 = constructor_x64_psraw(ctx, v93, v442);
                                let v495 = constructor_output_xmm(ctx, v494);
                                let v496 = Some(v495);
                                // Rule at src/isa/x64/lower.isle line 854.
                                return v496;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v441 = &constructor_mask_xmm_shift(ctx, v3, v59.1);
                                let v442 = &constructor_mov_rmi_to_xmm(ctx, v441);
                                let v497 = constructor_x64_psrad(ctx, v93, v442);
                                let v498 = constructor_output_xmm(ctx, v497);
                                let v499 = Some(v498);
                                // Rule at src/isa/x64/lower.isle line 857.
                                return v499;
                            }
                            I64X2 => {
                                let v502 = C::use_avx512vl(ctx);
                                if v502 == true {
                                    let v503 = C::use_avx512f(ctx);
                                    if v503 == true {
                                        let v59 = C::unpack_value_array_2(ctx, v58);
                                        let v120 = C::def_inst(ctx, v59.1);
                                        if let Some(v121) = v120 {
                                            let v122 = &C::inst_data(ctx, v121);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v500,
                                                imm: v501,
                                            } = v122 {
                                                if let &Opcode::Iconst = v500 {
                                                    let v504 = &C::put_in_xmm_mem(ctx, v59.0);
                                                    let v505 = C::shift_amount_masked(ctx, v3, v501);
                                                    let v506 = constructor_x64_vpsraq_imm(ctx, v504, v505);
                                                    let v507 = constructor_output_xmm(ctx, v506);
                                                    let v508 = Some(v507);
                                                    // Rule at src/isa/x64/lower.isle line 863.
                                                    return v508;
                                                }
                                            }
                                        }
                                        let v84 = constructor_put_in_gpr(ctx, v59.1);
                                        let v509 = C::shift_mask(ctx, v3);
                                        let v510 = C::u8_as_u32(ctx, v509);
                                        let v511 = RegMemImm::Imm {
                                            simm32: v510,
                                        };
                                        let v512 = &C::gpr_mem_imm_new(ctx, &v511);
                                        let v513 = constructor_x64_and(ctx, I64, v84, v512);
                                        let v514 = constructor_put_in_xmm(ctx, v59.0);
                                        let v515 = &C::gpr_to_gpr_mem(ctx, v513);
                                        let v516 = constructor_x64_movd_to_xmm(ctx, v515);
                                        let v517 = &C::xmm_to_xmm_mem(ctx, v516);
                                        let v518 = constructor_x64_vpsraq(ctx, v514, v517);
                                        let v519 = constructor_output_xmm(ctx, v518);
                                        let v520 = Some(v519);
                                        // Rule at src/isa/x64/lower.isle line 868.
                                        return v520;
                                    }
                                }
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data(ctx, v121);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v500,
                                        imm: v501,
                                    } = v122 {
                                        if let &Opcode::Iconst = v500 {
                                            let v521 = C::u64_from_imm64(ctx, v501);
                                            let v522 = C::u64_as_u32(ctx, v521);
                                            if let Some(v523) = v522 {
                                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                                let v525 = C::u32_and(ctx, v523, 0x3f_u32);
                                                let v526 = constructor_lower_i64x2_sshr_imm(ctx, v93, v525);
                                                let v527 = constructor_output_xmm(ctx, v526);
                                                let v528 = Some(v527);
                                                // Rule at src/isa/x64/lower.isle line 874.
                                                return v528;
                                            }
                                        }
                                    }
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v529 = constructor_put_in_gpr(ctx, v59.1);
                                let v530 = RegMemImm::Imm {
                                    simm32: 0x3f_u32,
                                };
                                let v531 = &C::gpr_mem_imm_new(ctx, &v530);
                                let v532 = constructor_x64_and(ctx, I64, v529, v531);
                                let v533 = constructor_lower_i64x2_sshr_gpr(ctx, v93, v532);
                                let v534 = constructor_output_xmm(ctx, v533);
                                let v535 = Some(v534);
                                // Rule at src/isa/x64/lower.isle line 877.
                                return v535;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v59 = C::unpack_value_array_2(ctx, v58);
                            let v476 = constructor_extend_to_gpr(ctx, v59.0, v5, &ExtendKind::Sign);
                            let v420 = &constructor_put_masked_in_imm8_gpr(ctx, v59.1, v5);
                            let v477 = constructor_x64_sar(ctx, v5, v476, v420);
                            let v478 = constructor_output_gpr(ctx, v477);
                            let v479 = Some(v478);
                            // Rule at src/isa/x64/lower.isle line 767.
                            return v479;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1773 = constructor_x64_addss(ctx, v1756, v1772);
                                    let v1774 = constructor_output_xmm(ctx, v1773);
                                    let v1775 = Some(v1774);
                                    // Rule at src/isa/x64/lower.isle line 2612.
                                    return v1775;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1760 = constructor_x64_addss(ctx, v93, v94);
                                let v1761 = constructor_output_xmm(ctx, v1760);
                                let v1762 = Some(v1761);
                                // Rule at src/isa/x64/lower.isle line 2601.
                                return v1762;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1776 = constructor_x64_addsd(ctx, v1756, v1772);
                                    let v1777 = constructor_output_xmm(ctx, v1776);
                                    let v1778 = Some(v1777);
                                    // Rule at src/isa/x64/lower.isle line 2614.
                                    return v1778;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1763 = constructor_x64_addsd(ctx, v93, v94);
                                let v1764 = constructor_output_xmm(ctx, v1763);
                                let v1765 = Some(v1764);
                                // Rule at src/isa/x64/lower.isle line 2603.
                                return v1765;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1779 = constructor_x64_addps(ctx, v1756, v1772);
                                    let v1780 = constructor_output_xmm(ctx, v1779);
                                    let v1781 = Some(v1780);
                                    // Rule at src/isa/x64/lower.isle line 2616.
                                    return v1781;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1766 = constructor_x64_addps(ctx, v93, v94);
                                let v1767 = constructor_output_xmm(ctx, v1766);
                                let v1768 = Some(v1767);
                                // Rule at src/isa/x64/lower.isle line 2605.
                                return v1768;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1782 = constructor_x64_addpd(ctx, v1756, v1772);
                                    let v1783 = constructor_output_xmm(ctx, v1782);
                                    let v1784 = Some(v1783);
                                    // Rule at src/isa/x64/lower.isle line 2618.
                                    return v1784;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1769 = constructor_x64_addpd(ctx, v93, v94);
                                let v1770 = constructor_output_xmm(ctx, v1769);
                                let v1771 = Some(v1770);
                                // Rule at src/isa/x64/lower.isle line 2607.
                                return v1771;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1785 = constructor_x64_subss(ctx, v93, v94);
                                let v1786 = constructor_output_xmm(ctx, v1785);
                                let v1787 = Some(v1786);
                                // Rule at src/isa/x64/lower.isle line 2623.
                                return v1787;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1788 = constructor_x64_subsd(ctx, v93, v94);
                                let v1789 = constructor_output_xmm(ctx, v1788);
                                let v1790 = Some(v1789);
                                // Rule at src/isa/x64/lower.isle line 2625.
                                return v1790;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1791 = constructor_x64_subps(ctx, v93, v94);
                                let v1792 = constructor_output_xmm(ctx, v1791);
                                let v1793 = Some(v1792);
                                // Rule at src/isa/x64/lower.isle line 2627.
                                return v1793;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1794 = constructor_x64_subpd(ctx, v93, v94);
                                let v1795 = constructor_output_xmm(ctx, v1794);
                                let v1796 = Some(v1795);
                                // Rule at src/isa/x64/lower.isle line 2629.
                                return v1796;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1809 = constructor_x64_mulss(ctx, v1756, v1772);
                                    let v1810 = constructor_output_xmm(ctx, v1809);
                                    let v1811 = Some(v1810);
                                    // Rule at src/isa/x64/lower.isle line 2645.
                                    return v1811;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1797 = constructor_x64_mulss(ctx, v93, v94);
                                let v1798 = constructor_output_xmm(ctx, v1797);
                                let v1799 = Some(v1798);
                                // Rule at src/isa/x64/lower.isle line 2634.
                                return v1799;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1812 = constructor_x64_mulsd(ctx, v1756, v1772);
                                    let v1813 = constructor_output_xmm(ctx, v1812);
                                    let v1814 = Some(v1813);
                                    // Rule at src/isa/x64/lower.isle line 2647.
                                    return v1814;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1800 = constructor_x64_mulsd(ctx, v93, v94);
                                let v1801 = constructor_output_xmm(ctx, v1800);
                                let v1802 = Some(v1801);
                                // Rule at src/isa/x64/lower.isle line 2636.
                                return v1802;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1815 = constructor_x64_mulps(ctx, v1756, v1772);
                                    let v1816 = constructor_output_xmm(ctx, v1815);
                                    let v1817 = Some(v1816);
                                    // Rule at src/isa/x64/lower.isle line 2649.
                                    return v1817;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1803 = constructor_x64_mulps(ctx, v93, v94);
                                let v1804 = constructor_output_xmm(ctx, v1803);
                                let v1805 = Some(v1804);
                                // Rule at src/isa/x64/lower.isle line 2638.
                                return v1805;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v82 = &C::sinkable_load(ctx, v59.0);
                                if let Some(v83) = v82 {
                                    let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                    let v1772 = &constructor_sink_load_to_xmm_mem(ctx, v83);
                                    let v1818 = constructor_x64_mulpd(ctx, v1756, v1772);
                                    let v1819 = constructor_output_xmm(ctx, v1818);
                                    let v1820 = Some(v1819);
                                    // Rule at src/isa/x64/lower.isle line 2651.
                                    return v1820;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1806 = constructor_x64_mulpd(ctx, v93, v94);
                                let v1807 = constructor_output_xmm(ctx, v1806);
                                let v1808 = Some(v1807);
                                // Rule at src/isa/x64/lower.isle line 2640.
                                return v1808;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1821 = constructor_x64_divss(ctx, v93, v94);
                                let v1822 = constructor_output_xmm(ctx, v1821);
                                let v1823 = Some(v1822);
                                // Rule at src/isa/x64/lower.isle line 2656.
                                return v1823;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1824 = constructor_x64_divsd(ctx, v93, v94);
                                let v1825 = constructor_output_xmm(ctx, v1824);
                                let v1826 = Some(v1825);
                                // Rule at src/isa/x64/lower.isle line 2658.
                                return v1826;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1827 = constructor_x64_divps(ctx, v93, v94);
                                let v1828 = constructor_output_xmm(ctx, v1827);
                                let v1829 = Some(v1828);
                                // Rule at src/isa/x64/lower.isle line 2660.
                                return v1829;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                let v1830 = constructor_x64_divpd(ctx, v93, v94);
                                let v1831 = constructor_output_xmm(ctx, v1830);
                                let v1832 = Some(v1831);
                                // Rule at src/isa/x64/lower.isle line 2662.
                                return v1832;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == F32 {
                                    let v2895 = constructor_imm(ctx, F32, 0x80000000_u64);
                                    let v2896 = C::xmm_new(ctx, v2895);
                                    let v2897 = &C::put_in_xmm_mem(ctx, v59.0);
                                    let v2898 = constructor_x64_andnps(ctx, v2896, v2897);
                                    let v2899 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2900 = constructor_x64_andps(ctx, v2896, v2899);
                                    let v2901 = &C::xmm_to_xmm_mem(ctx, v2900);
                                    let v2902 = constructor_x64_orps(ctx, v2898, v2901);
                                    let v2903 = constructor_output_xmm(ctx, v2902);
                                    let v2904 = Some(v2903);
                                    // Rule at src/isa/x64/lower.isle line 4209.
                                    return v2904;
                                }
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == F64 {
                                    let v2905 = constructor_imm(ctx, F64, 0x8000000000000000_u64);
                                    let v2906 = C::xmm_new(ctx, v2905);
                                    let v2897 = &C::put_in_xmm_mem(ctx, v59.0);
                                    let v2907 = constructor_x64_andnpd(ctx, v2906, v2897);
                                    let v2899 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2908 = constructor_x64_andpd(ctx, v2906, v2899);
                                    let v2909 = &C::xmm_to_xmm_mem(ctx, v2908);
                                    let v2910 = constructor_x64_orpd(ctx, v2907, v2909);
                                    let v2911 = constructor_output_xmm(ctx, v2910);
                                    let v2912 = Some(v2911);
                                    // Rule at src/isa/x64/lower.isle line 4215.
                                    return v2912;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v182 = true;
                                let v1863 = constructor_xmm_min_max_seq(ctx, F32, v182, v93, v660);
                                let v1864 = constructor_output_xmm(ctx, v1863);
                                let v1865 = Some(v1864);
                                // Rule at src/isa/x64/lower.isle line 2693.
                                return v1865;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v182 = true;
                                let v1866 = constructor_xmm_min_max_seq(ctx, F64, v182, v93, v660);
                                let v1867 = constructor_output_xmm(ctx, v1866);
                                let v1868 = Some(v1867);
                                // Rule at src/isa/x64/lower.isle line 2695.
                                return v1868;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v1870 = constructor_x64_minps(ctx, v93, v1869);
                                let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1871 = constructor_x64_minps(ctx, v660, v485);
                                let v1872 = &C::xmm_to_xmm_mem(ctx, v1871);
                                let v1873 = constructor_x64_orps(ctx, v1870, v1872);
                                let v1874 = &C::xmm_to_xmm_mem(ctx, v1871);
                                let v1875 = constructor_x64_cmpps(ctx, v1873, v1874, &FcmpImm::Unordered);
                                let v1876 = &C::xmm_to_xmm_mem(ctx, v1875);
                                let v1877 = constructor_x64_orps(ctx, v1873, v1876);
                                let v1879 = &C::xmi_imm(ctx, 0xa_u32);
                                let v1880 = constructor_x64_psrld(ctx, v1875, v1879);
                                let v1881 = &C::xmm_to_xmm_mem(ctx, v1877);
                                let v1882 = constructor_x64_andnps(ctx, v1880, v1881);
                                let v1883 = constructor_output_xmm(ctx, v1882);
                                let v1884 = Some(v1883);
                                // Rule at src/isa/x64/lower.isle line 2710.
                                return v1884;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v1885 = constructor_x64_minpd(ctx, v93, v1869);
                                let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1886 = constructor_x64_minpd(ctx, v660, v485);
                                let v1887 = &C::xmm_to_xmm_mem(ctx, v1886);
                                let v1888 = constructor_x64_orpd(ctx, v1885, v1887);
                                let v1889 = &C::xmm_to_xmm_mem(ctx, v1886);
                                let v1890 = constructor_x64_cmppd(ctx, v1885, v1889, &FcmpImm::Unordered);
                                let v1891 = &C::xmm_to_xmm_mem(ctx, v1890);
                                let v1892 = constructor_x64_orpd(ctx, v1888, v1891);
                                let v1894 = &C::xmi_imm(ctx, 0xd_u32);
                                let v1895 = constructor_x64_psrlq(ctx, v1890, v1894);
                                let v1896 = &C::xmm_to_xmm_mem(ctx, v1892);
                                let v1897 = constructor_x64_andnpd(ctx, v1895, v1896);
                                let v1898 = constructor_output_xmm(ctx, v1897);
                                let v1899 = Some(v1898);
                                // Rule at src/isa/x64/lower.isle line 2755.
                                return v1899;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v172 = false;
                                let v1900 = constructor_xmm_min_max_seq(ctx, F32, v172, v93, v660);
                                let v1901 = constructor_output_xmm(ctx, v1900);
                                let v1902 = Some(v1901);
                                // Rule at src/isa/x64/lower.isle line 2769.
                                return v1902;
                            }
                            F64 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v172 = false;
                                let v1903 = constructor_xmm_min_max_seq(ctx, F64, v172, v93, v660);
                                let v1904 = constructor_output_xmm(ctx, v1903);
                                let v1905 = Some(v1904);
                                // Rule at src/isa/x64/lower.isle line 2771.
                                return v1905;
                            }
                            F32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v1906 = constructor_x64_maxps(ctx, v93, v1869);
                                let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1907 = constructor_x64_maxps(ctx, v660, v485);
                                let v1908 = &C::xmm_to_xmm_mem(ctx, v1907);
                                let v1909 = constructor_x64_xorps(ctx, v1906, v1908);
                                let v1910 = &C::xmm_to_xmm_mem(ctx, v1909);
                                let v1911 = constructor_x64_orps(ctx, v1906, v1910);
                                let v1912 = &C::xmm_to_xmm_mem(ctx, v1909);
                                let v1913 = constructor_x64_subps(ctx, v1911, v1912);
                                let v1914 = &C::xmm_to_xmm_mem(ctx, v1911);
                                let v1915 = constructor_x64_cmpps(ctx, v1911, v1914, &FcmpImm::Unordered);
                                let v1916 = &C::xmi_imm(ctx, 0xa_u32);
                                let v1917 = constructor_x64_psrld(ctx, v1915, v1916);
                                let v1918 = &C::xmm_to_xmm_mem(ctx, v1913);
                                let v1919 = constructor_x64_andnps(ctx, v1917, v1918);
                                let v1920 = constructor_output_xmm(ctx, v1919);
                                let v1921 = Some(v1920);
                                // Rule at src/isa/x64/lower.isle line 2777.
                                return v1921;
                            }
                            F64X2 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v1922 = constructor_x64_maxpd(ctx, v93, v1869);
                                let v485 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v1923 = constructor_x64_maxpd(ctx, v660, v485);
                                let v1924 = &C::xmm_to_xmm_mem(ctx, v1923);
                                let v1925 = constructor_x64_xorpd(ctx, v1922, v1924);
                                let v1926 = &C::xmm_to_xmm_mem(ctx, v1925);
                                let v1927 = constructor_x64_orpd(ctx, v1922, v1926);
                                let v1928 = &C::xmm_to_xmm_mem(ctx, v1925);
                                let v1929 = constructor_x64_subpd(ctx, v1927, v1928);
                                let v1930 = &C::xmm_to_xmm_mem(ctx, v1927);
                                let v1931 = constructor_x64_cmppd(ctx, v1927, v1930, &FcmpImm::Unordered);
                                let v1932 = &C::xmi_imm(ctx, 0xd_u32);
                                let v1933 = constructor_x64_psrlq(ctx, v1931, v1932);
                                let v1934 = &C::xmm_to_xmm_mem(ctx, v1929);
                                let v1935 = constructor_x64_andnpd(ctx, v1933, v1934);
                                let v1936 = constructor_output_xmm(ctx, v1935);
                                let v1937 = Some(v1936);
                                // Rule at src/isa/x64/lower.isle line 2822.
                                return v1937;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == I16X8 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2832 = constructor_x64_packsswb(ctx, v93, v94);
                                    let v2833 = constructor_output_xmm(ctx, v2832);
                                    let v2834 = Some(v2833);
                                    // Rule at src/isa/x64/lower.isle line 4093.
                                    return v2834;
                                }
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == I32X4 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2835 = constructor_x64_packssdw(ctx, v93, v94);
                                    let v2836 = constructor_output_xmm(ctx, v2835);
                                    let v2837 = Some(v2836);
                                    // Rule at src/isa/x64/lower.isle line 4096.
                                    return v2837;
                                }
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data(ctx, v121);
                                    if let &InstructionData::UnaryConst {
                                        opcode: ref v2841,
                                        constant_handle: v2842,
                                    } = v122 {
                                        if let &Opcode::Vconst = v2841 {
                                            let v266 = C::def_inst(ctx, v59.0);
                                            if let Some(v267) = v266 {
                                                let v268 = &C::inst_data(ctx, v267);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v269,
                                                    arg: v270,
                                                } = v268 {
                                                    match v269 {
                                                        &Opcode::FcvtToSintSat => {
                                                            let v2838 = C::first_result(ctx, v267);
                                                            if let Some(v2839) = v2838 {
                                                                let v2840 = C::value_type(ctx, v2839);
                                                                if v2840 == I64X2 {
                                                                    let v2843 = C::u128_from_constant(ctx, v2842);
                                                                    if let Some(v2844) = v2843 {
                                                                        if v2844 == 0x0_u128 {
                                                                            let v271 = constructor_put_in_xmm(ctx, v270);
                                                                            let v2845 = &C::xmm_to_xmm_mem(ctx, v271);
                                                                            let v2846 = constructor_x64_cmppd(ctx, v271, v2845, &FcmpImm::Equal);
                                                                            let v2848 = C::emit_u128_le_const(ctx, 0x41dfffffffc0000041dfffffffc00000_u128);
                                                                            let v2849 = &constructor_const_to_xmm_mem(ctx, v2848);
                                                                            let v2850 = constructor_x64_andps(ctx, v2846, v2849);
                                                                            let v2851 = &C::xmm_to_xmm_mem(ctx, v2850);
                                                                            let v2852 = constructor_x64_minpd(ctx, v271, v2851);
                                                                            let v2853 = &C::xmm_to_xmm_mem(ctx, v2852);
                                                                            let v2854 = constructor_x64_cvttpd2dq(ctx, v2853);
                                                                            let v2855 = constructor_output_xmm(ctx, v2854);
                                                                            let v2856 = Some(v2855);
                                                                            // Rule at src/isa/x64/lower.isle line 4105.
                                                                            return v2856;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::X86Cvtt2dq => {
                                                            let v2838 = C::first_result(ctx, v267);
                                                            if let Some(v2839) = v2838 {
                                                                let v2840 = C::value_type(ctx, v2839);
                                                                if v2840 == I64X2 {
                                                                    let v2843 = C::u128_from_constant(ctx, v2842);
                                                                    if let Some(v2844) = v2843 {
                                                                        if v2844 == 0x0_u128 {
                                                                            let v717 = &C::put_in_xmm_mem(ctx, v270);
                                                                            let v2857 = constructor_x64_cvttpd2dq(ctx, v717);
                                                                            let v2858 = constructor_output_xmm(ctx, v2857);
                                                                            let v2859 = Some(v2858);
                                                                            // Rule at src/isa/x64/lower.isle line 4129.
                                                                            return v2859;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == I16X8 {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2860 = constructor_x64_packuswb(ctx, v93, v94);
                                    let v2861 = constructor_output_xmm(ctx, v2860);
                                    let v2862 = Some(v2861);
                                    // Rule at src/isa/x64/lower.isle line 4135.
                                    return v2862;
                                }
                            }
                            I16X8 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2831 = C::value_type(ctx, v59.0);
                                if v2831 == I32X4 {
                                    let v656 = C::use_sse41(ctx);
                                    if v656 == true {
                                        let v93 = constructor_put_in_xmm(ctx, v59.0);
                                        let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                        let v2863 = constructor_x64_packusdw(ctx, v93, v94);
                                        let v2864 = constructor_output_xmm(ctx, v2863);
                                        let v2865 = Some(v2864);
                                        // Rule at src/isa/x64/lower.isle line 4138.
                                        return v2865;
                                    }
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v2866 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v93);
                                    let v2867 = constructor_put_in_xmm(ctx, v59.1);
                                    let v2868 = constructor_unarrow_i32x4_lanes_to_low_u16_lanes(ctx, v2867);
                                    let v2869 = &C::xmm_to_xmm_mem(ctx, v2868);
                                    let v2870 = constructor_x64_punpcklqdq(ctx, v2866, v2869);
                                    let v2871 = constructor_output_xmm(ctx, v2870);
                                    let v2872 = Some(v2871);
                                    // Rule at src/isa/x64/lower.isle line 4148.
                                    return v2872;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v120 = C::def_inst(ctx, v59.1);
                    if let Some(v121) = v120 {
                        let v122 = &C::inst_data(ctx, v121);
                        if let &InstructionData::UnaryConst {
                            opcode: ref v2841,
                            constant_handle: v2842,
                        } = v122 {
                            if let &Opcode::Vconst = v2841 {
                                let v266 = C::def_inst(ctx, v59.0);
                                if let Some(v267) = v266 {
                                    let v268 = &C::inst_data(ctx, v267);
                                    if let &InstructionData::Unary {
                                        opcode: ref v269,
                                        arg: v270,
                                    } = v268 {
                                        if let &Opcode::FcvtToUintSat = v269 {
                                            let v646 = C::value_type(ctx, v270);
                                            if v646 == F64X2 {
                                                let v2843 = C::u128_from_constant(ctx, v2842);
                                                if let Some(v2844) = v2843 {
                                                    if v2844 == 0x0_u128 {
                                                        let v271 = constructor_put_in_xmm(ctx, v270);
                                                        let v2504 = constructor_xmm_zero(ctx, F64X2);
                                                        let v3420 = &C::xmm_to_xmm_mem(ctx, v2504);
                                                        let v3421 = constructor_x64_maxpd(ctx, v271, v3420);
                                                        let v3423 = C::emit_u128_le_const(ctx, 0x41efffffffe0000041efffffffe00000_u128);
                                                        let v3424 = &constructor_const_to_xmm_mem(ctx, v3423);
                                                        let v3425 = constructor_x64_minpd(ctx, v3421, v3424);
                                                        let v3426 = C::xmm_to_reg(ctx, v3425);
                                                        let v3427 = &constructor_xmm_to_reg_mem(ctx, v3426);
                                                        let v3428 = &C::xmm_mem_to_reg_mem(ctx, v3427);
                                                        let v3429 = constructor_x64_round(ctx, F64X2, v3428, &RoundImm::RoundZero);
                                                        let v3430 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                                        let v3431 = &constructor_const_to_xmm_mem(ctx, v3430);
                                                        let v3432 = constructor_x64_addpd(ctx, v3429, v3431);
                                                        let v3433 = &C::xmm_to_xmm_mem(ctx, v2504);
                                                        let v3434 = constructor_x64_shufps(ctx, v3432, v3433, 0x88_u8);
                                                        let v3435 = constructor_output_xmm(ctx, v3434);
                                                        let v3436 = Some(v3435);
                                                        // Rule at src/isa/x64/lower.isle line 4985.
                                                        return v3436;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v2654 = C::emit_u128_le_const(ctx, 0xff00ff00ff00ff00ff00ff00ff00ff_u128);
                                let v2655 = &constructor_const_to_xmm_mem(ctx, v2654);
                                let v2656 = constructor_x64_movdqu_load(ctx, v2655);
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v2657 = constructor_put_in_xmm(ctx, v59.0);
                                let v2658 = &C::xmm_to_xmm_mem(ctx, v2656);
                                let v2659 = constructor_x64_pand(ctx, v2657, v2658);
                                let v2660 = constructor_put_in_xmm(ctx, v59.1);
                                let v2661 = &C::xmm_to_xmm_mem(ctx, v2656);
                                let v2662 = constructor_x64_pand(ctx, v2660, v2661);
                                let v2663 = &C::xmm_to_xmm_mem(ctx, v2662);
                                let v2664 = constructor_x64_packuswb(ctx, v2659, v2663);
                                let v2665 = constructor_put_in_xmm(ctx, v59.0);
                                let v2667 = &C::xmi_imm(ctx, 0x8_u32);
                                let v2668 = constructor_x64_psrlw(ctx, v2665, v2667);
                                let v2669 = constructor_put_in_xmm(ctx, v59.1);
                                let v2670 = &C::xmi_imm(ctx, 0x8_u32);
                                let v2671 = constructor_x64_psrlw(ctx, v2669, v2670);
                                let v2672 = &C::xmm_to_xmm_mem(ctx, v2671);
                                let v2673 = constructor_x64_packuswb(ctx, v2668, v2672);
                                let v2674 = &C::xmm_to_xmm_mem(ctx, v2673);
                                let v2675 = constructor_x64_paddb(ctx, v2664, v2674);
                                let v2676 = constructor_output_xmm(ctx, v2675);
                                let v2677 = Some(v2676);
                                // Rule at src/isa/x64/lower.isle line 3882.
                                return v2677;
                            }
                            I16X8 => {
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v59 = C::unpack_value_array_2(ctx, v58);
                                    let v120 = C::def_inst(ctx, v59.1);
                                    if let Some(v121) = v120 {
                                        let v122 = &C::inst_data(ctx, v121);
                                        if let &InstructionData::Unary {
                                            opcode: ref v137,
                                            arg: v138,
                                        } = v122 {
                                            match v137 {
                                                &Opcode::SwidenHigh => {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::SwidenLow = v269 {
                                                                if v138 == v270 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    if v646 == I8X16 {
                                                                        let v2717 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101_u128);
                                                                        let v2718 = constructor_x64_xmm_load_const(ctx, I8X16, v2717);
                                                                        let v2719 = &C::put_in_xmm_mem(ctx, v270);
                                                                        let v2720 = constructor_x64_pmaddubsw(ctx, v2718, v2719);
                                                                        let v2721 = constructor_output_xmm(ctx, v2720);
                                                                        let v2722 = Some(v2721);
                                                                        // Rule at src/isa/x64/lower.isle line 3944.
                                                                        return v2722;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::UwidenLow = v269 {
                                                                if v138 == v270 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    if v646 == I8X16 {
                                                                        let v2717 = C::emit_u128_le_const(ctx, 0x1010101010101010101010101010101_u128);
                                                                        let v2730 = &constructor_const_to_xmm_mem(ctx, v2717);
                                                                        let v2726 = constructor_put_in_xmm(ctx, v270);
                                                                        let v2731 = constructor_x64_pmaddubsw(ctx, v2726, v2730);
                                                                        let v2732 = constructor_output_xmm(ctx, v2731);
                                                                        let v2733 = Some(v2732);
                                                                        // Rule at src/isa/x64/lower.isle line 3962.
                                                                        return v2733;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                    }
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2678 = constructor_x64_phaddw(ctx, v93, v94);
                                    let v2679 = constructor_output_xmm(ctx, v2678);
                                    let v2680 = Some(v2679);
                                    // Rule at src/isa/x64/lower.isle line 3898.
                                    return v2680;
                                }
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v483 = &C::xmm_to_xmm_mem(ctx, v93);
                                let v2682 = constructor_x64_pshuflw(ctx, v483, 0xe8_u8);
                                let v2683 = &C::xmm_to_xmm_mem(ctx, v2682);
                                let v2684 = constructor_x64_pshufhw(ctx, v2683, 0xe8_u8);
                                let v2685 = &C::xmm_to_xmm_mem(ctx, v2684);
                                let v2686 = constructor_x64_pshufd(ctx, v2685, 0xe8_u8);
                                let v2687 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v2688 = constructor_x64_pshuflw(ctx, v2687, 0xe8_u8);
                                let v2689 = &C::xmm_to_xmm_mem(ctx, v2688);
                                let v2690 = constructor_x64_pshufhw(ctx, v2689, 0xe8_u8);
                                let v2691 = &C::xmm_to_xmm_mem(ctx, v2690);
                                let v2692 = constructor_x64_pshufd(ctx, v2691, 0xe8_u8);
                                let v2693 = &C::xmm_to_xmm_mem(ctx, v2692);
                                let v2694 = constructor_x64_punpcklqdq(ctx, v2686, v2693);
                                let v2695 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2696 = constructor_x64_psrad(ctx, v93, v2695);
                                let v2697 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2698 = constructor_x64_psrad(ctx, v660, v2697);
                                let v2699 = &C::xmm_to_xmm_mem(ctx, v2698);
                                let v2700 = constructor_x64_packssdw(ctx, v2696, v2699);
                                let v2701 = &C::xmm_to_xmm_mem(ctx, v2700);
                                let v2702 = constructor_x64_paddw(ctx, v2694, v2701);
                                let v2703 = constructor_output_xmm(ctx, v2702);
                                let v2704 = Some(v2703);
                                // Rule at src/isa/x64/lower.isle line 3902.
                                return v2704;
                            }
                            I32X4 => {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v120 = C::def_inst(ctx, v59.1);
                                if let Some(v121) = v120 {
                                    let v122 = &C::inst_data(ctx, v121);
                                    match v122 {
                                        &InstructionData::Binary {
                                            opcode: ref v123,
                                            args: ref v124,
                                        } => {
                                            if let &Opcode::Imul = v123 {
                                                let v266 = C::def_inst(ctx, v59.0);
                                                if let Some(v267) = v266 {
                                                    let v268 = &C::inst_data(ctx, v267);
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v350,
                                                        args: ref v351,
                                                    } = v268 {
                                                        if let &Opcode::Imul = v350 {
                                                            let v352 = C::unpack_value_array_2(ctx, v351);
                                                            let v355 = C::def_inst(ctx, v352.1);
                                                            if let Some(v356) = v355 {
                                                                let v357 = &C::inst_data(ctx, v356);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v2752,
                                                                    arg: v2753,
                                                                } = v357 {
                                                                    if let &Opcode::SwidenLow = v2752 {
                                                                        let v125 = C::unpack_value_array_2(ctx, v124);
                                                                        let v362 = C::def_inst(ctx, v125.1);
                                                                        if let Some(v363) = v362 {
                                                                            let v364 = &C::inst_data(ctx, v363);
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v2759,
                                                                                arg: v2760,
                                                                            } = v364 {
                                                                                if let &Opcode::SwidenHigh = v2759 {
                                                                                    if v2753 == v2760 {
                                                                                        let v2747 = C::def_inst(ctx, v352.0);
                                                                                        if let Some(v2748) = v2747 {
                                                                                            let v2749 = &C::inst_data(ctx, v2748);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v2750,
                                                                                                arg: v2751,
                                                                                            } = v2749 {
                                                                                                if let &Opcode::SwidenLow = v2750 {
                                                                                                    let v2754 = C::def_inst(ctx, v125.0);
                                                                                                    if let Some(v2755) = v2754 {
                                                                                                        let v2756 = &C::inst_data(ctx, v2755);
                                                                                                        if let &InstructionData::Unary {
                                                                                                            opcode: ref v2757,
                                                                                                            arg: v2758,
                                                                                                        } = v2756 {
                                                                                                            if let &Opcode::SwidenHigh = v2757 {
                                                                                                                if v2751 == v2758 {
                                                                                                                    let v2761 = constructor_put_in_xmm(ctx, v2751);
                                                                                                                    let v2762 = &C::put_in_xmm_mem(ctx, v2753);
                                                                                                                    let v2763 = constructor_x64_pmaddwd(ctx, v2761, v2762);
                                                                                                                    let v2764 = constructor_output_xmm(ctx, v2763);
                                                                                                                    let v2765 = Some(v2764);
                                                                                                                    // Rule at src/isa/x64/lower.isle line 3985.
                                                                                                                    return v2765;
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &InstructionData::Unary {
                                            opcode: ref v137,
                                            arg: v138,
                                        } => {
                                            match v137 {
                                                &Opcode::SwidenHigh => {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::SwidenLow = v269 {
                                                                if v138 == v270 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    if v646 == I16X8 {
                                                                        let v2724 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001_u128);
                                                                        let v2725 = &constructor_const_to_xmm_mem(ctx, v2724);
                                                                        let v2726 = constructor_put_in_xmm(ctx, v270);
                                                                        let v2727 = constructor_x64_pmaddwd(ctx, v2726, v2725);
                                                                        let v2728 = constructor_output_xmm(ctx, v2727);
                                                                        let v2729 = Some(v2728);
                                                                        // Rule at src/isa/x64/lower.isle line 3954.
                                                                        return v2729;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &Opcode::UwidenHigh => {
                                                    let v266 = C::def_inst(ctx, v59.0);
                                                    if let Some(v267) = v266 {
                                                        let v268 = &C::inst_data(ctx, v267);
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v269,
                                                            arg: v270,
                                                        } = v268 {
                                                            if let &Opcode::UwidenLow = v269 {
                                                                if v138 == v270 {
                                                                    let v646 = C::value_type(ctx, v270);
                                                                    if v646 == I16X8 {
                                                                        let v2735 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
                                                                        let v2736 = &constructor_const_to_xmm_mem(ctx, v2735);
                                                                        let v2726 = constructor_put_in_xmm(ctx, v270);
                                                                        let v2737 = constructor_x64_pxor(ctx, v2726, v2736);
                                                                        let v2738 = C::emit_u128_le_const(ctx, 0x10001000100010001000100010001_u128);
                                                                        let v2739 = &constructor_const_to_xmm_mem(ctx, v2738);
                                                                        let v2740 = constructor_x64_pmaddwd(ctx, v2737, v2739);
                                                                        let v2742 = C::emit_u128_le_const(ctx, 0x10000000100000001000000010000_u128);
                                                                        let v2743 = &constructor_const_to_xmm_mem(ctx, v2742);
                                                                        let v2744 = constructor_x64_paddd(ctx, v2740, v2743);
                                                                        let v2745 = constructor_output_xmm(ctx, v2744);
                                                                        let v2746 = Some(v2745);
                                                                        // Rule at src/isa/x64/lower.isle line 3971.
                                                                        return v2746;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v93 = constructor_put_in_xmm(ctx, v59.0);
                                    let v94 = &C::put_in_xmm_mem(ctx, v59.1);
                                    let v2705 = constructor_x64_phaddd(ctx, v93, v94);
                                    let v2706 = constructor_output_xmm(ctx, v2705);
                                    let v2707 = Some(v2706);
                                    // Rule at src/isa/x64/lower.isle line 3928.
                                    return v2707;
                                }
                                let v93 = constructor_put_in_xmm(ctx, v59.0);
                                let v660 = constructor_put_in_xmm(ctx, v59.1);
                                let v1869 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v2709 = constructor_x64_shufps(ctx, v93, v1869, 0x88_u8);
                                let v663 = &C::xmm_to_xmm_mem(ctx, v660);
                                let v2711 = constructor_x64_shufps(ctx, v93, v663, 0xdd_u8);
                                let v2712 = &C::xmm_to_xmm_mem(ctx, v2711);
                                let v2713 = constructor_x64_paddd(ctx, v2709, v2712);
                                let v2714 = constructor_output_xmm(ctx, v2713);
                                let v2715 = Some(v2714);
                                // Rule at src/isa/x64/lower.isle line 3932.
                                return v2715;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::X86Pmaddubsw => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v750 = C::use_ssse3(ctx);
                            if v750 == true {
                                let v59 = C::unpack_value_array_2(ctx, v58);
                                let v1756 = constructor_put_in_xmm(ctx, v59.1);
                                let v262 = &C::put_in_xmm_mem(ctx, v59.0);
                                let v1757 = constructor_x64_pmaddubsw(ctx, v1756, v262);
                                let v1758 = constructor_output_xmm(ctx, v1757);
                                let v1759 = Some(v1758);
                                // Rule at src/isa/x64/lower.isle line 2595.
                                return v1759;
                            }
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v59 = C::unpack_value_array_2(ctx, v58);
                    let v2831 = C::value_type(ctx, v59.0);
                    if v2831 == I64 {
                        let v3365 = C::put_in_reg(ctx, v59.0);
                        let v3366 = C::put_in_reg(ctx, v59.1);
                        let v3367 = C::value_regs(ctx, v3365, v3366);
                        let v3368 = C::output(ctx, v3367);
                        let v3369 = Some(v3368);
                        // Rule at src/isa/x64/lower.isle line 4901.
                        return v3369;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v3182,
            arg: v3183,
            imm: v3184,
        } => {
            if let &Opcode::Extractlane = v3182 {
                if v3184 == 0x0 {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v3185 = constructor_output_value(ctx, v3183);
                            let v3186 = Some(v3185);
                            // Rule at src/isa/x64/lower.isle line 4656.
                            return v3186;
                        }
                    }
                }
                let v3187 = C::value_type(ctx, v3183);
                match v3187 {
                    I8X16 => {
                        let v656 = C::use_sse41(ctx);
                        if v656 == true {
                            let v3196 = constructor_put_in_xmm(ctx, v3183);
                            let v3188 = C::u8_from_uimm8(ctx, v3184);
                            let v3197 = constructor_x64_pextrb(ctx, v3196, v3188);
                            let v3198 = constructor_output_gpr(ctx, v3197);
                            let v3199 = Some(v3198);
                            // Rule at src/isa/x64/lower.isle line 4671.
                            return v3199;
                        }
                        let v3188 = C::u8_from_uimm8(ctx, v3184);
                        let v3200 = C::u8_and(ctx, v3188, 0x1_u8);
                        match v3200 {
                            0x0_u8 => {
                                let v3196 = constructor_put_in_xmm(ctx, v3183);
                                let v3201 = C::u8_shr(ctx, v3188, 0x1_u8);
                                let v3202 = constructor_x64_pextrw(ctx, v3196, v3201);
                                let v3207 = constructor_output_gpr(ctx, v3202);
                                let v3208 = Some(v3207);
                                // Rule at src/isa/x64/lower.isle line 4682.
                                return v3208;
                            }
                            0x1_u8 => {
                                let v3196 = constructor_put_in_xmm(ctx, v3183);
                                let v3201 = C::u8_shr(ctx, v3188, 0x1_u8);
                                let v3202 = constructor_x64_pextrw(ctx, v3196, v3201);
                                let v1707 = Imm8Reg::Imm8 {
                                    imm: 0x8_u8,
                                };
                                let v3203 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                                let v3204 = constructor_x64_shr(ctx, I16, v3202, v3203);
                                let v3205 = constructor_output_gpr(ctx, v3204);
                                let v3206 = Some(v3205);
                                // Rule at src/isa/x64/lower.isle line 4675.
                                return v3206;
                            }
                            _ => {}
                        }
                    }
                    I16X8 => {
                        let v3196 = constructor_put_in_xmm(ctx, v3183);
                        let v3188 = C::u8_from_uimm8(ctx, v3184);
                        let v3209 = constructor_x64_pextrw(ctx, v3196, v3188);
                        let v3210 = constructor_output_gpr(ctx, v3209);
                        let v3211 = Some(v3210);
                        // Rule at src/isa/x64/lower.isle line 4687.
                        return v3211;
                    }
                    I32X4 => {
                        let v656 = C::use_sse41(ctx);
                        if v656 == true {
                            let v3196 = constructor_put_in_xmm(ctx, v3183);
                            let v3188 = C::u8_from_uimm8(ctx, v3184);
                            let v3212 = constructor_x64_pextrd(ctx, v3196, v3188);
                            let v3213 = constructor_output_gpr(ctx, v3212);
                            let v3214 = Some(v3213);
                            // Rule at src/isa/x64/lower.isle line 4691.
                            return v3214;
                        }
                        if v3184 == 0x0 {
                            let v3196 = constructor_put_in_xmm(ctx, v3183);
                            let v3215 = constructor_x64_movd_to_gpr(ctx, v3196);
                            let v3216 = constructor_output_gpr(ctx, v3215);
                            let v3217 = Some(v3216);
                            // Rule at src/isa/x64/lower.isle line 4694.
                            return v3217;
                        }
                        let v3189 = &C::put_in_xmm_mem(ctx, v3183);
                        let v3188 = C::u8_from_uimm8(ctx, v3184);
                        let v3190 = constructor_x64_pshufd(ctx, v3189, v3188);
                        let v3218 = constructor_x64_movd_to_gpr(ctx, v3190);
                        let v3219 = constructor_output_gpr(ctx, v3218);
                        let v3220 = Some(v3219);
                        // Rule at src/isa/x64/lower.isle line 4696.
                        return v3220;
                    }
                    I64X2 => {
                        let v656 = C::use_sse41(ctx);
                        if v656 == true {
                            let v3196 = constructor_put_in_xmm(ctx, v3183);
                            let v3188 = C::u8_from_uimm8(ctx, v3184);
                            let v3221 = constructor_x64_pextrq(ctx, v3196, v3188);
                            let v3222 = constructor_output_gpr(ctx, v3221);
                            let v3223 = Some(v3222);
                            // Rule at src/isa/x64/lower.isle line 4700.
                            return v3223;
                        }
                        match v3184 {
                            0x0 => {
                                let v3196 = constructor_put_in_xmm(ctx, v3183);
                                let v3224 = constructor_x64_movq_to_gpr(ctx, v3196);
                                let v3225 = constructor_output_gpr(ctx, v3224);
                                let v3226 = Some(v3225);
                                // Rule at src/isa/x64/lower.isle line 4703.
                                return v3226;
                            }
                            0x1 => {
                                let v3189 = &C::put_in_xmm_mem(ctx, v3183);
                                let v3227 = constructor_x64_pshufd(ctx, v3189, 0xe_u8);
                                let v3228 = constructor_x64_movq_to_gpr(ctx, v3227);
                                let v3229 = constructor_output_gpr(ctx, v3228);
                                let v3230 = Some(v3229);
                                // Rule at src/isa/x64/lower.isle line 4705.
                                return v3230;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v3189 = &C::put_in_xmm_mem(ctx, v3183);
                        let v3188 = C::u8_from_uimm8(ctx, v3184);
                        let v3190 = constructor_x64_pshufd(ctx, v3189, v3188);
                        let v3191 = constructor_output_xmm(ctx, v3190);
                        let v3192 = Some(v3191);
                        // Rule at src/isa/x64/lower.isle line 4660.
                        return v3192;
                    }
                    F64X2 => {
                        if v3184 == 0x1 {
                            let v3189 = &C::put_in_xmm_mem(ctx, v3183);
                            let v3193 = constructor_x64_pshufd(ctx, v3189, 0xee_u8);
                            let v3194 = constructor_output_xmm(ctx, v3193);
                            let v3195 = Some(v3194);
                            // Rule at src/isa/x64/lower.isle line 4664.
                            return v3195;
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2430,
            args: v2431,
            func_ref: v2432,
        } => {
            match v2430 {
                &Opcode::Call => {
                    let v2434 = C::func_ref_data(ctx, v2432);
                    let v2433 = C::value_list_slice(ctx, v2431);
                    let v2438 = C::gen_call(ctx, v2434.0, v2434.1, v2434.2, v2433);
                    let v2439 = Some(v2438);
                    // Rule at src/isa/x64/lower.isle line 3463.
                    return v2439;
                }
                &Opcode::ReturnCall => {
                    let v2434 = C::func_ref_data(ctx, v2432);
                    let v2433 = C::value_list_slice(ctx, v2431);
                    let v2450 = C::gen_return_call(ctx, v2434.0, v2434.1, v2434.2, v2433);
                    let v2451 = Some(v2450);
                    // Rule at src/isa/x64/lower.isle line 3471.
                    return v2451;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2440,
            args: v2441,
            sig_ref: v2442,
        } => {
            match v2440 {
                &Opcode::CallIndirect => {
                    let v2443 = C::value_list_slice(ctx, v2441);
                    let v2444 = C::value_slice_unwrap(ctx, v2443);
                    if let Some(v2445) = v2444 {
                        let v2448 = C::gen_call_indirect(ctx, v2442, v2445.0, v2445.1);
                        let v2449 = Some(v2448);
                        // Rule at src/isa/x64/lower.isle line 3466.
                        return v2449;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2443 = C::value_list_slice(ctx, v2441);
                    let v2444 = C::value_slice_unwrap(ctx, v2443);
                    if let Some(v2445) = v2444 {
                        let v2452 = C::gen_return_call_indirect(ctx, v2442, v2445.0, v2445.1);
                        let v2453 = Some(v2452);
                        // Rule at src/isa/x64/lower.isle line 3474.
                        return v2453;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v1196,
            arg: v1197,
            code: ref v1198,
        } => {
            match v1196 {
                &Opcode::Trapz => {
                    let v1203 = C::def_inst(ctx, v1197);
                    if let Some(v1204) = v1203 {
                        let v1205 = &C::inst_data(ctx, v1204);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1206,
                            args: ref v1207,
                            cond: ref v1208,
                        } = v1205 {
                            if let &Opcode::Icmp = v1206 {
                                let v1212 = &C::intcc_complement(ctx, v1208);
                                let v1209 = C::unpack_value_array_2(ctx, v1207);
                                let v1213 = &constructor_emit_cmp(ctx, v1212, v1209.0, v1209.1);
                                let v1214 = &constructor_trap_if_icmp(ctx, v1213, v1198);
                                let v1215 = constructor_side_effect(ctx, v1214);
                                let v1216 = Some(v1215);
                                // Rule at src/isa/x64/lower.isle line 1885.
                                return v1216;
                            }
                        }
                    }
                    let v1200 = &constructor_trap_if_val(ctx, &ZeroCond::Zero, v1197, v1198);
                    let v1201 = constructor_side_effect(ctx, v1200);
                    let v1202 = Some(v1201);
                    // Rule at src/isa/x64/lower.isle line 1882.
                    return v1202;
                }
                &Opcode::Trapnz => {
                    let v1203 = C::def_inst(ctx, v1197);
                    if let Some(v1204) = v1203 {
                        let v1205 = &C::inst_data(ctx, v1204);
                        if let &InstructionData::IntCompare {
                            opcode: ref v1206,
                            args: ref v1207,
                            cond: ref v1208,
                        } = v1205 {
                            if let &Opcode::Icmp = v1206 {
                                let v1209 = C::unpack_value_array_2(ctx, v1207);
                                let v1221 = &constructor_emit_cmp(ctx, v1208, v1209.0, v1209.1);
                                let v1222 = &constructor_trap_if_icmp(ctx, v1221, v1198);
                                let v1223 = constructor_side_effect(ctx, v1222);
                                let v1224 = Some(v1223);
                                // Rule at src/isa/x64/lower.isle line 1893.
                                return v1224;
                            }
                        }
                    }
                    let v1218 = &constructor_trap_if_val(ctx, &ZeroCond::NonZero, v1197, v1198);
                    let v1219 = constructor_side_effect(ctx, v1218);
                    let v1220 = Some(v1219);
                    // Rule at src/isa/x64/lower.isle line 1890.
                    return v1220;
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1421,
            args: ref v1422,
            cond: ref v1423,
        } => {
            if let &Opcode::Fcmp = v1421 {
                match v1423 {
                    &FloatCC::Equal => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1439 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::Equal);
                            let v1440 = constructor_output_xmm(ctx, v1439);
                            let v1441 = Some(v1440);
                            // Rule at src/isa/x64/lower.isle line 2126.
                            return v1441;
                        }
                    }
                    &FloatCC::GreaterThan => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1470 = constructor_put_in_xmm(ctx, v1424.1);
                            let v1471 = &C::put_in_xmm_mem(ctx, v1424.0);
                            let v1472 = constructor_x64_cmpp(ctx, v1435, v1470, v1471, &FcmpImm::LessThan);
                            let v1473 = constructor_output_xmm(ctx, v1472);
                            let v1474 = Some(v1473);
                            // Rule at src/isa/x64/lower.isle line 2146.
                            return v1474;
                        }
                    }
                    &FloatCC::GreaterThanOrEqual => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1470 = constructor_put_in_xmm(ctx, v1424.1);
                            let v1471 = &C::put_in_xmm_mem(ctx, v1424.0);
                            let v1475 = constructor_x64_cmpp(ctx, v1435, v1470, v1471, &FcmpImm::LessThanOrEqual);
                            let v1476 = constructor_output_xmm(ctx, v1475);
                            let v1477 = Some(v1476);
                            // Rule at src/isa/x64/lower.isle line 2148.
                            return v1477;
                        }
                    }
                    &FloatCC::LessThan => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1447 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::LessThan);
                            let v1448 = constructor_output_xmm(ctx, v1447);
                            let v1449 = Some(v1448);
                            // Rule at src/isa/x64/lower.isle line 2130.
                            return v1449;
                        }
                    }
                    &FloatCC::LessThanOrEqual => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1451 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::LessThanOrEqual);
                            let v1452 = constructor_output_xmm(ctx, v1451);
                            let v1453 = Some(v1452);
                            // Rule at src/isa/x64/lower.isle line 2132.
                            return v1453;
                        }
                    }
                    &FloatCC::NotEqual => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1443 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::NotEqual);
                            let v1444 = constructor_output_xmm(ctx, v1443);
                            let v1445 = Some(v1444);
                            // Rule at src/isa/x64/lower.isle line 2128.
                            return v1445;
                        }
                    }
                    &FloatCC::Ordered => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1455 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::Ordered);
                            let v1456 = constructor_output_xmm(ctx, v1455);
                            let v1457 = Some(v1456);
                            // Rule at src/isa/x64/lower.isle line 2134.
                            return v1457;
                        }
                    }
                    &FloatCC::Unordered => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1459 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::Unordered);
                            let v1460 = constructor_output_xmm(ctx, v1459);
                            let v1461 = Some(v1460);
                            // Rule at src/isa/x64/lower.isle line 2136.
                            return v1461;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThan => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1463 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::UnorderedOrGreaterThan);
                            let v1464 = constructor_output_xmm(ctx, v1463);
                            let v1465 = Some(v1464);
                            // Rule at src/isa/x64/lower.isle line 2138.
                            return v1465;
                        }
                    }
                    &FloatCC::UnorderedOrGreaterThanOrEqual => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1436 = constructor_put_in_xmm(ctx, v1424.0);
                            let v1437 = &C::put_in_xmm_mem(ctx, v1424.1);
                            let v1467 = constructor_x64_cmpp(ctx, v1435, v1436, v1437, &FcmpImm::UnorderedOrGreaterThanOrEqual);
                            let v1468 = constructor_output_xmm(ctx, v1467);
                            let v1469 = Some(v1468);
                            // Rule at src/isa/x64/lower.isle line 2140.
                            return v1469;
                        }
                    }
                    &FloatCC::UnorderedOrLessThan => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1470 = constructor_put_in_xmm(ctx, v1424.1);
                            let v1471 = &C::put_in_xmm_mem(ctx, v1424.0);
                            let v1478 = constructor_x64_cmpp(ctx, v1435, v1470, v1471, &FcmpImm::UnorderedOrGreaterThan);
                            let v1479 = constructor_output_xmm(ctx, v1478);
                            let v1480 = Some(v1479);
                            // Rule at src/isa/x64/lower.isle line 2150.
                            return v1480;
                        }
                    }
                    &FloatCC::UnorderedOrLessThanOrEqual => {
                        let v1424 = C::unpack_value_array_2(ctx, v1422);
                        let v1427 = C::value_type(ctx, v1424.0);
                        let v1434 = C::ty_vec128(ctx, v1427);
                        if let Some(v1435) = v1434 {
                            let v1470 = constructor_put_in_xmm(ctx, v1424.1);
                            let v1471 = &C::put_in_xmm_mem(ctx, v1424.0);
                            let v1481 = constructor_x64_cmpp(ctx, v1435, v1470, v1471, &FcmpImm::UnorderedOrGreaterThanOrEqual);
                            let v1482 = constructor_output_xmm(ctx, v1481);
                            let v1483 = Some(v1482);
                            // Rule at src/isa/x64/lower.isle line 2152.
                            return v1483;
                        }
                    }
                    _ => {}
                }
                let v1424 = C::unpack_value_array_2(ctx, v1422);
                let v1427 = C::value_type(ctx, v1424.0);
                let v1428 = C::ty_scalar_float(ctx, v1427);
                if let Some(v1429) = v1428 {
                    let v1430 = &constructor_emit_fcmp(ctx, v1423, v1424.0, v1424.1);
                    let v1431 = constructor_lower_fcmp_bool(ctx, v1430);
                    let v1432 = C::output(ctx, v1431);
                    let v1433 = Some(v1432);
                    // Rule at src/isa/x64/lower.isle line 2119.
                    return v1433;
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v2291,
            func_ref: v2292,
        } => {
            if let &Opcode::FuncAddr = v2291 {
                let v2293 = C::func_ref_data(ctx, v2292);
                let v2298 = constructor_load_ext_name(ctx, v2293.1, 0_i64, v2293.2);
                let v2299 = constructor_output_reg(ctx, v2298);
                let v2300 = Some(v2299);
                // Rule at src/isa/x64/lower.isle line 3359.
                return v2300;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1225,
            args: ref v1226,
            code: ref v1227,
        } => {
            if let &Opcode::UaddOverflowTrap = v1225 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v1228 = C::unpack_value_array_2(ctx, v1226);
                        let v1246 = &C::sinkable_load(ctx, v1228.0);
                        if let Some(v1247) = v1246 {
                            let v1240 = constructor_put_in_gpr(ctx, v1228.1);
                            let v1248 = &constructor_sink_load_to_gpr_mem_imm(ctx, v1247);
                            let v1249 = &constructor_x64_add_with_flags_paired(ctx, v5, v1240, v1248);
                            let v1234 = &constructor_trap_if(ctx, &CC::B, v1227);
                            let v1250 = constructor_with_flags(ctx, v1249, v1234);
                            let v1251 = C::output(ctx, v1250);
                            let v1252 = Some(v1251);
                            // Rule at src/isa/x64/lower.isle line 1912.
                            return v1252;
                        }
                        let v1238 = &C::simm32_from_value(ctx, v1228.0);
                        if let Some(v1239) = v1238 {
                            let v1240 = constructor_put_in_gpr(ctx, v1228.1);
                            let v1241 = &constructor_x64_add_with_flags_paired(ctx, v5, v1240, v1239);
                            let v1242 = &constructor_trap_if(ctx, &CC::B, v1227);
                            let v1243 = constructor_with_flags(ctx, v1241, v1242);
                            let v1244 = C::output(ctx, v1243);
                            let v1245 = Some(v1244);
                            // Rule at src/isa/x64/lower.isle line 1906.
                            return v1245;
                        }
                        let v1231 = constructor_put_in_gpr(ctx, v1228.0);
                        let v1232 = &constructor_put_in_gpr_mem_imm(ctx, v1228.1);
                        let v1233 = &constructor_x64_add_with_flags_paired(ctx, v5, v1231, v1232);
                        let v1234 = &constructor_trap_if(ctx, &CC::B, v1227);
                        let v1235 = constructor_with_flags(ctx, v1233, v1234);
                        let v1236 = C::output(ctx, v1235);
                        let v1237 = Some(v1236);
                        // Rule at src/isa/x64/lower.isle line 1898.
                        return v1237;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1258,
            args: ref v1259,
            cond: ref v1260,
        } => {
            if let &Opcode::Icmp = v1258 {
                match v1260 {
                    &IntCC::Equal => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1323 = &C::put_in_xmm_mem(ctx, v1261.1);
                            let v1324 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1323);
                            let v1325 = constructor_output_xmm(ctx, v1324);
                            let v1326 = Some(v1325);
                            // Rule at src/isa/x64/lower.isle line 1969.
                            return v1326;
                        }
                    }
                    &IntCC::NotEqual => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1323 = &C::put_in_xmm_mem(ctx, v1261.1);
                            let v1324 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1323);
                            let v1327 = constructor_vector_all_ones(ctx);
                            let v1328 = &C::xmm_to_xmm_mem(ctx, v1327);
                            let v1329 = constructor_x64_pxor(ctx, v1324, v1328);
                            let v1330 = constructor_output_xmm(ctx, v1329);
                            let v1331 = Some(v1330);
                            // Rule at src/isa/x64/lower.isle line 1974.
                            return v1331;
                        }
                    }
                    &IntCC::SignedGreaterThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1261 = C::unpack_value_array_2(ctx, v1259);
                                let v1284 = C::def_inst(ctx, v1261.0);
                                if let Some(v1285) = v1284 {
                                    let v1286 = &C::inst_data(ctx, v1285);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1287,
                                        imm: v1288,
                                    } = v1286 {
                                        if let &Opcode::Iconst = v1287 {
                                            let v1289 = C::u64_from_imm64(ctx, v1288);
                                            if v1289 == 0x0_u64 {
                                                let v1290 = C::value_type(ctx, v1261.1);
                                                match v1290 {
                                                    I32 => {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1261.1);
                                                        let v1305 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1306 = &C::imm8_reg_to_imm8_gpr(ctx, &v1305);
                                                        let v1310 = constructor_x64_shr(ctx, I32, v1291, v1306);
                                                        let v1311 = constructor_output_gpr(ctx, v1310);
                                                        let v1312 = Some(v1311);
                                                        // Rule at src/isa/x64/lower.isle line 1953.
                                                        return v1312;
                                                    }
                                                    I64 => {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1261.1);
                                                        let v1279 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1280 = &C::imm8_reg_to_imm8_gpr(ctx, &v1279);
                                                        let v1292 = constructor_x64_shr(ctx, I64, v1291, v1280);
                                                        let v1293 = constructor_output_gpr(ctx, v1292);
                                                        let v1294 = Some(v1293);
                                                        // Rule at src/isa/x64/lower.isle line 1937.
                                                        return v1294;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1323 = &C::put_in_xmm_mem(ctx, v1261.1);
                            let v1332 = constructor_x64_pcmpgt(ctx, v1321, v1322, v1323);
                            let v1333 = constructor_output_xmm(ctx, v1332);
                            let v1334 = Some(v1333);
                            // Rule at src/isa/x64/lower.isle line 1981.
                            return v1334;
                        }
                    }
                    &IntCC::SignedGreaterThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1261 = C::unpack_value_array_2(ctx, v1259);
                                let v1264 = C::value_type(ctx, v1261.0);
                                match v1264 {
                                    I32 => {
                                        let v1271 = C::def_inst(ctx, v1261.1);
                                        if let Some(v1272) = v1271 {
                                            let v1273 = &C::inst_data(ctx, v1272);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1274,
                                                imm: v1275,
                                            } = v1273 {
                                                if let &Opcode::Iconst = v1274 {
                                                    let v1276 = C::u64_from_imm64(ctx, v1275);
                                                    if v1276 == 0x0_u64 {
                                                        let v1277 = constructor_put_in_gpr(ctx, v1261.0);
                                                        let v1300 = constructor_x64_not(ctx, I64, v1277);
                                                        let v1305 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1313 = &C::imm8_reg_to_imm8_gpr(ctx, &v1305);
                                                        let v1317 = constructor_x64_shr(ctx, I32, v1300, v1313);
                                                        let v1318 = constructor_output_gpr(ctx, v1317);
                                                        let v1319 = Some(v1318);
                                                        // Rule at src/isa/x64/lower.isle line 1961.
                                                        return v1319;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1271 = C::def_inst(ctx, v1261.1);
                                        if let Some(v1272) = v1271 {
                                            let v1273 = &C::inst_data(ctx, v1272);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1274,
                                                imm: v1275,
                                            } = v1273 {
                                                if let &Opcode::Iconst = v1274 {
                                                    let v1276 = C::u64_from_imm64(ctx, v1275);
                                                    if v1276 == 0x0_u64 {
                                                        let v1277 = constructor_put_in_gpr(ctx, v1261.0);
                                                        let v1300 = constructor_x64_not(ctx, I64, v1277);
                                                        let v1279 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1296 = &C::imm8_reg_to_imm8_gpr(ctx, &v1279);
                                                        let v1301 = constructor_x64_shr(ctx, I64, v1300, v1296);
                                                        let v1302 = constructor_output_gpr(ctx, v1301);
                                                        let v1303 = Some(v1302);
                                                        // Rule at src/isa/x64/lower.isle line 1945.
                                                        return v1303;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1372 = constructor_has_pmaxs(ctx, v1321);
                            if v1372 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1373 = &C::put_in_xmm_mem(ctx, v1261.1);
                                let v1374 = constructor_x64_pmaxs(ctx, v1321, v1352, v1373);
                                let v1375 = &C::xmm_to_xmm_mem(ctx, v1374);
                                let v1376 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1375);
                                let v1377 = constructor_output_xmm(ctx, v1376);
                                let v1378 = Some(v1377);
                                // Rule at src/isa/x64/lower.isle line 2031.
                                return v1378;
                            }
                            let v1335 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1336 = &C::put_in_xmm_mem(ctx, v1261.0);
                            let v1337 = constructor_x64_pcmpgt(ctx, v1321, v1335, v1336);
                            let v1327 = constructor_vector_all_ones(ctx);
                            let v1328 = &C::xmm_to_xmm_mem(ctx, v1327);
                            let v1379 = constructor_x64_pxor(ctx, v1337, v1328);
                            let v1380 = constructor_output_xmm(ctx, v1379);
                            let v1381 = Some(v1380);
                            // Rule at src/isa/x64/lower.isle line 2037.
                            return v1381;
                        }
                    }
                    &IntCC::SignedLessThan => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1261 = C::unpack_value_array_2(ctx, v1259);
                                let v1264 = C::value_type(ctx, v1261.0);
                                match v1264 {
                                    I32 => {
                                        let v1271 = C::def_inst(ctx, v1261.1);
                                        if let Some(v1272) = v1271 {
                                            let v1273 = &C::inst_data(ctx, v1272);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1274,
                                                imm: v1275,
                                            } = v1273 {
                                                if let &Opcode::Iconst = v1274 {
                                                    let v1276 = C::u64_from_imm64(ctx, v1275);
                                                    if v1276 == 0x0_u64 {
                                                        let v1277 = constructor_put_in_gpr(ctx, v1261.0);
                                                        let v1305 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1306 = &C::imm8_reg_to_imm8_gpr(ctx, &v1305);
                                                        let v1307 = constructor_x64_shr(ctx, I32, v1277, v1306);
                                                        let v1308 = constructor_output_gpr(ctx, v1307);
                                                        let v1309 = Some(v1308);
                                                        // Rule at src/isa/x64/lower.isle line 1949.
                                                        return v1309;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    I64 => {
                                        let v1271 = C::def_inst(ctx, v1261.1);
                                        if let Some(v1272) = v1271 {
                                            let v1273 = &C::inst_data(ctx, v1272);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1274,
                                                imm: v1275,
                                            } = v1273 {
                                                if let &Opcode::Iconst = v1274 {
                                                    let v1276 = C::u64_from_imm64(ctx, v1275);
                                                    if v1276 == 0x0_u64 {
                                                        let v1277 = constructor_put_in_gpr(ctx, v1261.0);
                                                        let v1279 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1280 = &C::imm8_reg_to_imm8_gpr(ctx, &v1279);
                                                        let v1281 = constructor_x64_shr(ctx, I64, v1277, v1280);
                                                        let v1282 = constructor_output_gpr(ctx, v1281);
                                                        let v1283 = Some(v1282);
                                                        // Rule at src/isa/x64/lower.isle line 1933.
                                                        return v1283;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1335 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1336 = &C::put_in_xmm_mem(ctx, v1261.0);
                            let v1337 = constructor_x64_pcmpgt(ctx, v1321, v1335, v1336);
                            let v1338 = constructor_output_xmm(ctx, v1337);
                            let v1339 = Some(v1338);
                            // Rule at src/isa/x64/lower.isle line 1986.
                            return v1339;
                        }
                    }
                    &IntCC::SignedLessThanOrEqual => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            if v3 == I8 {
                                let v1261 = C::unpack_value_array_2(ctx, v1259);
                                let v1284 = C::def_inst(ctx, v1261.0);
                                if let Some(v1285) = v1284 {
                                    let v1286 = &C::inst_data(ctx, v1285);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v1287,
                                        imm: v1288,
                                    } = v1286 {
                                        if let &Opcode::Iconst = v1287 {
                                            let v1289 = C::u64_from_imm64(ctx, v1288);
                                            if v1289 == 0x0_u64 {
                                                let v1290 = C::value_type(ctx, v1261.1);
                                                match v1290 {
                                                    I32 => {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1261.1);
                                                        let v1295 = constructor_x64_not(ctx, I64, v1291);
                                                        let v1305 = Imm8Reg::Imm8 {
                                                            imm: 0x1f_u8,
                                                        };
                                                        let v1313 = &C::imm8_reg_to_imm8_gpr(ctx, &v1305);
                                                        let v1314 = constructor_x64_shr(ctx, I32, v1295, v1313);
                                                        let v1315 = constructor_output_gpr(ctx, v1314);
                                                        let v1316 = Some(v1315);
                                                        // Rule at src/isa/x64/lower.isle line 1957.
                                                        return v1316;
                                                    }
                                                    I64 => {
                                                        let v1291 = constructor_put_in_gpr(ctx, v1261.1);
                                                        let v1295 = constructor_x64_not(ctx, I64, v1291);
                                                        let v1279 = Imm8Reg::Imm8 {
                                                            imm: 0x3f_u8,
                                                        };
                                                        let v1296 = &C::imm8_reg_to_imm8_gpr(ctx, &v1279);
                                                        let v1297 = constructor_x64_shr(ctx, I64, v1295, v1296);
                                                        let v1298 = constructor_output_gpr(ctx, v1297);
                                                        let v1299 = Some(v1298);
                                                        // Rule at src/isa/x64/lower.isle line 1941.
                                                        return v1299;
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1382 = constructor_has_pmins(ctx, v1321);
                            if v1382 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1373 = &C::put_in_xmm_mem(ctx, v1261.1);
                                let v1383 = constructor_x64_pmins(ctx, v1321, v1352, v1373);
                                let v1384 = &C::xmm_to_xmm_mem(ctx, v1383);
                                let v1385 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1384);
                                let v1386 = constructor_output_xmm(ctx, v1385);
                                let v1387 = Some(v1386);
                                // Rule at src/isa/x64/lower.isle line 2043.
                                return v1387;
                            }
                            let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1323 = &C::put_in_xmm_mem(ctx, v1261.1);
                            let v1332 = constructor_x64_pcmpgt(ctx, v1321, v1322, v1323);
                            let v1327 = constructor_vector_all_ones(ctx);
                            let v1328 = &C::xmm_to_xmm_mem(ctx, v1327);
                            let v1388 = constructor_x64_pxor(ctx, v1332, v1328);
                            let v1389 = constructor_output_xmm(ctx, v1388);
                            let v1390 = Some(v1389);
                            // Rule at src/isa/x64/lower.isle line 2048.
                            return v1390;
                        }
                    }
                    &IntCC::UnsignedGreaterThan => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1340 = constructor_has_pmaxu(ctx, v1321);
                            if v1340 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1341 = constructor_put_in_xmm(ctx, v1261.1);
                                let v1342 = &C::xmm_to_xmm_mem(ctx, v1341);
                                let v1343 = constructor_x64_pmaxu(ctx, v1321, v1322, v1342);
                                let v1344 = &C::xmm_to_xmm_mem(ctx, v1341);
                                let v1345 = constructor_x64_pcmpeq(ctx, v1321, v1343, v1344);
                                let v1346 = constructor_vector_all_ones(ctx);
                                let v1347 = &C::xmm_to_xmm_mem(ctx, v1346);
                                let v1348 = constructor_x64_pxor(ctx, v1345, v1347);
                                let v1349 = constructor_output_xmm(ctx, v1348);
                                let v1350 = Some(v1349);
                                // Rule at src/isa/x64/lower.isle line 1993.
                                return v1350;
                            }
                            let v1351 = constructor_flip_high_bit_mask(ctx, v1321);
                            let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1353 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1354 = constructor_x64_pxor(ctx, v1352, v1353);
                            let v1355 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1356 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1357 = constructor_x64_pxor(ctx, v1355, v1356);
                            let v1358 = &C::xmm_to_xmm_mem(ctx, v1357);
                            let v1359 = constructor_x64_pcmpgt(ctx, v1321, v1354, v1358);
                            let v1360 = constructor_output_xmm(ctx, v1359);
                            let v1361 = Some(v1360);
                            // Rule at src/isa/x64/lower.isle line 2003.
                            return v1361;
                        }
                    }
                    &IntCC::UnsignedGreaterThanOrEqual => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1340 = constructor_has_pmaxu(ctx, v1321);
                            if v1340 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1373 = &C::put_in_xmm_mem(ctx, v1261.1);
                                let v1391 = constructor_x64_pmaxu(ctx, v1321, v1352, v1373);
                                let v1392 = &C::xmm_to_xmm_mem(ctx, v1391);
                                let v1393 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1392);
                                let v1394 = constructor_output_xmm(ctx, v1393);
                                let v1395 = Some(v1394);
                                // Rule at src/isa/x64/lower.isle line 2053.
                                return v1395;
                            }
                        }
                        if v1264 == I16X8 {
                            let v1335 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1336 = &C::put_in_xmm_mem(ctx, v1261.0);
                            let v1396 = constructor_x64_psubusw(ctx, v1335, v1336);
                            let v1397 = constructor_xmm_zero(ctx, I16X8);
                            let v1398 = &C::xmm_to_xmm_mem(ctx, v1397);
                            let v1399 = constructor_x64_pcmpeqw(ctx, v1396, v1398);
                            let v1400 = constructor_output_xmm(ctx, v1399);
                            let v1401 = Some(v1400);
                            // Rule at src/isa/x64/lower.isle line 2059.
                            return v1401;
                        }
                        if let Some(v1321) = v1320 {
                            let v1351 = constructor_flip_high_bit_mask(ctx, v1321);
                            let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1353 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1354 = constructor_x64_pxor(ctx, v1352, v1353);
                            let v1355 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1356 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1357 = constructor_x64_pxor(ctx, v1355, v1356);
                            let v1368 = &C::xmm_to_xmm_mem(ctx, v1354);
                            let v1369 = constructor_x64_pcmpgt(ctx, v1321, v1357, v1368);
                            let v1402 = constructor_vector_all_ones(ctx);
                            let v1403 = &C::xmm_to_xmm_mem(ctx, v1402);
                            let v1404 = constructor_x64_pxor(ctx, v1369, v1403);
                            let v1405 = constructor_output_xmm(ctx, v1404);
                            let v1406 = Some(v1405);
                            // Rule at src/isa/x64/lower.isle line 2065.
                            return v1406;
                        }
                    }
                    &IntCC::UnsignedLessThan => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1362 = constructor_has_pminu(ctx, v1321);
                            if v1362 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1341 = constructor_put_in_xmm(ctx, v1261.1);
                                let v1342 = &C::xmm_to_xmm_mem(ctx, v1341);
                                let v1363 = constructor_x64_pminu(ctx, v1321, v1322, v1342);
                                let v1344 = &C::xmm_to_xmm_mem(ctx, v1341);
                                let v1364 = constructor_x64_pcmpeq(ctx, v1321, v1363, v1344);
                                let v1346 = constructor_vector_all_ones(ctx);
                                let v1347 = &C::xmm_to_xmm_mem(ctx, v1346);
                                let v1365 = constructor_x64_pxor(ctx, v1364, v1347);
                                let v1366 = constructor_output_xmm(ctx, v1365);
                                let v1367 = Some(v1366);
                                // Rule at src/isa/x64/lower.isle line 2011.
                                return v1367;
                            }
                            let v1351 = constructor_flip_high_bit_mask(ctx, v1321);
                            let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1353 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1354 = constructor_x64_pxor(ctx, v1352, v1353);
                            let v1355 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1356 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1357 = constructor_x64_pxor(ctx, v1355, v1356);
                            let v1368 = &C::xmm_to_xmm_mem(ctx, v1354);
                            let v1369 = constructor_x64_pcmpgt(ctx, v1321, v1357, v1368);
                            let v1370 = constructor_output_xmm(ctx, v1369);
                            let v1371 = Some(v1370);
                            // Rule at src/isa/x64/lower.isle line 2022.
                            return v1371;
                        }
                    }
                    &IntCC::UnsignedLessThanOrEqual => {
                        let v1261 = C::unpack_value_array_2(ctx, v1259);
                        let v1264 = C::value_type(ctx, v1261.0);
                        let v1320 = C::ty_vec128(ctx, v1264);
                        if let Some(v1321) = v1320 {
                            let v1362 = constructor_has_pminu(ctx, v1321);
                            if v1362 == true {
                                let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                                let v1373 = &C::put_in_xmm_mem(ctx, v1261.1);
                                let v1407 = constructor_x64_pminu(ctx, v1321, v1352, v1373);
                                let v1408 = &C::xmm_to_xmm_mem(ctx, v1407);
                                let v1409 = constructor_x64_pcmpeq(ctx, v1321, v1322, v1408);
                                let v1410 = constructor_output_xmm(ctx, v1409);
                                let v1411 = Some(v1410);
                                // Rule at src/isa/x64/lower.isle line 2076.
                                return v1411;
                            }
                        }
                        if v1264 == I16X8 {
                            let v1322 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1323 = &C::put_in_xmm_mem(ctx, v1261.1);
                            let v1412 = constructor_x64_psubusw(ctx, v1322, v1323);
                            let v1413 = constructor_xmm_zero(ctx, I8X16);
                            let v1414 = &C::xmm_to_xmm_mem(ctx, v1413);
                            let v1415 = constructor_x64_pcmpeqw(ctx, v1412, v1414);
                            let v1416 = constructor_output_xmm(ctx, v1415);
                            let v1417 = Some(v1416);
                            // Rule at src/isa/x64/lower.isle line 2083.
                            return v1417;
                        }
                        if let Some(v1321) = v1320 {
                            let v1351 = constructor_flip_high_bit_mask(ctx, v1321);
                            let v1352 = constructor_put_in_xmm(ctx, v1261.0);
                            let v1353 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1354 = constructor_x64_pxor(ctx, v1352, v1353);
                            let v1355 = constructor_put_in_xmm(ctx, v1261.1);
                            let v1356 = &C::xmm_to_xmm_mem(ctx, v1351);
                            let v1357 = constructor_x64_pxor(ctx, v1355, v1356);
                            let v1358 = &C::xmm_to_xmm_mem(ctx, v1357);
                            let v1359 = constructor_x64_pcmpgt(ctx, v1321, v1354, v1358);
                            let v1402 = constructor_vector_all_ones(ctx);
                            let v1403 = &C::xmm_to_xmm_mem(ctx, v1402);
                            let v1418 = constructor_x64_pxor(ctx, v1359, v1403);
                            let v1419 = constructor_output_xmm(ctx, v1418);
                            let v1420 = Some(v1419);
                            // Rule at src/isa/x64/lower.isle line 2091.
                            return v1420;
                        }
                    }
                    _ => {}
                }
                let v1261 = C::unpack_value_array_2(ctx, v1259);
                let v1264 = C::value_type(ctx, v1261.0);
                if v1264 == I128 {
                    let v1267 = &constructor_emit_cmp(ctx, v1260, v1261.0, v1261.1);
                    let v1268 = constructor_lower_icmp_bool(ctx, v1267);
                    let v1269 = C::output(ctx, v1268);
                    let v1270 = Some(v1269);
                    // Rule at src/isa/x64/lower.isle line 1929.
                    return v1270;
                }
                let v1265 = C::fits_in_64(ctx, v1264);
                if let Some(v1266) = v1265 {
                    let v1267 = &constructor_emit_cmp(ctx, v1260, v1261.0, v1261.1);
                    let v1268 = constructor_lower_icmp_bool(ctx, v1267);
                    let v1269 = C::output(ctx, v1268);
                    let v1270 = Some(v1269);
                    // Rule at src/isa/x64/lower.isle line 1926.
                    return v1270;
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v2023,
            arg: v2024,
            flags: v2025,
            offset: v2026,
        } => {
            match v2023 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F16 => {
                                let v2063 = constructor_xmm_uninit_value(ctx);
                                let v2030 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2031 = &constructor_amode_to_gpr_mem(ctx, v2030);
                                let v2065 = constructor_x64_pinsrw(ctx, v2063, v2031, 0x0_u8);
                                let v2066 = constructor_output_xmm(ctx, v2065);
                                let v2067 = Some(v2066);
                                // Rule at src/isa/x64/lower.isle line 3014.
                                return v2067;
                            }
                            F32 => {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2068 = &C::amode_to_synthetic_amode(ctx, v2037);
                                let v2069 = constructor_x64_movss_load(ctx, v2068);
                                let v2070 = constructor_output_xmm(ctx, v2069);
                                let v2071 = Some(v2070);
                                // Rule at src/isa/x64/lower.isle line 3016.
                                return v2071;
                            }
                            F64 => {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2068 = &C::amode_to_synthetic_amode(ctx, v2037);
                                let v2072 = constructor_x64_movsd_load(ctx, v2068);
                                let v2073 = constructor_output_xmm(ctx, v2072);
                                let v2074 = Some(v2073);
                                // Rule at src/isa/x64/lower.isle line 3018.
                                return v2074;
                            }
                            F128 => {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2076 = constructor_x64_movdqu_load(ctx, v2075);
                                let v2077 = constructor_output_xmm(ctx, v2076);
                                let v2078 = Some(v2077);
                                // Rule at src/isa/x64/lower.isle line 3020.
                                return v2078;
                            }
                            F32X4 => {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2068 = &C::amode_to_synthetic_amode(ctx, v2037);
                                let v2079 = constructor_x64_movups_load(ctx, v2068);
                                let v2080 = constructor_output_xmm(ctx, v2079);
                                let v2081 = Some(v2080);
                                // Rule at src/isa/x64/lower.isle line 3022.
                                return v2081;
                            }
                            F64X2 => {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2068 = &C::amode_to_synthetic_amode(ctx, v2037);
                                let v2082 = constructor_x64_movupd_load(ctx, v2068);
                                let v2083 = constructor_output_xmm(ctx, v2082);
                                let v2084 = Some(v2083);
                                // Rule at src/isa/x64/lower.isle line 3024.
                                return v2084;
                            }
                            _ => {}
                        }
                        let v2035 = C::ty_int_ref_64(ctx, v3);
                        if let Some(v2036) = v2035 {
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2038 = constructor_x64_mov(ctx, v2037);
                            let v2039 = constructor_output_reg(ctx, v2038);
                            let v2040 = Some(v2039);
                            // Rule at src/isa/x64/lower.isle line 2992.
                            return v2040;
                        }
                        let v1135 = C::ty_vec128(ctx, v3);
                        if let Some(v1136) = v1135 {
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                            let v2076 = constructor_x64_movdqu_load(ctx, v2075);
                            let v2077 = constructor_output_xmm(ctx, v2076);
                            let v2078 = Some(v2077);
                            // Rule at src/isa/x64/lower.isle line 3026.
                            return v2078;
                        }
                        if v3 == I128 {
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2086 = &C::amode_offset(ctx, v2037, 8_i32);
                            let v2087 = constructor_x64_mov(ctx, v2037);
                            let v2088 = constructor_x64_mov(ctx, v2086);
                            let v2089 = C::value_regs(ctx, v2087, v2088);
                            let v2090 = C::output(ctx, v2089);
                            let v2091 = Some(v2090);
                            // Rule at src/isa/x64/lower.isle line 3030.
                            return v2091;
                        }
                        let v1732 = C::fits_in_32(ctx, v3);
                        if let Some(v1733) = v1732 {
                            let v2020 = &C::type_register_class(ctx, v3);
                            if let Some(v2021) = v2020 {
                                if let &RegisterClass::Gpr {
                                    single_register: v2022,
                                } = v2021 {
                                    let v2027 = C::ty_bits_u16(ctx, v1733);
                                    let v2029 = &C::ext_mode(ctx, v2027, 0x40_u16);
                                    let v2030 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                    let v2031 = &constructor_amode_to_gpr_mem(ctx, v2030);
                                    let v2032 = constructor_x64_movzx(ctx, v2029, v2031);
                                    let v2033 = constructor_output_gpr(ctx, v2032);
                                    let v2034 = Some(v2033);
                                    // Rule at src/isa/x64/lower.isle line 2988.
                                    return v2034;
                                }
                            }
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2043 = constructor_x64_movzx(ctx, &ExtMode::BQ, v2042);
                                let v2044 = constructor_output_gpr(ctx, v2043);
                                let v2045 = Some(v2044);
                                // Rule at src/isa/x64/lower.isle line 2997.
                                return v2045;
                            }
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2046 = constructor_x64_movsx(ctx, &ExtMode::BQ, v2042);
                                let v2047 = constructor_output_gpr(ctx, v2046);
                                let v2048 = Some(v2047);
                                // Rule at src/isa/x64/lower.isle line 2999.
                                return v2048;
                            }
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2050 = constructor_x64_movzx(ctx, &ExtMode::WQ, v2042);
                                let v2051 = constructor_output_gpr(ctx, v2050);
                                let v2052 = Some(v2051);
                                // Rule at src/isa/x64/lower.isle line 3001.
                                return v2052;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2053 = constructor_x64_movsx(ctx, &ExtMode::WQ, v2042);
                                let v2054 = constructor_output_gpr(ctx, v2053);
                                let v2055 = Some(v2054);
                                // Rule at src/isa/x64/lower.isle line 3003.
                                return v2055;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2057 = constructor_x64_movzx(ctx, &ExtMode::LQ, v2042);
                                let v2058 = constructor_output_gpr(ctx, v2057);
                                let v2059 = Some(v2058);
                                // Rule at src/isa/x64/lower.isle line 3005.
                                return v2059;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            if let &RegisterClass::Gpr {
                                single_register: v2022,
                            } = v2021 {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                                let v2060 = constructor_x64_movsx(ctx, &ExtMode::LQ, v2042);
                                let v2061 = constructor_output_gpr(ctx, v2060);
                                let v2062 = Some(v2061);
                                // Rule at src/isa/x64/lower.isle line 3007.
                                return v2062;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2095 = constructor_x64_pmovzxbw(ctx, v2075);
                                let v2096 = constructor_output_xmm(ctx, v2095);
                                let v2097 = Some(v2096);
                                // Rule at src/isa/x64/lower.isle line 3043.
                                return v2097;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2114 = constructor_lower_uwiden_low(ctx, I16X8, v2110);
                            let v2115 = constructor_output_xmm(ctx, v2114);
                            let v2116 = Some(v2115);
                            // Rule at src/isa/x64/lower.isle line 3061.
                            return v2116;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2092 = constructor_x64_pmovsxbw(ctx, v2075);
                                let v2093 = constructor_output_xmm(ctx, v2092);
                                let v2094 = Some(v2093);
                                // Rule at src/isa/x64/lower.isle line 3040.
                                return v2094;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2111 = constructor_lower_swiden_low(ctx, I16X8, v2110);
                            let v2112 = constructor_output_xmm(ctx, v2111);
                            let v2113 = Some(v2112);
                            // Rule at src/isa/x64/lower.isle line 3059.
                            return v2113;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2101 = constructor_x64_pmovzxwd(ctx, v2075);
                                let v2102 = constructor_output_xmm(ctx, v2101);
                                let v2103 = Some(v2102);
                                // Rule at src/isa/x64/lower.isle line 3049.
                                return v2103;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2120 = constructor_lower_uwiden_low(ctx, I32X4, v2110);
                            let v2121 = constructor_output_xmm(ctx, v2120);
                            let v2122 = Some(v2121);
                            // Rule at src/isa/x64/lower.isle line 3065.
                            return v2122;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2098 = constructor_x64_pmovsxwd(ctx, v2075);
                                let v2099 = constructor_output_xmm(ctx, v2098);
                                let v2100 = Some(v2099);
                                // Rule at src/isa/x64/lower.isle line 3046.
                                return v2100;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2117 = constructor_lower_swiden_low(ctx, I32X4, v2110);
                            let v2118 = constructor_output_xmm(ctx, v2117);
                            let v2119 = Some(v2118);
                            // Rule at src/isa/x64/lower.isle line 3063.
                            return v2119;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2107 = constructor_x64_pmovzxdq(ctx, v2075);
                                let v2108 = constructor_output_xmm(ctx, v2107);
                                let v2109 = Some(v2108);
                                // Rule at src/isa/x64/lower.isle line 3055.
                                return v2109;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2126 = constructor_lower_uwiden_low(ctx, I64X2, v2110);
                            let v2127 = constructor_output_xmm(ctx, v2126);
                            let v2128 = Some(v2127);
                            // Rule at src/isa/x64/lower.isle line 3069.
                            return v2128;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                                let v2075 = &constructor_amode_to_xmm_mem(ctx, v2037);
                                let v2104 = constructor_x64_pmovsxdq(ctx, v2075);
                                let v2105 = constructor_output_xmm(ctx, v2104);
                                let v2106 = Some(v2105);
                                // Rule at src/isa/x64/lower.isle line 3052.
                                return v2106;
                            }
                            let v2037 = &constructor_to_amode(ctx, v2025, v2024, v2026);
                            let v2042 = &constructor_amode_to_gpr_mem(ctx, v2037);
                            let v2110 = constructor_x64_movq_to_xmm(ctx, v2042);
                            let v2123 = constructor_lower_swiden_low(ctx, I64X2, v2110);
                            let v2124 = constructor_output_xmm(ctx, v2123);
                            let v2125 = Some(v2124);
                            // Rule at src/isa/x64/lower.isle line 3067.
                            return v2125;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v2311,
            arg: v2312,
            flags: v2313,
        } => {
            match v2311 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v2020 = &C::type_register_class(ctx, v3);
                        if let Some(v2021) = v2020 {
                            match v2021 {
                                &RegisterClass::Gpr {
                                    single_register: v2022,
                                } => {
                                    let v2873 = C::value_type(ctx, v2312);
                                    let v2874 = &C::type_register_class(ctx, v2873);
                                    if let Some(v2875) = v2874 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2881,
                                        } = v2875 {
                                            let v2893 = constructor_output_value(ctx, v2312);
                                            let v2894 = Some(v2893);
                                            // Rule at src/isa/x64/lower.isle line 4198.
                                            return v2894;
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    let v2873 = C::value_type(ctx, v2312);
                                    let v2874 = &C::type_register_class(ctx, v2873);
                                    if let Some(v2875) = v2874 {
                                        if let &RegisterClass::Xmm = v2875 {
                                            let v2893 = constructor_output_value(ctx, v2312);
                                            let v2894 = Some(v2893);
                                            // Rule at src/isa/x64/lower.isle line 4203.
                                            return v2894;
                                        }
                                    }
                                    if v2873 == I128 {
                                        let v2889 = C::put_in_regs(ctx, v2312);
                                        let v2890 = constructor_bitcast_gprs_to_xmm(ctx, v2889);
                                        let v2891 = constructor_output_xmm(ctx, v2890);
                                        let v2892 = Some(v2891);
                                        // Rule at src/isa/x64/lower.isle line 4194.
                                        return v2892;
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v2873 = C::value_type(ctx, v2312);
                        let v2874 = &C::type_register_class(ctx, v2873);
                        if let Some(v2875) = v2874 {
                            match v2875 {
                                &RegisterClass::Gpr {
                                    single_register: v2881,
                                } => {
                                    if let Some(v2021) = v2020 {
                                        if let &RegisterClass::Xmm = v2021 {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2882 = constructor_put_in_gpr(ctx, v2312);
                                                let v2876 = C::ty_bits(ctx, v5);
                                                let v2883 = constructor_bitcast_gpr_to_xmm(ctx, v2876, v2882);
                                                let v2884 = constructor_output_xmm(ctx, v2883);
                                                let v2885 = Some(v2884);
                                                // Rule at src/isa/x64/lower.isle line 4188.
                                                return v2885;
                                            }
                                        }
                                    }
                                }
                                &RegisterClass::Xmm => {
                                    if v3 == I128 {
                                        let v2877 = constructor_put_in_xmm(ctx, v2312);
                                        let v2886 = constructor_bitcast_xmm_to_gprs(ctx, v2877);
                                        let v2887 = C::output(ctx, v2886);
                                        let v2888 = Some(v2887);
                                        // Rule at src/isa/x64/lower.isle line 4191.
                                        return v2888;
                                    }
                                    if let Some(v2021) = v2020 {
                                        if let &RegisterClass::Gpr {
                                            single_register: v2022,
                                        } = v2021 {
                                            let v4 = C::fits_in_64(ctx, v3);
                                            if let Some(v5) = v4 {
                                                let v2877 = constructor_put_in_xmm(ctx, v2312);
                                                let v2876 = C::ty_bits(ctx, v5);
                                                let v2878 = constructor_bitcast_xmm_to_gpr(ctx, v2876, v2877);
                                                let v2879 = constructor_output_gpr(ctx, v2878);
                                                let v2880 = Some(v2879);
                                                // Rule at src/isa/x64/lower.isle line 4185.
                                                return v2880;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v70 = C::zero_offset(ctx);
                                let v2314 = &constructor_to_amode(ctx, v2313, v2312, v70);
                                let v2315 = constructor_x64_mov(ctx, v2314);
                                let v2316 = constructor_output_reg(ctx, v2315);
                                let v2317 = Some(v2316);
                                // Rule at src/isa/x64/lower.isle line 3375.
                                return v2317;
                            }
                            I128 => {
                                let v2326 = C::use_cmpxchg16b(ctx);
                                if v2326 == true {
                                    let v2327 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v16 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v2328 = C::value_regs(ctx, v2327, v16);
                                    let v2329 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v568 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v2330 = C::value_regs(ctx, v2329, v568);
                                    let v2331 = C::zero_offset(ctx);
                                    let v2332 = &constructor_to_amode(ctx, v2313, v2312, v2331);
                                    let v2333 = &C::amode_to_synthetic_amode(ctx, v2332);
                                    let v2334 = constructor_x64_cmpxchg16b(ctx, v2328, v2330, v2333);
                                    let v2335 = C::output(ctx, v2334);
                                    let v2336 = Some(v2335);
                                    // Rule at src/isa/x64/lower.isle line 3380.
                                    return v2336;
                                }
                            }
                            _ => {}
                        }
                        let v1732 = C::fits_in_32(ctx, v3);
                        if let Some(v1733) = v1732 {
                            let v2318 = C::ty_int(ctx, v3);
                            if let Some(v2319) = v2318 {
                                let v2027 = C::ty_bits_u16(ctx, v1733);
                                let v2029 = &C::ext_mode(ctx, v2027, 0x40_u16);
                                let v2320 = C::zero_offset(ctx);
                                let v2321 = &constructor_to_amode(ctx, v2313, v2312, v2320);
                                let v2322 = &constructor_amode_to_gpr_mem(ctx, v2321);
                                let v2323 = constructor_x64_movzx(ctx, v2029, v2322);
                                let v2324 = constructor_output_gpr(ctx, v2323);
                                let v2325 = Some(v2324);
                                // Rule at src/isa/x64/lower.isle line 3377.
                                return v2325;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1253,
            args: v1254,
        } => {
            if let &Opcode::Return = v1253 {
                let v1255 = C::value_list_slice(ctx, v1254);
                let v1256 = constructor_lower_return(ctx, v1255);
                let v1257 = Some(v1256);
                // Rule at src/isa/x64/lower.isle line 1921.
                return v1257;
            }
        }
        &InstructionData::NullAry {
            opcode: ref v1752,
        } => {
            match v1752 {
                &Opcode::Debugtrap => {
                    let v1753 = &constructor_x64_hlt(ctx);
                    let v1754 = constructor_side_effect(ctx, v1753);
                    let v1755 = Some(v1754);
                    // Rule at src/isa/x64/lower.isle line 2590.
                    return v1755;
                }
                &Opcode::GetPinnedReg => {
                    let v3025 = constructor_read_pinned_gpr(ctx);
                    let v3026 = constructor_output_gpr(ctx, v3025);
                    let v3027 = Some(v3026);
                    // Rule at src/isa/x64/lower.isle line 4454.
                    return v3027;
                }
                &Opcode::GetFramePointer => {
                    let v2461 = constructor_x64_rbp(ctx);
                    let v2462 = constructor_output_reg(ctx, v2461);
                    let v2463 = Some(v2462);
                    // Rule at src/isa/x64/lower.isle line 3489.
                    return v2463;
                }
                &Opcode::GetStackPointer => {
                    let v2464 = constructor_x64_rsp(ctx);
                    let v2465 = constructor_output_reg(ctx, v2464);
                    let v2466 = Some(v2465);
                    // Rule at src/isa/x64/lower.isle line 3492.
                    return v2466;
                }
                &Opcode::GetReturnAddress => {
                    let v2461 = constructor_x64_rbp(ctx);
                    let v69 = C::mem_flags_trusted(ctx);
                    let v2467 = Amode::ImmReg {
                        simm32: 8_i32,
                        base: v2461,
                        flags: v69,
                    };
                    let v2468 = &C::amode_to_synthetic_amode(ctx, &v2467);
                    let v2469 = constructor_x64_load(ctx, I64, v2468, &ExtKind::None);
                    let v2470 = constructor_output_reg(ctx, v2469);
                    let v2471 = Some(v2470);
                    // Rule at src/isa/x64/lower.isle line 3495.
                    return v2471;
                }
                &Opcode::Nop => {
                    let v3437 = C::invalid_reg(ctx);
                    let v3438 = constructor_output_reg(ctx, v3437);
                    let v3439 = Some(v3438);
                    // Rule at src/isa/x64/lower.isle line 5013.
                    return v3439;
                }
                &Opcode::Fence => {
                    let v2288 = &constructor_x64_mfence(ctx);
                    let v2289 = constructor_side_effect(ctx, v2288);
                    let v2290 = Some(v2289);
                    // Rule at src/isa/x64/lower.isle line 3354.
                    return v2290;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v3040,
            args: ref v3041,
            imm: v3042,
        } => {
            if let &Opcode::Shuffle = v3040 {
                let v656 = C::use_sse41(ctx);
                if v656 == true {
                    let v3046 = C::pblendw_imm(ctx, v3042);
                    if let Some(v3047) = v3046 {
                        let v3043 = C::unpack_value_array_2(ctx, v3041);
                        let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                        let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                        let v3050 = constructor_x64_pblendw(ctx, v3048, v3049, v3047);
                        let v3051 = constructor_output_xmm(ctx, v3050);
                        let v3052 = Some(v3051);
                        // Rule at src/isa/x64/lower.isle line 4478.
                        return v3052;
                    }
                }
                let v750 = C::use_ssse3(ctx);
                if v750 == true {
                    let v3053 = C::palignr_imm_from_immediate(ctx, v3042);
                    if let Some(v3054) = v3053 {
                        let v3043 = C::unpack_value_array_2(ctx, v3041);
                        let v3055 = constructor_put_in_xmm(ctx, v3043.1);
                        let v3056 = &C::put_in_xmm_mem(ctx, v3043.0);
                        let v3057 = constructor_x64_palignr(ctx, v3055, v3056, v3054);
                        let v3058 = constructor_output_xmm(ctx, v3057);
                        let v3059 = Some(v3058);
                        // Rule at src/isa/x64/lower.isle line 4489.
                        return v3059;
                    }
                }
                let v3060 = C::pshuflw_lhs_imm(ctx, v3042);
                if let Some(v3061) = v3060 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3062 = &C::put_in_xmm_mem(ctx, v3043.0);
                    let v3063 = constructor_x64_pshuflw(ctx, v3062, v3061);
                    let v3064 = constructor_output_xmm(ctx, v3063);
                    let v3065 = Some(v3064);
                    // Rule at src/isa/x64/lower.isle line 4501.
                    return v3065;
                }
                let v3066 = C::pshuflw_rhs_imm(ctx, v3042);
                if let Some(v3067) = v3066 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3068 = &C::put_in_xmm_mem(ctx, v3043.1);
                    let v3069 = constructor_x64_pshuflw(ctx, v3068, v3067);
                    let v3070 = constructor_output_xmm(ctx, v3069);
                    let v3071 = Some(v3070);
                    // Rule at src/isa/x64/lower.isle line 4503.
                    return v3071;
                }
                let v3072 = C::pshufhw_lhs_imm(ctx, v3042);
                if let Some(v3073) = v3072 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3062 = &C::put_in_xmm_mem(ctx, v3043.0);
                    let v3074 = constructor_x64_pshufhw(ctx, v3062, v3073);
                    let v3075 = constructor_output_xmm(ctx, v3074);
                    let v3076 = Some(v3075);
                    // Rule at src/isa/x64/lower.isle line 4505.
                    return v3076;
                }
                let v3077 = C::pshufhw_rhs_imm(ctx, v3042);
                if let Some(v3078) = v3077 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3068 = &C::put_in_xmm_mem(ctx, v3043.1);
                    let v3079 = constructor_x64_pshufhw(ctx, v3068, v3078);
                    let v3080 = constructor_output_xmm(ctx, v3079);
                    let v3081 = Some(v3080);
                    // Rule at src/isa/x64/lower.isle line 4507.
                    return v3081;
                }
                let v3082 = C::pshufd_lhs_imm(ctx, v3042);
                if let Some(v3083) = v3082 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3062 = &C::put_in_xmm_mem(ctx, v3043.0);
                    let v3084 = constructor_x64_pshufd(ctx, v3062, v3083);
                    let v3085 = constructor_output_xmm(ctx, v3084);
                    let v3086 = Some(v3085);
                    // Rule at src/isa/x64/lower.isle line 4524.
                    return v3086;
                }
                let v3087 = C::pshufd_rhs_imm(ctx, v3042);
                if let Some(v3088) = v3087 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3068 = &C::put_in_xmm_mem(ctx, v3043.1);
                    let v3089 = constructor_x64_pshufd(ctx, v3068, v3088);
                    let v3090 = constructor_output_xmm(ctx, v3089);
                    let v3091 = Some(v3090);
                    // Rule at src/isa/x64/lower.isle line 4526.
                    return v3091;
                }
                let v3092 = C::u128_from_immediate(ctx, v3042);
                if let Some(v3093) = v3092 {
                    match v3093 {
                        0x0_u128 => {
                            if v750 == true {
                                let v3043 = C::unpack_value_array_2(ctx, v3041);
                                let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                                let v756 = constructor_xmm_zero(ctx, I8X16);
                                let v2821 = &C::xmm_to_xmm_mem(ctx, v756);
                                let v3118 = constructor_x64_pshufb(ctx, v3048, v2821);
                                let v3119 = constructor_output_xmm(ctx, v3118);
                                let v3120 = Some(v3119);
                                // Rule at src/isa/x64/lower.isle line 4563.
                                return v3120;
                            }
                        }
                        0x17071606150514041303120211011000_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3097 = constructor_x64_punpcklbw(ctx, v3048, v3049);
                            let v3098 = constructor_output_xmm(ctx, v3097);
                            let v3099 = Some(v3098);
                            // Rule at src/isa/x64/lower.isle line 4537.
                            return v3099;
                        }
                        0x17160706151405041312030211100100_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3103 = constructor_x64_punpcklwd(ctx, v3048, v3049);
                            let v3104 = constructor_output_xmm(ctx, v3103);
                            let v3105 = Some(v3104);
                            // Rule at src/isa/x64/lower.isle line 4543.
                            return v3105;
                        }
                        0x17161514070605041312111003020100_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3109 = constructor_x64_punpckldq(ctx, v3048, v3049);
                            let v3110 = constructor_output_xmm(ctx, v3109);
                            let v3111 = Some(v3110);
                            // Rule at src/isa/x64/lower.isle line 4549.
                            return v3111;
                        }
                        0x17161514131211100706050403020100_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3115 = constructor_x64_punpcklqdq(ctx, v3048, v3049);
                            let v3116 = constructor_output_xmm(ctx, v3115);
                            let v3117 = Some(v3116);
                            // Rule at src/isa/x64/lower.isle line 4555.
                            return v3117;
                        }
                        0x1f0f1e0e1d0d1c0c1b0b1a0a19091808_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3094 = constructor_x64_punpckhbw(ctx, v3048, v3049);
                            let v3095 = constructor_output_xmm(ctx, v3094);
                            let v3096 = Some(v3095);
                            // Rule at src/isa/x64/lower.isle line 4535.
                            return v3096;
                        }
                        0x1f1e0f0e1d1c0d0c1b1a0b0a19180908_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3100 = constructor_x64_punpckhwd(ctx, v3048, v3049);
                            let v3101 = constructor_output_xmm(ctx, v3100);
                            let v3102 = Some(v3101);
                            // Rule at src/isa/x64/lower.isle line 4541.
                            return v3102;
                        }
                        0x1f1e1d1c0f0e0d0c1b1a19180b0a0908_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3106 = constructor_x64_punpckhdq(ctx, v3048, v3049);
                            let v3107 = constructor_output_xmm(ctx, v3106);
                            let v3108 = Some(v3107);
                            // Rule at src/isa/x64/lower.isle line 4547.
                            return v3108;
                        }
                        0x1f1e1d1c1b1a19180f0e0d0c0b0a0908_u128 => {
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3112 = constructor_x64_punpckhqdq(ctx, v3048, v3049);
                            let v3113 = constructor_output_xmm(ctx, v3112);
                            let v3114 = Some(v3113);
                            // Rule at src/isa/x64/lower.isle line 4553.
                            return v3114;
                        }
                        _ => {}
                    }
                }
                let v3121 = C::shufps_imm(ctx, v3042);
                if let Some(v3122) = v3121 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                    let v3049 = &C::put_in_xmm_mem(ctx, v3043.1);
                    let v3123 = constructor_x64_shufps(ctx, v3048, v3049, v3122);
                    let v3124 = constructor_output_xmm(ctx, v3123);
                    let v3125 = Some(v3124);
                    // Rule at src/isa/x64/lower.isle line 4577.
                    return v3125;
                }
                let v3126 = C::shufps_rev_imm(ctx, v3042);
                if let Some(v3127) = v3126 {
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3055 = constructor_put_in_xmm(ctx, v3043.1);
                    let v3056 = &C::put_in_xmm_mem(ctx, v3043.0);
                    let v3128 = constructor_x64_shufps(ctx, v3055, v3056, v3127);
                    let v3129 = constructor_output_xmm(ctx, v3128);
                    let v3130 = Some(v3129);
                    // Rule at src/isa/x64/lower.isle line 4579.
                    return v3130;
                }
                let v3131 = &C::vec_mask_from_immediate(ctx, v3042);
                if let Some(v3132) = v3131 {
                    if v750 == true {
                        let v3043 = C::unpack_value_array_2(ctx, v3041);
                        if v3043.0 == v3043.1 {
                            let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3133 = C::shuffle_0_31_mask(ctx, v3132);
                            let v3134 = &constructor_const_to_xmm_mem(ctx, v3133);
                            let v3135 = constructor_x64_pshufb(ctx, v3048, v3134);
                            let v3136 = constructor_output_xmm(ctx, v3135);
                            let v3137 = Some(v3136);
                            // Rule at src/isa/x64/lower.isle line 4592.
                            return v3137;
                        }
                    }
                    let v502 = C::use_avx512vl(ctx);
                    if v502 == true {
                        let v3142 = C::use_avx512vbmi(ctx);
                        if v3142 == true {
                            let v3138 = C::perm_from_mask_with_zeros(ctx, v3132);
                            if let Some(v3139) = v3138 {
                                let v3143 = constructor_x64_xmm_load_const(ctx, I8X16, v3139.0);
                                let v3043 = C::unpack_value_array_2(ctx, v3041);
                                let v3144 = constructor_put_in_xmm(ctx, v3043.0);
                                let v3145 = &C::put_in_xmm_mem(ctx, v3043.1);
                                let v3146 = constructor_x64_vpermi2b(ctx, v3143, v3144, v3145);
                                let v3147 = &constructor_const_to_xmm_mem(ctx, v3139.1);
                                let v3148 = constructor_x64_andps(ctx, v3146, v3147);
                                let v3149 = constructor_output_xmm(ctx, v3148);
                                let v3150 = Some(v3149);
                                // Rule at src/isa/x64/lower.isle line 4599.
                                return v3150;
                            }
                            let v3151 = C::perm_from_mask(ctx, v3132);
                            let v3152 = constructor_x64_xmm_load_const(ctx, I8X16, v3151);
                            let v3043 = C::unpack_value_array_2(ctx, v3041);
                            let v3153 = constructor_put_in_xmm(ctx, v3043.0);
                            let v3154 = &C::put_in_xmm_mem(ctx, v3043.1);
                            let v3155 = constructor_x64_vpermi2b(ctx, v3152, v3153, v3154);
                            let v3156 = constructor_output_xmm(ctx, v3155);
                            let v3157 = Some(v3156);
                            // Rule at src/isa/x64/lower.isle line 4606.
                            return v3157;
                        }
                    }
                    let v3043 = C::unpack_value_array_2(ctx, v3041);
                    let v3048 = constructor_put_in_xmm(ctx, v3043.0);
                    let v3158 = C::shuffle_0_15_mask(ctx, v3132);
                    let v3159 = &constructor_const_to_reg_mem(ctx, v3158);
                    let v3160 = constructor_lower_pshufb(ctx, v3048, v3159);
                    let v3161 = constructor_put_in_xmm(ctx, v3043.1);
                    let v3162 = C::shuffle_16_31_mask(ctx, v3132);
                    let v3163 = &constructor_const_to_reg_mem(ctx, v3162);
                    let v3164 = constructor_lower_pshufb(ctx, v3161, v3163);
                    let v3165 = &C::xmm_to_xmm_mem(ctx, v3164);
                    let v3166 = constructor_x64_por(ctx, v3160, v3165);
                    let v3167 = constructor_output_xmm(ctx, v3166);
                    let v3168 = Some(v3167);
                    // Rule at src/isa/x64/lower.isle line 4614.
                    return v3168;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v2930,
            stack_slot: v2931,
            offset: v2932,
        } => {
            if let &Opcode::StackAddr = v2930 {
                let v2933 = constructor_stack_addr_impl(ctx, v2931, v2932);
                let v2934 = constructor_output_gpr(ctx, v2933);
                let v2935 = Some(v2934);
                // Rule at src/isa/x64/lower.isle line 4295.
                return v2935;
            }
        }
        &InstructionData::Store {
            opcode: ref v2129,
            args: ref v2130,
            flags: v2131,
            offset: v2132,
        } => {
            match v2129 {
                &Opcode::Store => {
                    let v2133 = C::unpack_value_array_2(ctx, v2130);
                    let v2136 = C::value_type(ctx, v2133.0);
                    let v2156 = C::fits_in_64(ctx, v2136);
                    if let Some(v2157) = v2156 {
                        let v2158 = C::i32_from_iconst(ctx, v2133.0);
                        if let Some(v2159) = v2158 {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2160 = &constructor_x64_movimm_m(ctx, v2157, v2141, v2159);
                            let v2161 = constructor_side_effect(ctx, v2160);
                            let v2162 = Some(v2161);
                            // Rule at src/isa/x64/lower.isle line 3094.
                            return v2162;
                        }
                    }
                    let v2201 = C::def_inst(ctx, v2133.0);
                    if let Some(v2202) = v2201 {
                        let v2203 = C::first_result(ctx, v2202);
                        if let Some(v2204) = v2203 {
                            let v2206 = &C::inst_data(ctx, v2202);
                            match v2206 {
                                &InstructionData::Binary {
                                    opcode: ref v2232,
                                    args: ref v2233,
                                } => {
                                    match v2232 {
                                        &Opcode::Iadd => {
                                            let v2205 = C::value_type(ctx, v2204);
                                            let v2230 = C::ty_32_or_64(ctx, v2205);
                                            if let Some(v2231) = v2230 {
                                                let v2234 = C::unpack_value_array_2(ctx, v2233);
                                                let v2237 = &C::sinkable_load(ctx, v2234.0);
                                                if let Some(v2238) = v2237 {
                                                    let v2239 = C::def_inst(ctx, v2234.0);
                                                    if let Some(v2240) = v2239 {
                                                        let v2241 = &C::inst_data(ctx, v2240);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2242,
                                                            arg: v2243,
                                                            flags: v2244,
                                                            offset: v2245,
                                                        } = v2241 {
                                                            if let &Opcode::Load = v2242 {
                                                                if v2131 == v2244 {
                                                                    if v2132 == v2245 {
                                                                        if v2133.1 == v2243 {
                                                                            let v2246 = &constructor_sink_load_to_reg_mem_imm(ctx, v2238);
                                                                            let v2247 = &constructor_to_amode(ctx, v2244, v2243, v2245);
                                                                            let v2248 = constructor_put_in_gpr(ctx, v2234.1);
                                                                            let v2249 = &constructor_x64_add_mem(ctx, v2231, v2247, v2248);
                                                                            let v2250 = constructor_side_effect(ctx, v2249);
                                                                            let v2251 = Some(v2250);
                                                                            // Rule at src/isa/x64/lower.isle line 3227.
                                                                            return v2251;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2252 = &C::sinkable_load(ctx, v2234.1);
                                                if let Some(v2253) = v2252 {
                                                    let v2254 = C::def_inst(ctx, v2234.1);
                                                    if let Some(v2255) = v2254 {
                                                        let v2256 = &C::inst_data(ctx, v2255);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2257,
                                                            arg: v2258,
                                                            flags: v2259,
                                                            offset: v2260,
                                                        } = v2256 {
                                                            if let &Opcode::Load = v2257 {
                                                                if v2131 == v2259 {
                                                                    if v2132 == v2260 {
                                                                        if v2133.1 == v2258 {
                                                                            let v2261 = &constructor_sink_load_to_reg_mem_imm(ctx, v2253);
                                                                            let v2262 = &constructor_to_amode(ctx, v2259, v2258, v2260);
                                                                            let v2263 = constructor_put_in_gpr(ctx, v2234.0);
                                                                            let v2264 = &constructor_x64_add_mem(ctx, v2231, v2262, v2263);
                                                                            let v2265 = constructor_side_effect(ctx, v2264);
                                                                            let v2266 = Some(v2265);
                                                                            // Rule at src/isa/x64/lower.isle line 3241.
                                                                            return v2266;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v2205 = C::value_type(ctx, v2204);
                                            let v2230 = C::ty_32_or_64(ctx, v2205);
                                            if let Some(v2231) = v2230 {
                                                let v2234 = C::unpack_value_array_2(ctx, v2233);
                                                let v2237 = &C::sinkable_load(ctx, v2234.0);
                                                if let Some(v2238) = v2237 {
                                                    let v2239 = C::def_inst(ctx, v2234.0);
                                                    if let Some(v2240) = v2239 {
                                                        let v2241 = &C::inst_data(ctx, v2240);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2242,
                                                            arg: v2243,
                                                            flags: v2244,
                                                            offset: v2245,
                                                        } = v2241 {
                                                            if let &Opcode::Load = v2242 {
                                                                if v2131 == v2244 {
                                                                    if v2132 == v2245 {
                                                                        if v2133.1 == v2243 {
                                                                            let v2246 = &constructor_sink_load_to_reg_mem_imm(ctx, v2238);
                                                                            let v2247 = &constructor_to_amode(ctx, v2244, v2243, v2245);
                                                                            let v2248 = constructor_put_in_gpr(ctx, v2234.1);
                                                                            let v2267 = &constructor_x64_sub_mem(ctx, v2231, v2247, v2248);
                                                                            let v2268 = constructor_side_effect(ctx, v2267);
                                                                            let v2269 = Some(v2268);
                                                                            // Rule at src/isa/x64/lower.isle line 3255.
                                                                            return v2269;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v2205 = C::value_type(ctx, v2204);
                                            let v2230 = C::ty_32_or_64(ctx, v2205);
                                            if let Some(v2231) = v2230 {
                                                let v2234 = C::unpack_value_array_2(ctx, v2233);
                                                let v2237 = &C::sinkable_load(ctx, v2234.0);
                                                if let Some(v2238) = v2237 {
                                                    let v2239 = C::def_inst(ctx, v2234.0);
                                                    if let Some(v2240) = v2239 {
                                                        let v2241 = &C::inst_data(ctx, v2240);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2242,
                                                            arg: v2243,
                                                            flags: v2244,
                                                            offset: v2245,
                                                        } = v2241 {
                                                            if let &Opcode::Load = v2242 {
                                                                if v2131 == v2244 {
                                                                    if v2132 == v2245 {
                                                                        if v2133.1 == v2243 {
                                                                            let v2246 = &constructor_sink_load_to_reg_mem_imm(ctx, v2238);
                                                                            let v2247 = &constructor_to_amode(ctx, v2244, v2243, v2245);
                                                                            let v2248 = constructor_put_in_gpr(ctx, v2234.1);
                                                                            let v2270 = &constructor_x64_and_mem(ctx, v2231, v2247, v2248);
                                                                            let v2271 = constructor_side_effect(ctx, v2270);
                                                                            let v2272 = Some(v2271);
                                                                            // Rule at src/isa/x64/lower.isle line 3269.
                                                                            return v2272;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2252 = &C::sinkable_load(ctx, v2234.1);
                                                if let Some(v2253) = v2252 {
                                                    let v2254 = C::def_inst(ctx, v2234.1);
                                                    if let Some(v2255) = v2254 {
                                                        let v2256 = &C::inst_data(ctx, v2255);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2257,
                                                            arg: v2258,
                                                            flags: v2259,
                                                            offset: v2260,
                                                        } = v2256 {
                                                            if let &Opcode::Load = v2257 {
                                                                if v2131 == v2259 {
                                                                    if v2132 == v2260 {
                                                                        if v2133.1 == v2258 {
                                                                            let v2261 = &constructor_sink_load_to_reg_mem_imm(ctx, v2253);
                                                                            let v2262 = &constructor_to_amode(ctx, v2259, v2258, v2260);
                                                                            let v2263 = constructor_put_in_gpr(ctx, v2234.0);
                                                                            let v2273 = &constructor_x64_and_mem(ctx, v2231, v2262, v2263);
                                                                            let v2274 = constructor_side_effect(ctx, v2273);
                                                                            let v2275 = Some(v2274);
                                                                            // Rule at src/isa/x64/lower.isle line 3283.
                                                                            return v2275;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v2205 = C::value_type(ctx, v2204);
                                            let v2230 = C::ty_32_or_64(ctx, v2205);
                                            if let Some(v2231) = v2230 {
                                                let v2234 = C::unpack_value_array_2(ctx, v2233);
                                                let v2237 = &C::sinkable_load(ctx, v2234.0);
                                                if let Some(v2238) = v2237 {
                                                    let v2239 = C::def_inst(ctx, v2234.0);
                                                    if let Some(v2240) = v2239 {
                                                        let v2241 = &C::inst_data(ctx, v2240);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2242,
                                                            arg: v2243,
                                                            flags: v2244,
                                                            offset: v2245,
                                                        } = v2241 {
                                                            if let &Opcode::Load = v2242 {
                                                                if v2131 == v2244 {
                                                                    if v2132 == v2245 {
                                                                        if v2133.1 == v2243 {
                                                                            let v2246 = &constructor_sink_load_to_reg_mem_imm(ctx, v2238);
                                                                            let v2247 = &constructor_to_amode(ctx, v2244, v2243, v2245);
                                                                            let v2248 = constructor_put_in_gpr(ctx, v2234.1);
                                                                            let v2276 = &constructor_x64_or_mem(ctx, v2231, v2247, v2248);
                                                                            let v2277 = constructor_side_effect(ctx, v2276);
                                                                            let v2278 = Some(v2277);
                                                                            // Rule at src/isa/x64/lower.isle line 3297.
                                                                            return v2278;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2252 = &C::sinkable_load(ctx, v2234.1);
                                                if let Some(v2253) = v2252 {
                                                    let v2254 = C::def_inst(ctx, v2234.1);
                                                    if let Some(v2255) = v2254 {
                                                        let v2256 = &C::inst_data(ctx, v2255);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2257,
                                                            arg: v2258,
                                                            flags: v2259,
                                                            offset: v2260,
                                                        } = v2256 {
                                                            if let &Opcode::Load = v2257 {
                                                                if v2131 == v2259 {
                                                                    if v2132 == v2260 {
                                                                        if v2133.1 == v2258 {
                                                                            let v2261 = &constructor_sink_load_to_reg_mem_imm(ctx, v2253);
                                                                            let v2262 = &constructor_to_amode(ctx, v2259, v2258, v2260);
                                                                            let v2263 = constructor_put_in_gpr(ctx, v2234.0);
                                                                            let v2279 = &constructor_x64_or_mem(ctx, v2231, v2262, v2263);
                                                                            let v2280 = constructor_side_effect(ctx, v2279);
                                                                            let v2281 = Some(v2280);
                                                                            // Rule at src/isa/x64/lower.isle line 3311.
                                                                            return v2281;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v2205 = C::value_type(ctx, v2204);
                                            let v2230 = C::ty_32_or_64(ctx, v2205);
                                            if let Some(v2231) = v2230 {
                                                let v2234 = C::unpack_value_array_2(ctx, v2233);
                                                let v2237 = &C::sinkable_load(ctx, v2234.0);
                                                if let Some(v2238) = v2237 {
                                                    let v2239 = C::def_inst(ctx, v2234.0);
                                                    if let Some(v2240) = v2239 {
                                                        let v2241 = &C::inst_data(ctx, v2240);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2242,
                                                            arg: v2243,
                                                            flags: v2244,
                                                            offset: v2245,
                                                        } = v2241 {
                                                            if let &Opcode::Load = v2242 {
                                                                if v2131 == v2244 {
                                                                    if v2132 == v2245 {
                                                                        if v2133.1 == v2243 {
                                                                            let v2246 = &constructor_sink_load_to_reg_mem_imm(ctx, v2238);
                                                                            let v2247 = &constructor_to_amode(ctx, v2244, v2243, v2245);
                                                                            let v2248 = constructor_put_in_gpr(ctx, v2234.1);
                                                                            let v2282 = &constructor_x64_xor_mem(ctx, v2231, v2247, v2248);
                                                                            let v2283 = constructor_side_effect(ctx, v2282);
                                                                            let v2284 = Some(v2283);
                                                                            // Rule at src/isa/x64/lower.isle line 3325.
                                                                            return v2284;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v2252 = &C::sinkable_load(ctx, v2234.1);
                                                if let Some(v2253) = v2252 {
                                                    let v2254 = C::def_inst(ctx, v2234.1);
                                                    if let Some(v2255) = v2254 {
                                                        let v2256 = &C::inst_data(ctx, v2255);
                                                        if let &InstructionData::Load {
                                                            opcode: ref v2257,
                                                            arg: v2258,
                                                            flags: v2259,
                                                            offset: v2260,
                                                        } = v2256 {
                                                            if let &Opcode::Load = v2257 {
                                                                if v2131 == v2259 {
                                                                    if v2132 == v2260 {
                                                                        if v2133.1 == v2258 {
                                                                            let v2261 = &constructor_sink_load_to_reg_mem_imm(ctx, v2253);
                                                                            let v2262 = &constructor_to_amode(ctx, v2259, v2258, v2260);
                                                                            let v2263 = constructor_put_in_gpr(ctx, v2234.0);
                                                                            let v2285 = &constructor_x64_xor_mem(ctx, v2231, v2262, v2263);
                                                                            let v2286 = constructor_side_effect(ctx, v2285);
                                                                            let v2287 = Some(v2286);
                                                                            // Rule at src/isa/x64/lower.isle line 3339.
                                                                            return v2287;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v2207,
                                    arg: v2208,
                                    imm: v2209,
                                } => {
                                    if let &Opcode::Extractlane = v2207 {
                                        let v2205 = C::value_type(ctx, v2204);
                                        match v2205 {
                                            I8 => {
                                                let v656 = C::use_sse41(ctx);
                                                if v656 == true {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                    let v2218 = &constructor_x64_pextrb_store(ctx, v2141, v2211, v2210);
                                                    let v2219 = constructor_side_effect(ctx, v2218);
                                                    let v2220 = Some(v2219);
                                                    // Rule at src/isa/x64/lower.isle line 3195.
                                                    return v2220;
                                                }
                                            }
                                            I16 => {
                                                let v656 = C::use_sse41(ctx);
                                                if v656 == true {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                    let v2221 = &constructor_x64_pextrw_store(ctx, v2141, v2211, v2210);
                                                    let v2222 = constructor_side_effect(ctx, v2221);
                                                    let v2223 = Some(v2222);
                                                    // Rule at src/isa/x64/lower.isle line 3202.
                                                    return v2223;
                                                }
                                            }
                                            I32 => {
                                                let v656 = C::use_sse41(ctx);
                                                if v656 == true {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                    let v2224 = &constructor_x64_pextrd_store(ctx, v2141, v2211, v2210);
                                                    let v2225 = constructor_side_effect(ctx, v2224);
                                                    let v2226 = Some(v2225);
                                                    // Rule at src/isa/x64/lower.isle line 3209.
                                                    return v2226;
                                                }
                                            }
                                            I64 => {
                                                let v656 = C::use_sse41(ctx);
                                                if v656 == true {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                    let v2227 = &constructor_x64_pextrq_store(ctx, v2141, v2211, v2210);
                                                    let v2228 = constructor_side_effect(ctx, v2227);
                                                    let v2229 = Some(v2228);
                                                    // Rule at src/isa/x64/lower.isle line 3216.
                                                    return v2229;
                                                }
                                            }
                                            F32 => {
                                                let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                if v2210 == 0x0_u8 {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2212 = &constructor_x64_movss_store(ctx, v2141, v2211);
                                                    let v2213 = constructor_side_effect(ctx, v2212);
                                                    let v2214 = Some(v2213);
                                                    // Rule at src/isa/x64/lower.isle line 3183.
                                                    return v2214;
                                                }
                                            }
                                            F64 => {
                                                let v2210 = C::u8_from_uimm8(ctx, v2209);
                                                if v2210 == 0x0_u8 {
                                                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                                    let v2211 = constructor_put_in_xmm(ctx, v2208);
                                                    let v2215 = &constructor_x64_movsd_store(ctx, v2141, v2211);
                                                    let v2216 = constructor_side_effect(ctx, v2215);
                                                    let v2217 = Some(v2216);
                                                    // Rule at src/isa/x64/lower.isle line 3189.
                                                    return v2217;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    match v2136 {
                        I128 => {
                            let v2189 = C::put_in_regs(ctx, v2133.0);
                            let v2190 = constructor_value_regs_get_gpr(ctx, v2189, 0x0_usize);
                            let v2191 = constructor_value_regs_get_gpr(ctx, v2189, 0x1_usize);
                            let v2192 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2193 = &C::amode_offset(ctx, v2192, 8_i32);
                            let v2194 = &C::amode_to_synthetic_amode(ctx, v2192);
                            let v2195 = &constructor_x64_movrm(ctx, I64, v2194, v2190);
                            let v2196 = &C::amode_to_synthetic_amode(ctx, v2193);
                            let v2197 = &constructor_x64_movrm(ctx, I64, v2196, v2191);
                            let v2198 = &constructor_side_effect_concat(ctx, v2195, v2197);
                            let v2199 = constructor_side_effect(ctx, v2198);
                            let v2200 = Some(v2199);
                            // Rule at src/isa/x64/lower.isle line 3164.
                            return v2200;
                        }
                        F16 => {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                                let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                                let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                                let v2169 = &constructor_x64_pextrw_store(ctx, v2141, v2164, 0x0_u8);
                                let v2170 = constructor_side_effect(ctx, v2169);
                                let v2171 = Some(v2170);
                                // Rule at src/isa/x64/lower.isle line 3107.
                                return v2171;
                            }
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2165 = constructor_bitcast_xmm_to_gpr(ctx, 0x10_u8, v2164);
                            let v2166 = &constructor_x64_movrm(ctx, I16, v2141, v2165);
                            let v2167 = constructor_side_effect(ctx, v2166);
                            let v2168 = Some(v2167);
                            // Rule at src/isa/x64/lower.isle line 3100.
                            return v2168;
                        }
                        F32 => {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2172 = &constructor_x64_movss_store(ctx, v2141, v2164);
                            let v2173 = constructor_side_effect(ctx, v2172);
                            let v2174 = Some(v2173);
                            // Rule at src/isa/x64/lower.isle line 3116.
                            return v2174;
                        }
                        F64 => {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2175 = &constructor_x64_movsd_store(ctx, v2141, v2164);
                            let v2176 = constructor_side_effect(ctx, v2175);
                            let v2177 = Some(v2176);
                            // Rule at src/isa/x64/lower.isle line 3124.
                            return v2177;
                        }
                        F128 => {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2178 = &constructor_x64_movdqu_store(ctx, v2141, v2164);
                            let v2179 = constructor_side_effect(ctx, v2178);
                            let v2180 = Some(v2179);
                            // Rule at src/isa/x64/lower.isle line 3132.
                            return v2180;
                        }
                        F32X4 => {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2181 = &constructor_x64_movups_store(ctx, v2141, v2164);
                            let v2182 = constructor_side_effect(ctx, v2181);
                            let v2183 = Some(v2182);
                            // Rule at src/isa/x64/lower.isle line 3140.
                            return v2183;
                        }
                        F64X2 => {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                            let v2184 = &constructor_x64_movupd_store(ctx, v2141, v2164);
                            let v2185 = constructor_side_effect(ctx, v2184);
                            let v2186 = Some(v2185);
                            // Rule at src/isa/x64/lower.isle line 3148.
                            return v2186;
                        }
                        _ => {}
                    }
                    let v2187 = C::ty_vec128_int(ctx, v2136);
                    if let Some(v2188) = v2187 {
                        let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                        let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                        let v2164 = constructor_put_in_xmm(ctx, v2133.0);
                        let v2178 = &constructor_x64_movdqu_store(ctx, v2141, v2164);
                        let v2179 = constructor_side_effect(ctx, v2178);
                        let v2180 = Some(v2179);
                        // Rule at src/isa/x64/lower.isle line 3156.
                        return v2180;
                    }
                    let v2137 = &C::type_register_class(ctx, v2136);
                    if let Some(v2138) = v2137 {
                        if let &RegisterClass::Gpr {
                            single_register: v2139,
                        } = v2138 {
                            let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                            let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                            let v2142 = constructor_put_in_gpr(ctx, v2133.0);
                            let v2143 = &constructor_x64_movrm(ctx, v2136, v2141, v2142);
                            let v2144 = constructor_side_effect(ctx, v2143);
                            let v2145 = Some(v2144);
                            // Rule at src/isa/x64/lower.isle line 3075.
                            return v2145;
                        }
                    }
                }
                &Opcode::Istore8 => {
                    let v2133 = C::unpack_value_array_2(ctx, v2130);
                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                    let v2142 = constructor_put_in_gpr(ctx, v2133.0);
                    let v2147 = &constructor_x64_movrm(ctx, I8, v2141, v2142);
                    let v2148 = constructor_side_effect(ctx, v2147);
                    let v2149 = Some(v2148);
                    // Rule at src/isa/x64/lower.isle line 3083.
                    return v2149;
                }
                &Opcode::Istore16 => {
                    let v2133 = C::unpack_value_array_2(ctx, v2130);
                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                    let v2142 = constructor_put_in_gpr(ctx, v2133.0);
                    let v2150 = &constructor_x64_movrm(ctx, I16, v2141, v2142);
                    let v2151 = constructor_side_effect(ctx, v2150);
                    let v2152 = Some(v2151);
                    // Rule at src/isa/x64/lower.isle line 3086.
                    return v2152;
                }
                &Opcode::Istore32 => {
                    let v2133 = C::unpack_value_array_2(ctx, v2130);
                    let v2140 = &constructor_to_amode(ctx, v2131, v2133.1, v2132);
                    let v2141 = &C::amode_to_synthetic_amode(ctx, v2140);
                    let v2142 = constructor_put_in_gpr(ctx, v2133.0);
                    let v2153 = &constructor_x64_movrm(ctx, I32, v2141, v2142);
                    let v2154 = constructor_side_effect(ctx, v2153);
                    let v2155 = Some(v2154);
                    // Rule at src/isa/x64/lower.isle line 3089.
                    return v2155;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2337,
            args: ref v2338,
            flags: v2339,
        } => {
            if let &Opcode::AtomicStore = v2337 {
                let v2326 = C::use_cmpxchg16b(ctx);
                if v2326 == true {
                    let v2340 = C::unpack_value_array_2(ctx, v2338);
                    let v2343 = C::value_type(ctx, v2340.0);
                    if v2343 == I128 {
                        let v70 = C::zero_offset(ctx);
                        let v2348 = &constructor_to_amode(ctx, v2339, v2340.1, v70);
                        let v2349 = &C::amode_to_synthetic_amode(ctx, v2348);
                        let v2356 = C::put_in_regs(ctx, v2340.0);
                        let v2357 = &constructor_x64_atomic_128_store_seq(ctx, v2349, v2356);
                        let v2358 = constructor_side_effect(ctx, v2357);
                        let v2359 = Some(v2358);
                        // Rule at src/isa/x64/lower.isle line 3395.
                        return v2359;
                    }
                }
                let v2340 = C::unpack_value_array_2(ctx, v2338);
                let v2343 = C::value_type(ctx, v2340.0);
                let v2344 = C::fits_in_64(ctx, v2343);
                if let Some(v2345) = v2344 {
                    let v2346 = C::ty_int(ctx, v2343);
                    if let Some(v2347) = v2346 {
                        let v70 = C::zero_offset(ctx);
                        let v2348 = &constructor_to_amode(ctx, v2339, v2340.1, v70);
                        let v2349 = &C::amode_to_synthetic_amode(ctx, v2348);
                        let v2350 = constructor_put_in_gpr(ctx, v2340.0);
                        let v2351 = &constructor_x64_movrm(ctx, v2345, v2349, v2350);
                        let v2352 = &constructor_x64_mfence(ctx);
                        let v2353 = &constructor_side_effect_concat(ctx, v2351, v2352);
                        let v2354 = constructor_side_effect(ctx, v2353);
                        let v2355 = Some(v2354);
                        // Rule at src/isa/x64/lower.isle line 3388.
                        return v2355;
                    }
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v901,
            args: ref v902,
        } => {
            match v901 {
                &Opcode::StackSwitch => {
                    let v2454 = &C::stack_switch_model(ctx);
                    if let Some(v2455) = v2454 {
                        if let &StackSwitchModel::Basic = v2455 {
                            let v903 = C::unpack_value_array_3(ctx, v902);
                            let v967 = constructor_put_in_gpr(ctx, v903.0);
                            let v2456 = constructor_put_in_gpr(ctx, v903.1);
                            let v2457 = constructor_put_in_gpr(ctx, v903.2);
                            let v2458 = constructor_x64_stack_switch_basic(ctx, v967, v2456, v2457);
                            let v2459 = constructor_output_gpr(ctx, v2458);
                            let v2460 = Some(v2459);
                            // Rule at src/isa/x64/lower.isle line 3480.
                            return v2460;
                        }
                    }
                }
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v903 = C::unpack_value_array_3(ctx, v902);
                        let v1484 = C::maybe_uextend(ctx, v903.0);
                        if let Some(v1485) = v1484 {
                            let v1486 = C::def_inst(ctx, v1485);
                            if let Some(v1487) = v1486 {
                                let v1488 = &C::inst_data(ctx, v1487);
                                match v1488 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1489,
                                        args: ref v1490,
                                        cond: ref v1491,
                                    } => {
                                        if let &Opcode::Fcmp = v1489 {
                                            match v1491 {
                                                &FloatCC::Equal => {
                                                    let v1492 = C::unpack_value_array_2(ctx, v1490);
                                                    let v1499 = &constructor_emit_fcmp(ctx, &FloatCC::NotEqual, v1492.0, v1492.1);
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v1500 = constructor_lower_select_fcmp(ctx, v3, v1499, v903.2, v903.1);
                                                    let v1501 = Some(v1500);
                                                    // Rule at src/isa/x64/lower.isle line 2172.
                                                    return v1501;
                                                }
                                                &FloatCC::LessThan => {
                                                    let v3 = C::value_type(ctx, v2);
                                                    match v3 {
                                                        F32 => {
                                                            let v1492 = C::unpack_value_array_2(ctx, v1490);
                                                            if v903.1 == v1492.1 {
                                                                if v903.2 == v1492.0 {
                                                                    let v1536 = constructor_put_in_xmm(ctx, v1492.1);
                                                                    let v1537 = &C::put_in_xmm_mem(ctx, v1492.0);
                                                                    let v1538 = constructor_x64_maxss(ctx, v1536, v1537);
                                                                    let v1539 = constructor_output_xmm(ctx, v1538);
                                                                    let v1540 = Some(v1539);
                                                                    // Rule at src/isa/x64/lower.isle line 2214.
                                                                    return v1540;
                                                                }
                                                            }
                                                            if v903.1 == v1492.0 {
                                                                if v903.2 == v1492.1 {
                                                                    let v1528 = constructor_put_in_xmm(ctx, v1492.0);
                                                                    let v1529 = &C::put_in_xmm_mem(ctx, v1492.1);
                                                                    let v1530 = constructor_x64_minss(ctx, v1528, v1529);
                                                                    let v1531 = constructor_output_xmm(ctx, v1530);
                                                                    let v1532 = Some(v1531);
                                                                    // Rule at src/isa/x64/lower.isle line 2210.
                                                                    return v1532;
                                                                }
                                                            }
                                                        }
                                                        F64 => {
                                                            let v1492 = C::unpack_value_array_2(ctx, v1490);
                                                            if v903.1 == v1492.1 {
                                                                if v903.2 == v1492.0 {
                                                                    let v1536 = constructor_put_in_xmm(ctx, v1492.1);
                                                                    let v1537 = &C::put_in_xmm_mem(ctx, v1492.0);
                                                                    let v1541 = constructor_x64_maxsd(ctx, v1536, v1537);
                                                                    let v1542 = constructor_output_xmm(ctx, v1541);
                                                                    let v1543 = Some(v1542);
                                                                    // Rule at src/isa/x64/lower.isle line 2216.
                                                                    return v1543;
                                                                }
                                                            }
                                                            if v903.1 == v1492.0 {
                                                                if v903.2 == v1492.1 {
                                                                    let v1528 = constructor_put_in_xmm(ctx, v1492.0);
                                                                    let v1529 = &C::put_in_xmm_mem(ctx, v1492.1);
                                                                    let v1533 = constructor_x64_minsd(ctx, v1528, v1529);
                                                                    let v1534 = constructor_output_xmm(ctx, v1533);
                                                                    let v1535 = Some(v1534);
                                                                    // Rule at src/isa/x64/lower.isle line 2212.
                                                                    return v1535;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                _ => {}
                                            }
                                            let v1492 = C::unpack_value_array_2(ctx, v1490);
                                            let v1495 = &constructor_emit_fcmp(ctx, v1491, v1492.0, v1492.1);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1496 = constructor_lower_select_fcmp(ctx, v3, v1495, v903.1, v903.2);
                                            let v1497 = Some(v1496);
                                            // Rule at src/isa/x64/lower.isle line 2170.
                                            return v1497;
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1502,
                                        args: ref v1503,
                                        cond: ref v1504,
                                    } => {
                                        if let &Opcode::Icmp = v1502 {
                                            let v1505 = C::unpack_value_array_2(ctx, v1503);
                                            let v1508 = &constructor_emit_cmp(ctx, v1504, v1505.0, v1505.1);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1509 = constructor_lower_select_icmp(ctx, v3, v1508, v903.1, v903.2);
                                            let v1510 = Some(v1509);
                                            // Rule at src/isa/x64/lower.isle line 2186.
                                            return v1510;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1511 = C::value_type(ctx, v903.0);
                        let v1512 = C::fits_in_64(ctx, v1511);
                        if let Some(v1513) = v1512 {
                            let v1514 = &C::raw_operand_size_of_type(ctx, v1513);
                            let v1515 = constructor_put_in_gpr(ctx, v903.0);
                            let v1516 = &C::gpr_to_gpr_mem_imm(ctx, v1515);
                            let v1517 = &constructor_x64_test(ctx, v1514, v1515, v1516);
                            let v3 = C::value_type(ctx, v2);
                            let v1519 = &constructor_cmove_from_values(ctx, v3, &CC::NZ, v903.1, v903.2);
                            let v1520 = constructor_with_flags(ctx, v1517, v1519);
                            let v1521 = C::output(ctx, v1520);
                            let v1522 = Some(v1521);
                            // Rule at src/isa/x64/lower.isle line 2192.
                            return v1522;
                        }
                        if v1511 == I128 {
                            let v956 = C::put_in_regs(ctx, v903.0);
                            let v1524 = &constructor_cmp_zero_i128(ctx, &CC::Z, v956);
                            let v1525 = constructor_select_icmp(ctx, v1524, v903.1, v903.2);
                            let v1526 = C::output(ctx, v1525);
                            let v1527 = Some(v1526);
                            // Rule at src/isa/x64/lower.isle line 2199.
                            return v1527;
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v903 = C::unpack_value_array_3(ctx, v902);
                    let v925 = C::def_inst(ctx, v903.0);
                    if let Some(v926) = v925 {
                        let v927 = &C::inst_data(ctx, v926);
                        if let &InstructionData::IntCompare {
                            opcode: ref v2472,
                            args: ref v2473,
                            cond: ref v2474,
                        } = v927 {
                            if let &Opcode::Icmp = v2472 {
                                let v2475 = C::unpack_value_array_2(ctx, v2473);
                                let v2478 = &constructor_emit_cmp(ctx, v2474, v2475.0, v2475.1);
                                let v2479 = constructor_select_icmp(ctx, v2478, v903.1, v903.2);
                                let v2480 = C::output(ctx, v2479);
                                let v2481 = Some(v2480);
                                // Rule at src/isa/x64/lower.isle line 3565.
                                return v2481;
                            }
                        }
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1511 = C::value_type(ctx, v903.0);
                        let v1512 = C::fits_in_64(ctx, v1511);
                        if let Some(v1513) = v1512 {
                            let v1514 = &C::raw_operand_size_of_type(ctx, v1513);
                            let v1515 = constructor_put_in_gpr(ctx, v903.0);
                            let v1516 = &C::gpr_to_gpr_mem_imm(ctx, v1515);
                            let v1517 = &constructor_x64_test(ctx, v1514, v1515, v1516);
                            let v3 = C::value_type(ctx, v2);
                            let v1519 = &constructor_cmove_from_values(ctx, v3, &CC::NZ, v903.1, v903.2);
                            let v1520 = constructor_with_flags(ctx, v1517, v1519);
                            let v1521 = C::output(ctx, v1520);
                            let v1522 = Some(v1521);
                            // Rule at src/isa/x64/lower.isle line 3568.
                            return v1522;
                        }
                        if v1511 == I128 {
                            let v956 = C::put_in_regs(ctx, v903.0);
                            let v1524 = &constructor_cmp_zero_i128(ctx, &CC::Z, v956);
                            let v1525 = constructor_select_icmp(ctx, v1524, v903.1, v903.2);
                            let v1526 = C::output(ctx, v1525);
                            let v1527 = Some(v1526);
                            // Rule at src/isa/x64/lower.isle line 3573.
                            return v1527;
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v903 = C::unpack_value_array_3(ctx, v902);
                            let v907 = constructor_put_in_xmm(ctx, v903.0);
                            let v920 = &C::put_in_xmm_mem(ctx, v903.1);
                            let v978 = constructor_sse_and(ctx, v251, v907, v920);
                            let v979 = constructor_put_in_xmm(ctx, v903.0);
                            let v980 = constructor_vector_all_ones(ctx);
                            let v981 = &C::xmm_to_xmm_mem(ctx, v980);
                            let v982 = constructor_x64_xor_vector(ctx, v251, v979, v981);
                            let v983 = &C::put_in_xmm_mem(ctx, v903.2);
                            let v984 = constructor_sse_and(ctx, v251, v982, v983);
                            let v985 = &C::xmm_to_xmm_mem(ctx, v984);
                            let v986 = constructor_sse_or(ctx, v251, v978, v985);
                            let v987 = constructor_output_xmm(ctx, v986);
                            let v988 = Some(v987);
                            // Rule at src/isa/x64/lower.isle line 1542.
                            return v988;
                        }
                        let v965 = C::ty_int_ref_scalar_64_extract(ctx, v3);
                        if let Some(v966) = v965 {
                            let v903 = C::unpack_value_array_3(ctx, v902);
                            let v967 = constructor_put_in_gpr(ctx, v903.0);
                            let v968 = &constructor_put_in_gpr_mem_imm(ctx, v903.1);
                            let v969 = constructor_x64_and(ctx, v966, v967, v968);
                            let v970 = constructor_put_in_gpr(ctx, v903.0);
                            let v971 = constructor_x64_not(ctx, v966, v970);
                            let v972 = &constructor_put_in_gpr_mem_imm(ctx, v903.2);
                            let v973 = constructor_x64_and(ctx, v966, v971, v972);
                            let v974 = &C::gpr_to_gpr_mem_imm(ctx, v973);
                            let v975 = constructor_x64_or(ctx, v966, v969, v974);
                            let v976 = constructor_output_gpr(ctx, v975);
                            let v977 = Some(v976);
                            // Rule at src/isa/x64/lower.isle line 1537.
                            return v977;
                        }
                        match v3 {
                            I128 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v956 = C::put_in_regs(ctx, v903.0);
                                let v957 = C::put_in_regs(ctx, v903.1);
                                let v958 = constructor_and_i128(ctx, v956, v957);
                                let v959 = constructor_i128_not(ctx, v903.0);
                                let v960 = C::put_in_regs(ctx, v903.2);
                                let v961 = constructor_and_i128(ctx, v959, v960);
                                let v962 = constructor_or_i128(ctx, v958, v961);
                                let v963 = C::output(ctx, v962);
                                let v964 = Some(v963);
                                // Rule at src/isa/x64/lower.isle line 1532.
                                return v964;
                            }
                            F32X4 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v925 = C::def_inst(ctx, v903.0);
                                if let Some(v926) = v925 {
                                    let v927 = &C::inst_data(ctx, v926);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v928,
                                        arg: v929,
                                        flags: v930,
                                    } = v927 {
                                        if let &Opcode::Bitcast = v928 {
                                            let v931 = C::def_inst(ctx, v929);
                                            if let Some(v932) = v931 {
                                                let v933 = &C::inst_data(ctx, v932);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v934,
                                                    args: ref v935,
                                                    cond: ref v936,
                                                } = v933 {
                                                    if let &Opcode::Fcmp = v934 {
                                                        if let &FloatCC::LessThan = v936 {
                                                            let v937 = C::unpack_value_array_2(ctx, v935);
                                                            if v903.1 == v937.1 {
                                                                if v903.2 == v937.0 {
                                                                    let v948 = constructor_put_in_xmm(ctx, v937.1);
                                                                    let v949 = &C::put_in_xmm_mem(ctx, v937.0);
                                                                    let v950 = constructor_x64_maxps(ctx, v948, v949);
                                                                    let v951 = constructor_output_xmm(ctx, v950);
                                                                    let v952 = Some(v951);
                                                                    // Rule at src/isa/x64/lower.isle line 1525.
                                                                    return v952;
                                                                }
                                                            }
                                                            if v903.1 == v937.0 {
                                                                if v903.2 == v937.1 {
                                                                    let v940 = constructor_put_in_xmm(ctx, v937.0);
                                                                    let v941 = &C::put_in_xmm_mem(ctx, v937.1);
                                                                    let v942 = constructor_x64_minps(ctx, v940, v941);
                                                                    let v943 = constructor_output_xmm(ctx, v942);
                                                                    let v944 = Some(v943);
                                                                    // Rule at src/isa/x64/lower.isle line 1520.
                                                                    return v944;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            F64X2 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v925 = C::def_inst(ctx, v903.0);
                                if let Some(v926) = v925 {
                                    let v927 = &C::inst_data(ctx, v926);
                                    if let &InstructionData::LoadNoOffset {
                                        opcode: ref v928,
                                        arg: v929,
                                        flags: v930,
                                    } = v927 {
                                        if let &Opcode::Bitcast = v928 {
                                            let v931 = C::def_inst(ctx, v929);
                                            if let Some(v932) = v931 {
                                                let v933 = &C::inst_data(ctx, v932);
                                                if let &InstructionData::FloatCompare {
                                                    opcode: ref v934,
                                                    args: ref v935,
                                                    cond: ref v936,
                                                } = v933 {
                                                    if let &Opcode::Fcmp = v934 {
                                                        if let &FloatCC::LessThan = v936 {
                                                            let v937 = C::unpack_value_array_2(ctx, v935);
                                                            if v903.1 == v937.1 {
                                                                if v903.2 == v937.0 {
                                                                    let v948 = constructor_put_in_xmm(ctx, v937.1);
                                                                    let v949 = &C::put_in_xmm_mem(ctx, v937.0);
                                                                    let v953 = constructor_x64_maxpd(ctx, v948, v949);
                                                                    let v954 = constructor_output_xmm(ctx, v953);
                                                                    let v955 = Some(v954);
                                                                    // Rule at src/isa/x64/lower.isle line 1527.
                                                                    return v955;
                                                                }
                                                            }
                                                            if v903.1 == v937.0 {
                                                                if v903.2 == v937.1 {
                                                                    let v940 = constructor_put_in_xmm(ctx, v937.0);
                                                                    let v941 = &C::put_in_xmm_mem(ctx, v937.1);
                                                                    let v945 = constructor_x64_minpd(ctx, v940, v941);
                                                                    let v946 = constructor_output_xmm(ctx, v945);
                                                                    let v947 = Some(v946);
                                                                    // Rule at src/isa/x64/lower.isle line 1522.
                                                                    return v947;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v656 = C::use_sse41(ctx);
                            if v656 == true {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v917 = constructor_all_ones_or_all_zeros(ctx, v903.0);
                                if let Some(v918) = v917 {
                                    let v919 = constructor_put_in_xmm(ctx, v903.2);
                                    let v920 = &C::put_in_xmm_mem(ctx, v903.1);
                                    let v921 = constructor_put_in_xmm(ctx, v903.0);
                                    let v922 = constructor_x64_pblendvb(ctx, v919, v920, v921);
                                    let v923 = constructor_output_xmm(ctx, v922);
                                    let v924 = Some(v923);
                                    // Rule at src/isa/x64/lower.isle line 1498.
                                    return v924;
                                }
                            }
                            let v903 = C::unpack_value_array_3(ctx, v902);
                            let v907 = constructor_put_in_xmm(ctx, v903.0);
                            let v908 = constructor_put_in_xmm(ctx, v903.1);
                            let v909 = &C::xmm_to_xmm_mem(ctx, v907);
                            let v910 = constructor_sse_and(ctx, v3, v908, v909);
                            let v911 = &C::put_in_xmm_mem(ctx, v903.2);
                            let v912 = constructor_sse_and_not(ctx, v3, v907, v911);
                            let v913 = &C::xmm_to_xmm_mem(ctx, v910);
                            let v914 = constructor_sse_or(ctx, v3, v912, v913);
                            let v915 = constructor_output_xmm(ctx, v914);
                            let v916 = Some(v915);
                            // Rule at src/isa/x64/lower.isle line 1484.
                            return v916;
                        }
                    }
                }
                &Opcode::X86Blendv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v903 = C::unpack_value_array_3(ctx, v902);
                                    let v919 = constructor_put_in_xmm(ctx, v903.2);
                                    let v920 = &C::put_in_xmm_mem(ctx, v903.1);
                                    let v921 = constructor_put_in_xmm(ctx, v903.0);
                                    let v922 = constructor_x64_pblendvb(ctx, v919, v920, v921);
                                    let v923 = constructor_output_xmm(ctx, v922);
                                    let v924 = Some(v923);
                                    // Rule at src/isa/x64/lower.isle line 1550.
                                    return v924;
                                }
                            }
                            I32X4 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v903 = C::unpack_value_array_3(ctx, v902);
                                    let v919 = constructor_put_in_xmm(ctx, v903.2);
                                    let v920 = &C::put_in_xmm_mem(ctx, v903.1);
                                    let v921 = constructor_put_in_xmm(ctx, v903.0);
                                    let v989 = constructor_x64_blendvps(ctx, v919, v920, v921);
                                    let v990 = constructor_output_xmm(ctx, v989);
                                    let v991 = Some(v990);
                                    // Rule at src/isa/x64/lower.isle line 1555.
                                    return v991;
                                }
                            }
                            I64X2 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v903 = C::unpack_value_array_3(ctx, v902);
                                    let v919 = constructor_put_in_xmm(ctx, v903.2);
                                    let v920 = &C::put_in_xmm_mem(ctx, v903.1);
                                    let v921 = constructor_put_in_xmm(ctx, v903.0);
                                    let v992 = constructor_x64_blendvpd(ctx, v919, v920, v921);
                                    let v993 = constructor_output_xmm(ctx, v992);
                                    let v994 = Some(v993);
                                    // Rule at src/isa/x64/lower.isle line 1560.
                                    return v994;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2008 = C::use_fma(ctx);
                        if v2008 == true {
                            let v903 = C::unpack_value_array_3(ctx, v902);
                            let v2012 = C::def_inst(ctx, v903.2);
                            if let Some(v2013) = v2012 {
                                let v2014 = &C::inst_data(ctx, v2013);
                                if let &InstructionData::Unary {
                                    opcode: ref v2015,
                                    arg: v2016,
                                } = v2014 {
                                    if let &Opcode::Fneg = v2015 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v2017 = constructor_fmsub(ctx, v3, v903.0, v903.1, v2016);
                                        let v2018 = constructor_output_xmm(ctx, v2017);
                                        let v2019 = Some(v2018);
                                        // Rule at src/isa/x64/lower.isle line 2949.
                                        return v2019;
                                    }
                                }
                            }
                            let v3 = C::value_type(ctx, v2);
                            let v2009 = constructor_fmadd(ctx, v3, v903.0, v903.1, v903.2);
                            let v2010 = constructor_output_xmm(ctx, v2009);
                            let v2011 = Some(v2010);
                            // Rule at src/isa/x64/lower.isle line 2918.
                            return v2011;
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v1939 = C::put_in_reg(ctx, v903.0);
                                let v1940 = C::put_in_reg(ctx, v903.1);
                                let v1941 = C::put_in_reg(ctx, v903.2);
                                let v1942 = C::libcall_3(ctx, &LibCall::FmaF32, v1939, v1940, v1941);
                                let v1943 = constructor_output_reg(ctx, v1942);
                                let v1944 = Some(v1943);
                                // Rule at src/isa/x64/lower.isle line 2873.
                                return v1944;
                            }
                            F64 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v1939 = C::put_in_reg(ctx, v903.0);
                                let v1940 = C::put_in_reg(ctx, v903.1);
                                let v1941 = C::put_in_reg(ctx, v903.2);
                                let v1946 = C::libcall_3(ctx, &LibCall::FmaF64, v1939, v1940, v1941);
                                let v1947 = constructor_output_reg(ctx, v1946);
                                let v1948 = Some(v1947);
                                // Rule at src/isa/x64/lower.isle line 2875.
                                return v1948;
                            }
                            F32X4 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v907 = constructor_put_in_xmm(ctx, v903.0);
                                let v908 = constructor_put_in_xmm(ctx, v903.1);
                                let v1949 = constructor_put_in_xmm(ctx, v903.2);
                                let v1950 = C::xmm_to_reg(ctx, v907);
                                let v1951 = C::xmm_to_reg(ctx, v908);
                                let v1952 = C::xmm_to_reg(ctx, v1949);
                                let v1953 = C::libcall_3(ctx, &LibCall::FmaF32, v1950, v1951, v1952);
                                let v1954 = C::xmm_new(ctx, v1953);
                                let v1955 = &C::xmm_to_xmm_mem(ctx, v907);
                                let v1956 = constructor_x64_pshufd(ctx, v1955, 0x1_u8);
                                let v1957 = C::xmm_to_reg(ctx, v1956);
                                let v1958 = &C::xmm_to_xmm_mem(ctx, v908);
                                let v1959 = constructor_x64_pshufd(ctx, v1958, 0x1_u8);
                                let v1960 = C::xmm_to_reg(ctx, v1959);
                                let v1961 = &C::xmm_to_xmm_mem(ctx, v1949);
                                let v1962 = constructor_x64_pshufd(ctx, v1961, 0x1_u8);
                                let v1963 = C::xmm_to_reg(ctx, v1962);
                                let v1964 = C::libcall_3(ctx, &LibCall::FmaF32, v1957, v1960, v1963);
                                let v1965 = C::xmm_new(ctx, v1964);
                                let v1966 = &C::xmm_to_xmm_mem(ctx, v907);
                                let v1967 = constructor_x64_pshufd(ctx, v1966, 0x2_u8);
                                let v1968 = C::xmm_to_reg(ctx, v1967);
                                let v1969 = &C::xmm_to_xmm_mem(ctx, v908);
                                let v1970 = constructor_x64_pshufd(ctx, v1969, 0x2_u8);
                                let v1971 = C::xmm_to_reg(ctx, v1970);
                                let v1972 = &C::xmm_to_xmm_mem(ctx, v1949);
                                let v1973 = constructor_x64_pshufd(ctx, v1972, 0x2_u8);
                                let v1974 = C::xmm_to_reg(ctx, v1973);
                                let v1975 = C::libcall_3(ctx, &LibCall::FmaF32, v1968, v1971, v1974);
                                let v1976 = C::xmm_new(ctx, v1975);
                                let v1977 = &C::xmm_to_xmm_mem(ctx, v907);
                                let v1978 = constructor_x64_pshufd(ctx, v1977, 0x3_u8);
                                let v1979 = C::xmm_to_reg(ctx, v1978);
                                let v1980 = &C::xmm_to_xmm_mem(ctx, v908);
                                let v1981 = constructor_x64_pshufd(ctx, v1980, 0x3_u8);
                                let v1982 = C::xmm_to_reg(ctx, v1981);
                                let v1983 = &C::xmm_to_xmm_mem(ctx, v1949);
                                let v1984 = constructor_x64_pshufd(ctx, v1983, 0x3_u8);
                                let v1985 = C::xmm_to_reg(ctx, v1984);
                                let v1986 = C::libcall_3(ctx, &LibCall::FmaF32, v1979, v1982, v1985);
                                let v1987 = C::xmm_new(ctx, v1986);
                                let v1988 = constructor_f32x4_insertlane(ctx, v1954, v1965, 0x1_u8);
                                let v1989 = constructor_f32x4_insertlane(ctx, v1988, v1976, 0x2_u8);
                                let v1990 = constructor_f32x4_insertlane(ctx, v1989, v1987, 0x3_u8);
                                let v1991 = constructor_output_xmm(ctx, v1990);
                                let v1992 = Some(v1991);
                                // Rule at src/isa/x64/lower.isle line 2878.
                                return v1992;
                            }
                            F64X2 => {
                                let v903 = C::unpack_value_array_3(ctx, v902);
                                let v907 = constructor_put_in_xmm(ctx, v903.0);
                                let v908 = constructor_put_in_xmm(ctx, v903.1);
                                let v1949 = constructor_put_in_xmm(ctx, v903.2);
                                let v1950 = C::xmm_to_reg(ctx, v907);
                                let v1951 = C::xmm_to_reg(ctx, v908);
                                let v1952 = C::xmm_to_reg(ctx, v1949);
                                let v1993 = C::libcall_3(ctx, &LibCall::FmaF64, v1950, v1951, v1952);
                                let v1994 = C::xmm_new(ctx, v1993);
                                let v1955 = &C::xmm_to_xmm_mem(ctx, v907);
                                let v1996 = constructor_x64_pshufd(ctx, v1955, 0xee_u8);
                                let v1997 = C::xmm_to_reg(ctx, v1996);
                                let v1958 = &C::xmm_to_xmm_mem(ctx, v908);
                                let v1998 = constructor_x64_pshufd(ctx, v1958, 0xee_u8);
                                let v1999 = C::xmm_to_reg(ctx, v1998);
                                let v1961 = &C::xmm_to_xmm_mem(ctx, v1949);
                                let v2000 = constructor_x64_pshufd(ctx, v1961, 0xee_u8);
                                let v2001 = C::xmm_to_reg(ctx, v2000);
                                let v2002 = C::libcall_3(ctx, &LibCall::FmaF64, v1997, v1999, v2001);
                                let v2003 = C::xmm_new(ctx, v2002);
                                let v2004 = &C::xmm_to_xmm_mem(ctx, v2003);
                                let v2005 = constructor_x64_movlhps(ctx, v1994, v2004);
                                let v2006 = constructor_output_xmm(ctx, v2005);
                                let v2007 = Some(v2006);
                                // Rule at src/isa/x64/lower.isle line 2902.
                                return v2007;
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v995,
            args: ref v996,
            imm: v997,
        } => {
            if let &Opcode::Insertlane = v995 {
                let v656 = C::use_sse41(ctx);
                if v656 == true {
                    let v1002 = C::u8_from_uimm8(ctx, v997);
                    if v1002 == 0x1_u8 {
                        let v998 = C::unpack_value_array_2(ctx, v996);
                        let v1086 = C::def_inst(ctx, v998.0);
                        if let Some(v1087) = v1086 {
                            let v1088 = C::first_result(ctx, v1087);
                            if let Some(v1089) = v1088 {
                                let v1090 = C::value_type(ctx, v1089);
                                if v1090 == I64X2 {
                                    let v1091 = &C::inst_data(ctx, v1087);
                                    if let &InstructionData::Unary {
                                        opcode: ref v1092,
                                        arg: v1093,
                                    } = v1091 {
                                        if let &Opcode::Splat = v1092 {
                                            let v1095 = constructor_put_in_gpr(ctx, v1093);
                                            let v1096 = constructor_bitcast_gpr_to_xmm(ctx, 0x40_u8, v1095);
                                            let v1097 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                            let v1099 = constructor_x64_pinsrq(ctx, v1096, v1097, 0x1_u8);
                                            let v1100 = constructor_output_xmm(ctx, v1099);
                                            let v1101 = Some(v1100);
                                            // Rule at src/isa/x64/lower.isle line 1662.
                                            return v1101;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    let v998 = C::unpack_value_array_2(ctx, v996);
                    let v1001 = C::value_type(ctx, v998.0);
                    match v1001 {
                        I8X16 => {
                            let v1008 = &C::sinkable_load_exact(ctx, v998.1);
                            if let Some(v1009) = v1008 {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1010 = &constructor_sink_load_to_gpr_mem(ctx, v1009);
                                let v1011 = constructor_x64_pinsrb(ctx, v1003, v1010, v1002);
                                let v1012 = constructor_output_xmm(ctx, v1011);
                                let v1013 = Some(v1012);
                                // Rule at src/isa/x64/lower.isle line 1570.
                                return v1013;
                            }
                            let v1003 = constructor_put_in_xmm(ctx, v998.0);
                            let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                            let v1005 = constructor_x64_pinsrb(ctx, v1003, v1004, v1002);
                            let v1006 = constructor_output_xmm(ctx, v1005);
                            let v1007 = Some(v1006);
                            // Rule at src/isa/x64/lower.isle line 1567.
                            return v1007;
                        }
                        I32X4 => {
                            let v1003 = constructor_put_in_xmm(ctx, v998.0);
                            let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                            let v1044 = constructor_x64_pinsrd(ctx, v1003, v1004, v1002);
                            let v1045 = constructor_output_xmm(ctx, v1044);
                            let v1046 = Some(v1045);
                            // Rule at src/isa/x64/lower.isle line 1622.
                            return v1046;
                        }
                        I64X2 => {
                            let v1003 = constructor_put_in_xmm(ctx, v998.0);
                            let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                            let v1075 = constructor_x64_pinsrq(ctx, v1003, v1004, v1002);
                            let v1076 = constructor_output_xmm(ctx, v1075);
                            let v1077 = Some(v1076);
                            // Rule at src/isa/x64/lower.isle line 1651.
                            return v1077;
                        }
                        F32X4 => {
                            let v1102 = &C::sinkable_load(ctx, v998.1);
                            if let Some(v1103) = v1102 {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1104 = &constructor_sink_load_to_xmm_mem(ctx, v1103);
                                let v1105 = C::sse_insertps_lane_imm(ctx, v1002);
                                let v1106 = constructor_x64_insertps(ctx, v1003, v1104, v1105);
                                let v1107 = constructor_output_xmm(ctx, v1106);
                                let v1108 = Some(v1107);
                                // Rule at src/isa/x64/lower.isle line 1668.
                                return v1108;
                            }
                        }
                        _ => {}
                    }
                }
                let v998 = C::unpack_value_array_2(ctx, v996);
                let v1001 = C::value_type(ctx, v998.0);
                match v1001 {
                    I8X16 => {
                        let v1003 = constructor_put_in_xmm(ctx, v998.0);
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        let v1014 = C::insert_i8x16_lane_hole(ctx, v1002);
                        let v1015 = &constructor_const_to_xmm_mem(ctx, v1014);
                        let v1016 = constructor_x64_pand(ctx, v1003, v1015);
                        let v1018 = &constructor_put_in_gpr_mem(ctx, v998.1);
                        let v1019 = constructor_x64_movzx(ctx, &ExtMode::BL, v1018);
                        let v1022 = C::u8_and(ctx, v1002, 0x3_u8);
                        let v1023 = C::u8_shl(ctx, v1022, 0x3_u8);
                        let v1024 = Imm8Reg::Imm8 {
                            imm: v1023,
                        };
                        let v1025 = &C::imm8_reg_to_imm8_gpr(ctx, &v1024);
                        let v1026 = constructor_x64_shl(ctx, I32, v1019, v1025);
                        let v1027 = &C::gpr_to_gpr_mem(ctx, v1026);
                        let v1028 = constructor_x64_movd_to_xmm(ctx, v1027);
                        let v1029 = &C::xmm_to_xmm_mem(ctx, v1028);
                        let v1031 = C::u8_shr(ctx, v1002, 0x2_u8);
                        let v1032 = constructor_insert_i8x16_lane_pshufd_imm(ctx, v1031);
                        let v1033 = constructor_x64_pshufd(ctx, v1029, v1032);
                        let v1034 = &C::xmm_to_xmm_mem(ctx, v1033);
                        let v1035 = constructor_x64_por(ctx, v1016, v1034);
                        let v1036 = constructor_output_xmm(ctx, v1035);
                        let v1037 = Some(v1036);
                        // Rule at src/isa/x64/lower.isle line 1598.
                        return v1037;
                    }
                    I16X8 => {
                        let v1008 = &C::sinkable_load_exact(ctx, v998.1);
                        if let Some(v1009) = v1008 {
                            let v1003 = constructor_put_in_xmm(ctx, v998.0);
                            let v1010 = &constructor_sink_load_to_gpr_mem(ctx, v1009);
                            let v1002 = C::u8_from_uimm8(ctx, v997);
                            let v1041 = constructor_x64_pinsrw(ctx, v1003, v1010, v1002);
                            let v1042 = constructor_output_xmm(ctx, v1041);
                            let v1043 = Some(v1042);
                            // Rule at src/isa/x64/lower.isle line 1618.
                            return v1043;
                        }
                        let v1003 = constructor_put_in_xmm(ctx, v998.0);
                        let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        let v1038 = constructor_x64_pinsrw(ctx, v1003, v1004, v1002);
                        let v1039 = constructor_output_xmm(ctx, v1038);
                        let v1040 = Some(v1039);
                        // Rule at src/isa/x64/lower.isle line 1616.
                        return v1040;
                    }
                    I32X4 => {
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        match v1002 {
                            0x0_u8 => {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1047 = constructor_x64_movd_to_xmm(ctx, v1004);
                                let v1048 = constructor_x64_movss_regmove(ctx, v1003, v1047);
                                let v1049 = constructor_output_xmm(ctx, v1048);
                                let v1050 = Some(v1049);
                                // Rule at src/isa/x64/lower.isle line 1626.
                                return v1050;
                            }
                            0x1_u8 => {
                                let v1051 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1052 = constructor_x64_movd_to_xmm(ctx, v1051);
                                let v1053 = constructor_put_in_xmm(ctx, v998.0);
                                let v1054 = &C::xmm_to_xmm_mem(ctx, v1053);
                                let v1055 = constructor_x64_punpcklqdq(ctx, v1052, v1054);
                                let v1056 = &C::xmm_to_xmm_mem(ctx, v1053);
                                let v1058 = constructor_x64_shufps(ctx, v1055, v1056, 0xe2_u8);
                                let v1059 = constructor_output_xmm(ctx, v1058);
                                let v1060 = Some(v1059);
                                // Rule at src/isa/x64/lower.isle line 1631.
                                return v1060;
                            }
                            0x2_u8 => {
                                let v1051 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1052 = constructor_x64_movd_to_xmm(ctx, v1051);
                                let v1053 = constructor_put_in_xmm(ctx, v998.0);
                                let v1054 = &C::xmm_to_xmm_mem(ctx, v1053);
                                let v1062 = constructor_x64_shufps(ctx, v1052, v1054, 0x30_u8);
                                let v1063 = &C::xmm_to_xmm_mem(ctx, v1062);
                                let v1065 = constructor_x64_shufps(ctx, v1053, v1063, 0x84_u8);
                                let v1066 = constructor_output_xmm(ctx, v1065);
                                let v1067 = Some(v1066);
                                // Rule at src/isa/x64/lower.isle line 1638.
                                return v1067;
                            }
                            0x3_u8 => {
                                let v1051 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1052 = constructor_x64_movd_to_xmm(ctx, v1051);
                                let v1053 = constructor_put_in_xmm(ctx, v998.0);
                                let v1054 = &C::xmm_to_xmm_mem(ctx, v1053);
                                let v1069 = constructor_x64_shufps(ctx, v1052, v1054, 0xe4_u8);
                                let v1070 = &C::xmm_to_xmm_mem(ctx, v1069);
                                let v1072 = constructor_x64_shufps(ctx, v1053, v1070, 0x24_u8);
                                let v1073 = constructor_output_xmm(ctx, v1072);
                                let v1074 = Some(v1073);
                                // Rule at src/isa/x64/lower.isle line 1645.
                                return v1074;
                            }
                            _ => {}
                        }
                    }
                    I64X2 => {
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        match v1002 {
                            0x0_u8 => {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1078 = constructor_x64_movq_to_xmm(ctx, v1004);
                                let v1079 = constructor_x64_movsd_regmove(ctx, v1003, v1078);
                                let v1080 = constructor_output_xmm(ctx, v1079);
                                let v1081 = Some(v1080);
                                // Rule at src/isa/x64/lower.isle line 1654.
                                return v1081;
                            }
                            0x1_u8 => {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1004 = &constructor_put_in_gpr_mem(ctx, v998.1);
                                let v1078 = constructor_x64_movq_to_xmm(ctx, v1004);
                                let v1082 = &C::xmm_to_xmm_mem(ctx, v1078);
                                let v1083 = constructor_x64_punpcklqdq(ctx, v1003, v1082);
                                let v1084 = constructor_output_xmm(ctx, v1083);
                                let v1085 = Some(v1084);
                                // Rule at src/isa/x64/lower.isle line 1656.
                                return v1085;
                            }
                            _ => {}
                        }
                    }
                    F32X4 => {
                        let v1003 = constructor_put_in_xmm(ctx, v998.0);
                        let v1109 = constructor_put_in_xmm(ctx, v998.1);
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        let v1110 = constructor_f32x4_insertlane(ctx, v1003, v1109, v1002);
                        let v1111 = constructor_output_xmm(ctx, v1110);
                        let v1112 = Some(v1111);
                        // Rule at src/isa/x64/lower.isle line 1671.
                        return v1112;
                    }
                    F64X2 => {
                        let v1002 = C::u8_from_uimm8(ctx, v997);
                        match v1002 {
                            0x0_u8 => {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1109 = constructor_put_in_xmm(ctx, v998.1);
                                let v1113 = constructor_x64_movsd_regmove(ctx, v1003, v1109);
                                let v1114 = constructor_output_xmm(ctx, v1113);
                                let v1115 = Some(v1114);
                                // Rule at src/isa/x64/lower.isle line 1716.
                                return v1115;
                            }
                            0x1_u8 => {
                                let v1003 = constructor_put_in_xmm(ctx, v998.0);
                                let v1116 = &C::put_in_xmm_mem(ctx, v998.1);
                                let v1117 = constructor_x64_movlhps(ctx, v1003, v1116);
                                let v1118 = constructor_output_xmm(ctx, v1117);
                                let v1119 = Some(v1118);
                                // Rule at src/isa/x64/lower.isle line 1724.
                                return v1119;
                            }
                            _ => {}
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1191,
            code: ref v1192,
        } => {
            if let &Opcode::Trap = v1191 {
                let v1193 = &constructor_x64_ud2(ctx, v1192);
                let v1194 = constructor_side_effect(ctx, v1193);
                let v1195 = Some(v1194);
                // Rule at src/isa/x64/lower.isle line 1877.
                return v1195;
            }
        }
        &InstructionData::Unary {
            opcode: ref v558,
            arg: v559,
        } => {
            match v558 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            match v90.0 {
                                0x20_u32 => {
                                    if v90.1 == 0x4_u32 {
                                        let v3235 = &C::sinkable_load(ctx, v559);
                                        if let Some(v3236) = v3235 {
                                            let v3316 = C::use_avx(ctx);
                                            if v3316 == true {
                                                let v3317 = &constructor_sink_load_to_xmm_mem(ctx, v3236);
                                                let v3318 = constructor_x64_vbroadcastss(ctx, v3317);
                                                let v3319 = constructor_output_xmm(ctx, v3318);
                                                let v3320 = Some(v3319);
                                                // Rule at src/isa/x64/lower.isle line 4807.
                                                return v3320;
                                            }
                                            let v3239 = &C::sink_load(ctx, v3236);
                                            let v3240 = constructor_x64_movss_load(ctx, v3239);
                                            let v3312 = &C::xmm_to_xmm_mem(ctx, v3240);
                                            let v3313 = constructor_x64_shufps(ctx, v3240, v3312, 0x0_u8);
                                            let v3314 = constructor_output_xmm(ctx, v3313);
                                            let v3315 = Some(v3314);
                                            // Rule at src/isa/x64/lower.isle line 4804.
                                            return v3315;
                                        }
                                    }
                                }
                                0x40_u32 => {
                                    if v90.1 == 0x2_u32 {
                                        let v750 = C::use_ssse3(ctx);
                                        if v750 == true {
                                            let v3235 = &C::sinkable_load(ctx, v559);
                                            if let Some(v3236) = v3235 {
                                                let v3317 = &constructor_sink_load_to_xmm_mem(ctx, v3236);
                                                let v3330 = constructor_x64_movddup(ctx, v3317);
                                                let v3331 = constructor_output_xmm(ctx, v3330);
                                                let v3332 = Some(v3331);
                                                // Rule at src/isa/x64/lower.isle line 4818.
                                                return v3332;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8X16 => {
                                let v3270 = &C::sinkable_load_exact(ctx, v559);
                                if let Some(v3271) = v3270 {
                                    let v3265 = C::use_avx2(ctx);
                                    if v3265 == true {
                                        let v3277 = &constructor_sink_load_to_xmm_mem(ctx, v3271);
                                        let v3278 = constructor_x64_vpbroadcastb(ctx, v3277);
                                        let v3279 = constructor_output_xmm(ctx, v3278);
                                        let v3280 = Some(v3279);
                                        // Rule at src/isa/x64/lower.isle line 4755.
                                        return v3280;
                                    }
                                    let v656 = C::use_sse41(ctx);
                                    if v656 == true {
                                        let v750 = C::use_ssse3(ctx);
                                        if v750 == true {
                                            let v2063 = constructor_xmm_uninit_value(ctx);
                                            let v3272 = &constructor_sink_load_to_gpr_mem(ctx, v3271);
                                            let v3273 = constructor_x64_pinsrb(ctx, v2063, v3272, 0x0_u8);
                                            let v1413 = constructor_xmm_zero(ctx, I8X16);
                                            let v1414 = &C::xmm_to_xmm_mem(ctx, v1413);
                                            let v3274 = constructor_x64_pshufb(ctx, v3273, v1414);
                                            let v3275 = constructor_output_xmm(ctx, v3274);
                                            let v3276 = Some(v3275);
                                            // Rule at src/isa/x64/lower.isle line 4751.
                                            return v3276;
                                        }
                                    }
                                }
                                let v3265 = C::use_avx2(ctx);
                                if v3265 == true {
                                    let v560 = constructor_put_in_gpr(ctx, v559);
                                    let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                    let v3266 = &C::xmm_to_xmm_mem(ctx, v3259);
                                    let v3267 = constructor_x64_vpbroadcastb(ctx, v3266);
                                    let v3268 = constructor_output_xmm(ctx, v3267);
                                    let v3269 = Some(v3268);
                                    // Rule at src/isa/x64/lower.isle line 4748.
                                    return v3269;
                                }
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v560 = constructor_put_in_gpr(ctx, v559);
                                    let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                    let v3260 = constructor_xmm_zero(ctx, I8X16);
                                    let v3261 = &C::xmm_to_xmm_mem(ctx, v3260);
                                    let v3262 = constructor_x64_pshufb(ctx, v3259, v3261);
                                    let v3263 = constructor_output_xmm(ctx, v3262);
                                    let v3264 = Some(v3263);
                                    // Rule at src/isa/x64/lower.isle line 4745.
                                    return v3264;
                                }
                                let v3248 = &constructor_put_in_gpr_mem(ctx, v559);
                                let v3249 = constructor_x64_movd_to_xmm(ctx, v3248);
                                let v3250 = &C::xmm_to_xmm_mem(ctx, v3249);
                                let v3251 = constructor_x64_punpcklbw(ctx, v3249, v3250);
                                let v3252 = &C::xmm_to_xmm_mem(ctx, v3251);
                                let v3253 = constructor_x64_pshuflw(ctx, v3252, 0x0_u8);
                                let v3254 = &C::xmm_to_xmm_mem(ctx, v3253);
                                let v3255 = constructor_x64_pshufd(ctx, v3254, 0x0_u8);
                                let v3256 = constructor_output_xmm(ctx, v3255);
                                let v3257 = Some(v3256);
                                // Rule at src/isa/x64/lower.isle line 4742.
                                return v3257;
                            }
                            I16X8 => {
                                let v3270 = &C::sinkable_load_exact(ctx, v559);
                                if let Some(v3271) = v3270 {
                                    let v3265 = C::use_avx2(ctx);
                                    if v3265 == true {
                                        let v3277 = &constructor_sink_load_to_xmm_mem(ctx, v3271);
                                        let v3296 = constructor_x64_vpbroadcastw(ctx, v3277);
                                        let v3297 = constructor_output_xmm(ctx, v3296);
                                        let v3298 = Some(v3297);
                                        // Rule at src/isa/x64/lower.isle line 4771.
                                        return v3298;
                                    }
                                    let v2063 = constructor_xmm_uninit_value(ctx);
                                    let v3272 = &constructor_sink_load_to_gpr_mem(ctx, v3271);
                                    let v3289 = constructor_x64_pinsrw(ctx, v2063, v3272, 0x0_u8);
                                    let v3290 = &C::xmm_to_xmm_mem(ctx, v3289);
                                    let v3291 = constructor_x64_pshuflw(ctx, v3290, 0x0_u8);
                                    let v3292 = &C::xmm_to_xmm_mem(ctx, v3291);
                                    let v3293 = constructor_x64_pshufd(ctx, v3292, 0x0_u8);
                                    let v3294 = constructor_output_xmm(ctx, v3293);
                                    let v3295 = Some(v3294);
                                    // Rule at src/isa/x64/lower.isle line 4769.
                                    return v3295;
                                }
                                let v3265 = C::use_avx2(ctx);
                                if v3265 == true {
                                    let v560 = constructor_put_in_gpr(ctx, v559);
                                    let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                    let v3266 = &C::xmm_to_xmm_mem(ctx, v3259);
                                    let v3286 = constructor_x64_vpbroadcastw(ctx, v3266);
                                    let v3287 = constructor_output_xmm(ctx, v3286);
                                    let v3288 = Some(v3287);
                                    // Rule at src/isa/x64/lower.isle line 4766.
                                    return v3288;
                                }
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                let v3266 = &C::xmm_to_xmm_mem(ctx, v3259);
                                let v3281 = constructor_x64_pshuflw(ctx, v3266, 0x0_u8);
                                let v3282 = &C::xmm_to_xmm_mem(ctx, v3281);
                                let v3283 = constructor_x64_pshufd(ctx, v3282, 0x0_u8);
                                let v3284 = constructor_output_xmm(ctx, v3283);
                                let v3285 = Some(v3284);
                                // Rule at src/isa/x64/lower.isle line 4764.
                                return v3285;
                            }
                            I32X4 => {
                                let v3265 = C::use_avx2(ctx);
                                if v3265 == true {
                                    let v560 = constructor_put_in_gpr(ctx, v559);
                                    let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                    let v3266 = &C::xmm_to_xmm_mem(ctx, v3259);
                                    let v3302 = constructor_x64_vpbroadcastd(ctx, v3266);
                                    let v3303 = constructor_output_xmm(ctx, v3302);
                                    let v3304 = Some(v3303);
                                    // Rule at src/isa/x64/lower.isle line 4781.
                                    return v3304;
                                }
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v3259 = constructor_bitcast_gpr_to_xmm(ctx, 0x20_u8, v560);
                                let v3266 = &C::xmm_to_xmm_mem(ctx, v3259);
                                let v3299 = constructor_x64_pshufd(ctx, v3266, 0x0_u8);
                                let v3300 = constructor_output_xmm(ctx, v3299);
                                let v3301 = Some(v3300);
                                // Rule at src/isa/x64/lower.isle line 4779.
                                return v3301;
                            }
                            I64X2 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v3321 = constructor_bitcast_gpr_to_xmm(ctx, 0x40_u8, v560);
                                let v3322 = &C::xmm_to_xmm_mem(ctx, v3321);
                                let v3324 = constructor_x64_pshufd(ctx, v3322, 0x44_u8);
                                let v3325 = constructor_output_xmm(ctx, v3324);
                                let v3326 = Some(v3325);
                                // Rule at src/isa/x64/lower.isle line 4814.
                                return v3326;
                            }
                            F32X4 => {
                                let v3265 = C::use_avx2(ctx);
                                if v3265 == true {
                                    let v751 = &C::put_in_xmm_mem(ctx, v559);
                                    let v3309 = constructor_x64_vbroadcastss(ctx, v751);
                                    let v3310 = constructor_output_xmm(ctx, v3309);
                                    let v3311 = Some(v3310);
                                    // Rule at src/isa/x64/lower.isle line 4791.
                                    return v3311;
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v3305 = constructor_put_in_xmm(ctx, v559);
                                let v577 = &C::put_in_xmm_mem(ctx, v559);
                                let v3306 = constructor_x64_shufps(ctx, v3305, v577, 0x0_u8);
                                let v3307 = constructor_output_xmm(ctx, v3306);
                                let v3308 = Some(v3307);
                                // Rule at src/isa/x64/lower.isle line 4788.
                                return v3308;
                            }
                            F64X2 => {
                                let v751 = &C::put_in_xmm_mem(ctx, v559);
                                let v3327 = constructor_x64_pshufd(ctx, v751, 0x44_u8);
                                let v3328 = constructor_output_xmm(ctx, v3327);
                                let v3329 = Some(v3328);
                                // Rule at src/isa/x64/lower.isle line 4816.
                                return v3329;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v560 = constructor_put_in_gpr(ctx, v559);
                    let v3028 = &constructor_write_pinned_gpr(ctx, v560);
                    let v3029 = constructor_side_effect(ctx, v3028);
                    let v3030 = Some(v3029);
                    // Rule at src/isa/x64/lower.isle line 4459.
                    return v3030;
                }
                &Opcode::VanyTrue => {
                    let v656 = C::use_sse41(ctx);
                    if v656 == true {
                        let v755 = constructor_put_in_xmm(ctx, v559);
                        let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                        let v3333 = &constructor_x64_ptest(ctx, v755, v1853);
                        let v3334 = &constructor_x64_setcc(ctx, &CC::NZ);
                        let v3335 = constructor_with_flags(ctx, v3333, v3334);
                        let v3336 = C::output(ctx, v3335);
                        let v3337 = Some(v3336);
                        // Rule at src/isa/x64/lower.isle line 4824.
                        return v3337;
                    }
                    let v3338 = &constructor_emit_vany_true(ctx, v559);
                    let v3339 = constructor_lower_icmp_bool(ctx, v3338);
                    let v3340 = C::output(ctx, v3339);
                    let v3341 = Some(v3340);
                    // Rule at src/isa/x64/lower.isle line 4833.
                    return v3341;
                }
                &Opcode::VallTrue => {
                    let v3342 = &constructor_emit_vall_true(ctx, v559);
                    let v3343 = constructor_lower_icmp_bool(ctx, v3342);
                    let v3344 = C::output(ctx, v3343);
                    let v3345 = Some(v3344);
                    // Rule at src/isa/x64/lower.isle line 4847.
                    return v3345;
                }
                &Opcode::VhighBits => {
                    let v884 = C::value_type(ctx, v559);
                    let v3346 = C::multi_lane(ctx, v884);
                    if let Some(v3347) = v3346 {
                        match v3347.0 {
                            0x8_u32 => {
                                if v3347.1 == 0x10_u32 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v3351 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v755);
                                    let v3352 = constructor_output_gpr(ctx, v3351);
                                    let v3353 = Some(v3352);
                                    // Rule at src/isa/x64/lower.isle line 4878.
                                    return v3353;
                                }
                            }
                            0x10_u32 => {
                                if v3347.1 == 0x8_u32 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                    let v3360 = constructor_x64_packsswb(ctx, v755, v1853);
                                    let v3361 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v3360);
                                    let v1707 = Imm8Reg::Imm8 {
                                        imm: 0x8_u8,
                                    };
                                    let v2968 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                                    let v3362 = constructor_x64_shr(ctx, I64, v3361, v2968);
                                    let v3363 = constructor_output_gpr(ctx, v3362);
                                    let v3364 = Some(v3363);
                                    // Rule at src/isa/x64/lower.isle line 4893.
                                    return v3364;
                                }
                            }
                            0x20_u32 => {
                                if v3347.1 == 0x4_u32 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v3354 = constructor_x64_movmskps(ctx, &OperandSize::Size32, v755);
                                    let v3355 = constructor_output_gpr(ctx, v3354);
                                    let v3356 = Some(v3355);
                                    // Rule at src/isa/x64/lower.isle line 4881.
                                    return v3356;
                                }
                            }
                            0x40_u32 => {
                                if v3347.1 == 0x2_u32 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v3357 = constructor_x64_movmskpd(ctx, &OperandSize::Size32, v755);
                                    let v3358 = constructor_output_gpr(ctx, v3357);
                                    let v3359 = Some(v3358);
                                    // Rule at src/isa/x64/lower.isle line 4884.
                                    return v3359;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8X16 => {
                                let v575 = constructor_imm(ctx, I8X16, 0x0_u64);
                                let v576 = C::xmm_new(ctx, v575);
                                let v577 = &C::put_in_xmm_mem(ctx, v559);
                                let v578 = constructor_x64_psubb(ctx, v576, v577);
                                let v579 = constructor_output_xmm(ctx, v578);
                                let v580 = Some(v579);
                                // Rule at src/isa/x64/lower.isle line 992.
                                return v580;
                            }
                            I16X8 => {
                                let v582 = constructor_imm(ctx, I16X8, 0x0_u64);
                                let v583 = C::xmm_new(ctx, v582);
                                let v577 = &C::put_in_xmm_mem(ctx, v559);
                                let v584 = constructor_x64_psubw(ctx, v583, v577);
                                let v585 = constructor_output_xmm(ctx, v584);
                                let v586 = Some(v585);
                                // Rule at src/isa/x64/lower.isle line 995.
                                return v586;
                            }
                            I32X4 => {
                                let v588 = constructor_imm(ctx, I32X4, 0x0_u64);
                                let v589 = C::xmm_new(ctx, v588);
                                let v577 = &C::put_in_xmm_mem(ctx, v559);
                                let v590 = constructor_x64_psubd(ctx, v589, v577);
                                let v591 = constructor_output_xmm(ctx, v590);
                                let v592 = Some(v591);
                                // Rule at src/isa/x64/lower.isle line 998.
                                return v592;
                            }
                            I64X2 => {
                                let v594 = constructor_imm(ctx, I64X2, 0x0_u64);
                                let v595 = C::xmm_new(ctx, v594);
                                let v577 = &C::put_in_xmm_mem(ctx, v559);
                                let v596 = constructor_x64_psubq(ctx, v595, v577);
                                let v597 = constructor_output_xmm(ctx, v596);
                                let v598 = Some(v597);
                                // Rule at src/isa/x64/lower.isle line 1001.
                                return v598;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v561 = constructor_x64_neg(ctx, v5, v560);
                            let v562 = constructor_output_gpr(ctx, v561);
                            let v563 = Some(v562);
                            // Rule at src/isa/x64/lower.isle line 978.
                            return v563;
                        }
                        if v3 == I128 {
                            let v564 = C::put_in_regs(ctx, v559);
                            let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                            let v566 = constructor_value_regs_get_gpr(ctx, v564, 0x1_usize);
                            let v567 = &constructor_x64_neg_paired(ctx, I64, v565);
                            let v568 = constructor_imm(ctx, I64, 0x0_u64);
                            let v569 = C::gpr_new(ctx, v568);
                            let v570 = &C::gpr_to_gpr_mem_imm(ctx, v566);
                            let v571 = &constructor_x64_sbb_paired(ctx, I64, v569, v570);
                            let v572 = constructor_with_flags(ctx, v567, v571);
                            let v573 = C::output(ctx, v572);
                            let v574 = Some(v573);
                            // Rule at src/isa/x64/lower.isle line 981.
                            return v574;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v564 = C::put_in_regs(ctx, v559);
                                let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                                let v566 = constructor_value_regs_get_gpr(ctx, v564, 0x1_usize);
                                let v567 = &constructor_x64_neg_paired(ctx, I64, v565);
                                let v568 = constructor_imm(ctx, I64, 0x0_u64);
                                let v817 = &constructor_reg_to_gpr_mem_imm(ctx, v568);
                                let v818 = &constructor_x64_adc_paired(ctx, I64, v566, v817);
                                let v819 = constructor_with_flags(ctx, v567, v818);
                                let v820 = C::value_regs_get(ctx, v819, 0x1_usize);
                                let v821 = C::gpr_new(ctx, v820);
                                let v822 = &constructor_x64_neg_paired(ctx, I64, v821);
                                let v823 = &constructor_produces_flags_ignore(ctx, v822);
                                let v824 = &C::gpr_to_gpr_mem(ctx, v565);
                                let v825 = C::value_regs_get(ctx, v819, 0x0_usize);
                                let v826 = C::gpr_new(ctx, v825);
                                let v827 = &constructor_cmove(ctx, I64, &CC::S, v824, v826);
                                let v828 = &C::gpr_to_gpr_mem(ctx, v566);
                                let v829 = constructor_produces_flags_get_reg(ctx, v822);
                                let v830 = C::gpr_new(ctx, v829);
                                let v831 = &constructor_cmove(ctx, I64, &CC::S, v828, v830);
                                let v832 = &constructor_consumes_flags_concat(ctx, v827, v831);
                                let v833 = constructor_with_flags(ctx, v823, v832);
                                let v834 = C::output(ctx, v833);
                                let v835 = Some(v834);
                                // Rule at src/isa/x64/lower.isle line 1352.
                                return v835;
                            }
                            I8X16 => {
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v751 = &C::put_in_xmm_mem(ctx, v559);
                                    let v752 = constructor_x64_pabsb(ctx, v751);
                                    let v753 = constructor_output_xmm(ctx, v752);
                                    let v754 = Some(v753);
                                    // Rule at src/isa/x64/lower.isle line 1268.
                                    return v754;
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v756 = constructor_xmm_zero(ctx, I8X16);
                                let v757 = &C::xmm_to_xmm_mem(ctx, v755);
                                let v758 = constructor_x64_psubb(ctx, v756, v757);
                                let v759 = &C::xmm_to_xmm_mem(ctx, v758);
                                let v760 = constructor_x64_pminub(ctx, v755, v759);
                                let v761 = constructor_output_xmm(ctx, v760);
                                let v762 = Some(v761);
                                // Rule at src/isa/x64/lower.isle line 1275.
                                return v762;
                            }
                            I16X8 => {
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v751 = &C::put_in_xmm_mem(ctx, v559);
                                    let v763 = constructor_x64_pabsw(ctx, v751);
                                    let v764 = constructor_output_xmm(ctx, v763);
                                    let v765 = Some(v764);
                                    // Rule at src/isa/x64/lower.isle line 1282.
                                    return v765;
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v766 = constructor_xmm_zero(ctx, I16X8);
                                let v757 = &C::xmm_to_xmm_mem(ctx, v755);
                                let v767 = constructor_x64_psubw(ctx, v766, v757);
                                let v768 = &C::xmm_to_xmm_mem(ctx, v767);
                                let v769 = constructor_x64_pmaxsw(ctx, v755, v768);
                                let v770 = constructor_output_xmm(ctx, v769);
                                let v771 = Some(v770);
                                // Rule at src/isa/x64/lower.isle line 1286.
                                return v771;
                            }
                            I32X4 => {
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v751 = &C::put_in_xmm_mem(ctx, v559);
                                    let v772 = constructor_x64_pabsd(ctx, v751);
                                    let v773 = constructor_output_xmm(ctx, v772);
                                    let v774 = Some(v773);
                                    // Rule at src/isa/x64/lower.isle line 1293.
                                    return v774;
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v776 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v777 = constructor_x64_psrad(ctx, v755, v776);
                                let v778 = &C::xmm_to_xmm_mem(ctx, v777);
                                let v779 = constructor_x64_pxor(ctx, v755, v778);
                                let v780 = &C::xmm_to_xmm_mem(ctx, v777);
                                let v781 = constructor_x64_psubd(ctx, v779, v780);
                                let v782 = constructor_output_xmm(ctx, v781);
                                let v783 = Some(v782);
                                // Rule at src/isa/x64/lower.isle line 1303.
                                return v783;
                            }
                            I64X2 => {
                                let v502 = C::use_avx512vl(ctx);
                                if v502 == true {
                                    let v503 = C::use_avx512f(ctx);
                                    if v503 == true {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v784 = constructor_x64_vpabsq(ctx, v751);
                                        let v785 = constructor_output_xmm(ctx, v784);
                                        let v786 = Some(v785);
                                        // Rule at src/isa/x64/lower.isle line 1312.
                                        return v786;
                                    }
                                }
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v787 = constructor_imm(ctx, I64X2, 0x0_u64);
                                    let v788 = C::xmm_new(ctx, v787);
                                    let v789 = &C::xmm_to_xmm_mem(ctx, v755);
                                    let v790 = constructor_x64_psubq(ctx, v788, v789);
                                    let v791 = &C::xmm_to_xmm_mem(ctx, v755);
                                    let v792 = constructor_x64_blendvpd(ctx, v790, v791, v790);
                                    let v793 = constructor_output_xmm(ctx, v792);
                                    let v794 = Some(v793);
                                    // Rule at src/isa/x64/lower.isle line 1321.
                                    return v794;
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v795 = RegMemImm::Imm {
                                    simm32: 0x1f_u32,
                                };
                                let v796 = &C::xmm_mem_imm_new(ctx, &v795);
                                let v797 = constructor_x64_psrad(ctx, v755, v796);
                                let v798 = &C::xmm_to_xmm_mem(ctx, v797);
                                let v800 = constructor_x64_pshufd(ctx, v798, 0xf5_u8);
                                let v801 = &C::xmm_to_xmm_mem(ctx, v800);
                                let v802 = constructor_x64_pxor(ctx, v755, v801);
                                let v803 = &C::xmm_to_xmm_mem(ctx, v800);
                                let v804 = constructor_x64_psubq(ctx, v802, v803);
                                let v805 = constructor_output_xmm(ctx, v804);
                                let v806 = Some(v805);
                                // Rule at src/isa/x64/lower.isle line 1330.
                                return v806;
                            }
                            _ => {}
                        }
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v807 = &constructor_x64_neg_paired(ctx, v5, v560);
                            let v808 = constructor_produces_flags_get_reg(ctx, v807);
                            let v809 = C::gpr_new(ctx, v808);
                            let v811 = &C::gpr_to_gpr_mem(ctx, v560);
                            let v812 = &constructor_cmove(ctx, v5, &CC::S, v811, v809);
                            let v813 = &constructor_produces_flags_ignore(ctx, v807);
                            let v814 = constructor_with_flags_reg(ctx, v813, v812);
                            let v815 = constructor_output_reg(ctx, v814);
                            let v816 = Some(v815);
                            // Rule at src/isa/x64/lower.isle line 1339.
                            return v816;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v891 = constructor_i128_not(ctx, v559);
                            let v892 = C::output(ctx, v891);
                            let v893 = Some(v892);
                            // Rule at src/isa/x64/lower.isle line 1469.
                            return v893;
                        }
                        let v89 = C::multi_lane(ctx, v3);
                        if let Some(v90) = v89 {
                            let v755 = constructor_put_in_xmm(ctx, v559);
                            let v848 = constructor_vector_all_ones(ctx);
                            let v894 = &C::xmm_to_xmm_mem(ctx, v848);
                            let v898 = constructor_x64_xor_vector(ctx, v3, v755, v894);
                            let v899 = constructor_output_xmm(ctx, v898);
                            let v900 = Some(v899);
                            // Rule at src/isa/x64/lower.isle line 1479.
                            return v900;
                        }
                        let v237 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v238) = v237 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v888 = constructor_x64_not(ctx, v3, v560);
                            let v889 = constructor_output_gpr(ctx, v888);
                            let v890 = Some(v889);
                            // Rule at src/isa/x64/lower.isle line 1454.
                            return v890;
                        }
                        let v250 = C::ty_scalar_float(ctx, v3);
                        if let Some(v251) = v250 {
                            let v755 = constructor_put_in_xmm(ctx, v559);
                            let v848 = constructor_vector_all_ones(ctx);
                            let v894 = &C::xmm_to_xmm_mem(ctx, v848);
                            let v895 = constructor_x64_xor_vector(ctx, v251, v755, v894);
                            let v896 = constructor_output_xmm(ctx, v895);
                            let v897 = Some(v896);
                            // Rule at src/isa/x64/lower.isle line 1474.
                            return v897;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1685 = constructor_do_bitrev8(ctx, I32, v560);
                                let v1686 = constructor_output_gpr(ctx, v1685);
                                let v1687 = Some(v1686);
                                // Rule at src/isa/x64/lower.isle line 2448.
                                return v1687;
                            }
                            I16 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1688 = constructor_do_bitrev16(ctx, I32, v560);
                                let v1689 = constructor_output_gpr(ctx, v1688);
                                let v1690 = Some(v1689);
                                // Rule at src/isa/x64/lower.isle line 2451.
                                return v1690;
                            }
                            I32 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1691 = constructor_do_bitrev32(ctx, I32, v560);
                                let v1692 = constructor_output_gpr(ctx, v1691);
                                let v1693 = Some(v1692);
                                // Rule at src/isa/x64/lower.isle line 2454.
                                return v1693;
                            }
                            I64 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1694 = constructor_do_bitrev64(ctx, I64, v560);
                                let v1695 = constructor_output_gpr(ctx, v1694);
                                let v1696 = Some(v1695);
                                // Rule at src/isa/x64/lower.isle line 2457.
                                return v1696;
                            }
                            I128 => {
                                let v564 = C::put_in_regs(ctx, v559);
                                let v1560 = constructor_value_regs_get_gpr(ctx, v564, 0x1_usize);
                                let v1697 = constructor_do_bitrev64(ctx, I64, v1560);
                                let v1698 = C::gpr_to_reg(ctx, v1697);
                                let v1699 = C::put_in_regs(ctx, v559);
                                let v1700 = constructor_value_regs_get_gpr(ctx, v1699, 0x0_usize);
                                let v1701 = constructor_do_bitrev64(ctx, I64, v1700);
                                let v1702 = C::gpr_to_reg(ctx, v1701);
                                let v1703 = C::value_regs(ctx, v1698, v1702);
                                let v1704 = C::output(ctx, v1703);
                                let v1705 = Some(v1704);
                                // Rule at src/isa/x64/lower.isle line 2460.
                                return v1705;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v1544 = constructor_do_clz(ctx, v68, v68, v560);
                            let v1545 = constructor_output_gpr(ctx, v1544);
                            let v1546 = Some(v1545);
                            // Rule at src/isa/x64/lower.isle line 2221.
                            return v1546;
                        }
                        let v1547 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1548) = v1547 {
                            let v1549 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Zero);
                            let v1550 = constructor_do_clz(ctx, I64, I64, v1549);
                            let v1552 = C::ty_bits(ctx, v1548);
                            let v1553 = C::u8_as_u32(ctx, v1552);
                            let v1554 = C::u32_sub(ctx, 0x40_u32, v1553);
                            let v1555 = RegMemImm::Imm {
                                simm32: v1554,
                            };
                            let v1556 = &C::gpr_mem_imm_new(ctx, &v1555);
                            let v1557 = constructor_x64_sub(ctx, I64, v1550, v1556);
                            let v1558 = constructor_output_gpr(ctx, v1557);
                            let v1559 = Some(v1558);
                            // Rule at src/isa/x64/lower.isle line 2224.
                            return v1559;
                        }
                        if v3 == I128 {
                            let v564 = C::put_in_regs(ctx, v559);
                            let v1560 = constructor_value_regs_get_gpr(ctx, v564, 0x1_usize);
                            let v1561 = constructor_do_clz(ctx, I64, I64, v1560);
                            let v1562 = C::put_in_regs(ctx, v559);
                            let v1563 = constructor_value_regs_get_gpr(ctx, v1562, 0x0_usize);
                            let v1564 = constructor_do_clz(ctx, I64, I64, v1563);
                            let v1565 = RegMemImm::Imm {
                                simm32: 0x40_u32,
                            };
                            let v1566 = &C::gpr_mem_imm_new(ctx, &v1565);
                            let v1567 = constructor_x64_add(ctx, I64, v1564, v1566);
                            let v1569 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1561, 0x40_u32);
                            let v1570 = &C::gpr_to_gpr_mem(ctx, v1561);
                            let v1571 = &constructor_cmove(ctx, I64, &CC::NZ, v1570, v1567);
                            let v1572 = constructor_with_flags_reg(ctx, v1569, v1571);
                            let v1573 = C::gpr_new(ctx, v1572);
                            let v1574 = C::gpr_to_reg(ctx, v1573);
                            let v1575 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1576 = C::value_regs(ctx, v1574, v1575);
                            let v1577 = C::output(ctx, v1576);
                            let v1578 = Some(v1577);
                            // Rule at src/isa/x64/lower.isle line 2230.
                            return v1578;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v1579 = constructor_do_ctz(ctx, v68, v68, v560);
                            let v1580 = constructor_output_gpr(ctx, v1579);
                            let v1581 = Some(v1580);
                            // Rule at src/isa/x64/lower.isle line 2261.
                            return v1581;
                        }
                        let v1547 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1548) = v1547 {
                            let v1582 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Zero);
                            let v1552 = C::ty_bits(ctx, v1548);
                            let v1553 = C::u8_as_u32(ctx, v1552);
                            let v1583 = C::u32_shl(ctx, 0x1_u32, v1553);
                            let v1584 = RegMemImm::Imm {
                                simm32: v1583,
                            };
                            let v1585 = &C::gpr_mem_imm_new(ctx, &v1584);
                            let v1586 = constructor_x64_or(ctx, I32, v1582, v1585);
                            let v1587 = constructor_do_ctz(ctx, I32, v1548, v1586);
                            let v1588 = constructor_output_gpr(ctx, v1587);
                            let v1589 = Some(v1588);
                            // Rule at src/isa/x64/lower.isle line 2264.
                            return v1589;
                        }
                        if v3 == I128 {
                            let v564 = C::put_in_regs(ctx, v559);
                            let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                            let v1590 = constructor_do_ctz(ctx, I64, I64, v565);
                            let v1562 = C::put_in_regs(ctx, v559);
                            let v1591 = constructor_value_regs_get_gpr(ctx, v1562, 0x1_usize);
                            let v1592 = constructor_do_ctz(ctx, I64, I64, v1591);
                            let v1565 = RegMemImm::Imm {
                                simm32: 0x40_u32,
                            };
                            let v1566 = &C::gpr_mem_imm_new(ctx, &v1565);
                            let v1593 = constructor_x64_add(ctx, I64, v1592, v1566);
                            let v1594 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size64, v1590, 0x40_u32);
                            let v1595 = &C::gpr_to_gpr_mem(ctx, v1593);
                            let v1596 = &constructor_cmove(ctx, I64, &CC::Z, v1595, v1590);
                            let v1597 = constructor_with_flags_reg(ctx, v1594, v1596);
                            let v1598 = C::gpr_new(ctx, v1597);
                            let v1599 = C::gpr_to_reg(ctx, v1598);
                            let v1575 = constructor_imm(ctx, I64, 0x0_u64);
                            let v1600 = C::value_regs(ctx, v1599, v1575);
                            let v1601 = C::output(ctx, v1600);
                            let v1602 = Some(v1601);
                            // Rule at src/isa/x64/lower.isle line 2269.
                            return v1602;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1707 = Imm8Reg::Imm8 {
                                    imm: 0x8_u8,
                                };
                                let v1708 = &C::imm8_reg_to_imm8_gpr(ctx, &v1707);
                                let v1709 = constructor_x64_rotl(ctx, I16, v560, v1708);
                                let v1710 = constructor_output_gpr(ctx, v1709);
                                let v1711 = Some(v1710);
                                // Rule at src/isa/x64/lower.isle line 2527.
                                return v1711;
                            }
                            I32 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1712 = constructor_x64_bswap(ctx, I32, v560);
                                let v1713 = constructor_output_gpr(ctx, v1712);
                                let v1714 = Some(v1713);
                                // Rule at src/isa/x64/lower.isle line 2530.
                                return v1714;
                            }
                            I64 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1715 = constructor_x64_bswap(ctx, I64, v560);
                                let v1716 = constructor_output_gpr(ctx, v1715);
                                let v1717 = Some(v1716);
                                // Rule at src/isa/x64/lower.isle line 2533.
                                return v1717;
                            }
                            I128 => {
                                let v564 = C::put_in_regs(ctx, v559);
                                let v1560 = constructor_value_regs_get_gpr(ctx, v564, 0x1_usize);
                                let v1718 = constructor_x64_bswap(ctx, I64, v1560);
                                let v1719 = C::gpr_to_reg(ctx, v1718);
                                let v1699 = C::put_in_regs(ctx, v559);
                                let v1700 = constructor_value_regs_get_gpr(ctx, v1699, 0x0_usize);
                                let v1720 = constructor_x64_bswap(ctx, I64, v1700);
                                let v1721 = C::gpr_to_reg(ctx, v1720);
                                let v1722 = C::value_regs(ctx, v1719, v1721);
                                let v1723 = C::output(ctx, v1722);
                                let v1724 = Some(v1723);
                                // Rule at src/isa/x64/lower.isle line 2536.
                                return v1724;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1603 = C::use_popcnt(ctx);
                        if v1603 == true {
                            let v3 = C::value_type(ctx, v2);
                            let v67 = C::ty_32_or_64(ctx, v3);
                            if let Some(v68) = v67 {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v1604 = constructor_x64_popcnt(ctx, v68, v560);
                                let v1605 = constructor_output_gpr(ctx, v1604);
                                let v1606 = Some(v1605);
                                // Rule at src/isa/x64/lower.isle line 2295.
                                return v1606;
                            }
                            let v1547 = C::ty_8_or_16(ctx, v3);
                            if let Some(v1548) = v1547 {
                                let v1582 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Zero);
                                let v1607 = constructor_x64_popcnt(ctx, I32, v1582);
                                let v1608 = constructor_output_gpr(ctx, v1607);
                                let v1609 = Some(v1608);
                                // Rule at src/isa/x64/lower.isle line 2299.
                                return v1609;
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                if v1603 == true {
                                    let v564 = C::put_in_regs(ctx, v559);
                                    let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                                    let v1610 = constructor_x64_popcnt(ctx, I64, v565);
                                    let v1562 = C::put_in_regs(ctx, v559);
                                    let v1591 = constructor_value_regs_get_gpr(ctx, v1562, 0x1_usize);
                                    let v1611 = constructor_x64_popcnt(ctx, I64, v1591);
                                    let v1612 = &C::gpr_to_gpr_mem_imm(ctx, v1611);
                                    let v1613 = constructor_x64_add(ctx, I64, v1610, v1612);
                                    let v1614 = C::gpr_to_reg(ctx, v1613);
                                    let v1615 = constructor_imm(ctx, I64, 0x0_u64);
                                    let v1616 = C::value_regs(ctx, v1614, v1615);
                                    let v1617 = C::output(ctx, v1616);
                                    let v1618 = Some(v1617);
                                    // Rule at src/isa/x64/lower.isle line 2303.
                                    return v1618;
                                }
                                let v564 = C::put_in_regs(ctx, v559);
                                let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                                let v1625 = constructor_do_popcnt(ctx, I64, v565);
                                let v1562 = C::put_in_regs(ctx, v559);
                                let v1591 = constructor_value_regs_get_gpr(ctx, v1562, 0x1_usize);
                                let v1626 = constructor_do_popcnt(ctx, I64, v1591);
                                let v1627 = &C::gpr_to_gpr_mem_imm(ctx, v1626);
                                let v1628 = constructor_x64_add(ctx, I64, v1625, v1627);
                                let v1629 = C::gpr_to_reg(ctx, v1628);
                                let v1615 = constructor_imm(ctx, I64, 0x0_u64);
                                let v1630 = C::value_regs(ctx, v1629, v1615);
                                let v1631 = C::output(ctx, v1630);
                                let v1632 = Some(v1631);
                                // Rule at src/isa/x64/lower.isle line 2319.
                                return v1632;
                            }
                            I8X16 => {
                                let v502 = C::use_avx512vl(ctx);
                                if v502 == true {
                                    let v1633 = C::use_avx512bitalg(ctx);
                                    if v1633 == true {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v1634 = constructor_x64_vpopcntb(ctx, v751);
                                        let v1635 = constructor_output_xmm(ctx, v1634);
                                        let v1636 = Some(v1635);
                                        // Rule at src/isa/x64/lower.isle line 2392.
                                        return v1636;
                                    }
                                }
                                let v750 = C::use_ssse3(ctx);
                                if v750 == true {
                                    let v1638 = C::emit_u128_le_const(ctx, 0xf0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f_u128);
                                    let v1639 = &constructor_const_to_xmm_mem(ctx, v1638);
                                    let v1640 = constructor_put_in_xmm(ctx, v559);
                                    let v1641 = constructor_sse_and(ctx, I8X16, v1640, v1639);
                                    let v1642 = constructor_put_in_xmm(ctx, v559);
                                    let v1644 = &C::xmi_imm(ctx, 0x4_u32);
                                    let v1645 = constructor_x64_psrlw(ctx, v1642, v1644);
                                    let v1646 = constructor_sse_and(ctx, I8X16, v1645, v1639);
                                    let v1648 = C::emit_u128_le_const(ctx, 0x4030302030202010302020102010100_u128);
                                    let v1649 = constructor_x64_xmm_load_const(ctx, I8X16, v1648);
                                    let v1650 = &C::xmm_to_xmm_mem(ctx, v1641);
                                    let v1651 = constructor_x64_pshufb(ctx, v1649, v1650);
                                    let v1652 = &C::xmm_to_xmm_mem(ctx, v1646);
                                    let v1653 = constructor_x64_pshufb(ctx, v1649, v1652);
                                    let v1654 = &C::xmm_to_xmm_mem(ctx, v1653);
                                    let v1655 = constructor_x64_paddb(ctx, v1651, v1654);
                                    let v1656 = constructor_output_xmm(ctx, v1655);
                                    let v1657 = Some(v1656);
                                    // Rule at src/isa/x64/lower.isle line 2418.
                                    return v1657;
                                }
                                let v1659 = C::emit_u128_le_const(ctx, 0x77777777777777777777777777777777_u128);
                                let v1660 = &constructor_const_to_xmm_mem(ctx, v1659);
                                let v1640 = constructor_put_in_xmm(ctx, v559);
                                let v1661 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1662 = constructor_x64_psrlq(ctx, v1640, v1661);
                                let v1663 = constructor_x64_pand(ctx, v1662, v1660);
                                let v1664 = &C::xmm_to_xmm_mem(ctx, v1663);
                                let v1665 = constructor_x64_psubb(ctx, v1640, v1664);
                                let v1666 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1667 = constructor_x64_psrlq(ctx, v1663, v1666);
                                let v1668 = constructor_x64_pand(ctx, v1667, v1660);
                                let v1669 = &C::xmm_to_xmm_mem(ctx, v1668);
                                let v1670 = constructor_x64_psubb(ctx, v1665, v1669);
                                let v1671 = &C::xmi_imm(ctx, 0x1_u32);
                                let v1672 = constructor_x64_psrlq(ctx, v1668, v1671);
                                let v1673 = constructor_x64_pand(ctx, v1672, v1660);
                                let v1674 = &C::xmm_to_xmm_mem(ctx, v1673);
                                let v1675 = constructor_x64_psubb(ctx, v1670, v1674);
                                let v1676 = &C::xmi_imm(ctx, 0x4_u32);
                                let v1677 = constructor_x64_psrlw(ctx, v1675, v1676);
                                let v1678 = &C::xmm_to_xmm_mem(ctx, v1677);
                                let v1679 = constructor_x64_paddb(ctx, v1675, v1678);
                                let v1680 = C::emit_u128_le_const(ctx, 0xf0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f_u128);
                                let v1681 = &constructor_const_to_xmm_mem(ctx, v1680);
                                let v1682 = constructor_x64_pand(ctx, v1679, v1681);
                                let v1683 = constructor_output_xmm(ctx, v1682);
                                let v1684 = Some(v1683);
                                // Rule at src/isa/x64/lower.isle line 2434.
                                return v1684;
                            }
                            _ => {}
                        }
                        let v67 = C::ty_32_or_64(ctx, v3);
                        if let Some(v68) = v67 {
                            let v560 = constructor_put_in_gpr(ctx, v559);
                            let v1619 = constructor_do_popcnt(ctx, v68, v560);
                            let v1620 = constructor_output_gpr(ctx, v1619);
                            let v1621 = Some(v1620);
                            // Rule at src/isa/x64/lower.isle line 2309.
                            return v1621;
                        }
                        let v1547 = C::ty_8_or_16(ctx, v3);
                        if let Some(v1548) = v1547 {
                            let v1582 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Zero);
                            let v1622 = constructor_do_popcnt(ctx, I32, v1582);
                            let v1623 = constructor_output_gpr(ctx, v1622);
                            let v1624 = Some(v1623);
                            // Rule at src/isa/x64/lower.isle line 2314.
                            return v1624;
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v1834 = constructor_xmm_zero(ctx, F32X4);
                                let v1835 = &C::put_in_xmm_mem(ctx, v559);
                                let v1836 = constructor_x64_sqrtss(ctx, v1834, v1835);
                                let v1837 = constructor_output_xmm(ctx, v1836);
                                let v1838 = Some(v1837);
                                // Rule at src/isa/x64/lower.isle line 2666.
                                return v1838;
                            }
                            F64 => {
                                let v1840 = constructor_xmm_zero(ctx, F64X2);
                                let v1835 = &C::put_in_xmm_mem(ctx, v559);
                                let v1841 = constructor_x64_sqrtsd(ctx, v1840, v1835);
                                let v1842 = constructor_output_xmm(ctx, v1841);
                                let v1843 = Some(v1842);
                                // Rule at src/isa/x64/lower.isle line 2668.
                                return v1843;
                            }
                            F32X4 => {
                                let v751 = &C::put_in_xmm_mem(ctx, v559);
                                let v1844 = constructor_x64_sqrtps(ctx, v751);
                                let v1845 = constructor_output_xmm(ctx, v1844);
                                let v1846 = Some(v1845);
                                // Rule at src/isa/x64/lower.isle line 2670.
                                return v1846;
                            }
                            F64X2 => {
                                let v751 = &C::put_in_xmm_mem(ctx, v559);
                                let v1847 = constructor_x64_sqrtpd(ctx, v751);
                                let v1848 = constructor_output_xmm(ctx, v1847);
                                let v1849 = Some(v1848);
                                // Rule at src/isa/x64/lower.isle line 2672.
                                return v1849;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v861 = constructor_imm(ctx, F32, 0x80000000_u64);
                                let v862 = &constructor_reg_to_xmm_mem(ctx, v861);
                                let v863 = constructor_x64_xorps(ctx, v755, v862);
                                let v864 = constructor_output_xmm(ctx, v863);
                                let v865 = Some(v864);
                                // Rule at src/isa/x64/lower.isle line 1392.
                                return v865;
                            }
                            F64 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v867 = constructor_imm(ctx, F64, 0x8000000000000000_u64);
                                let v868 = &constructor_reg_to_xmm_mem(ctx, v867);
                                let v869 = constructor_x64_xorpd(ctx, v755, v868);
                                let v870 = constructor_output_xmm(ctx, v869);
                                let v871 = Some(v870);
                                // Rule at src/isa/x64/lower.isle line 1395.
                                return v871;
                            }
                            F32X4 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v848 = constructor_vector_all_ones(ctx);
                                let v872 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v873 = constructor_x64_pslld(ctx, v848, v872);
                                let v874 = &C::xmm_to_xmm_mem(ctx, v873);
                                let v875 = constructor_x64_xorps(ctx, v755, v874);
                                let v876 = constructor_output_xmm(ctx, v875);
                                let v877 = Some(v876);
                                // Rule at src/isa/x64/lower.isle line 1398.
                                return v877;
                            }
                            F64X2 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v848 = constructor_vector_all_ones(ctx);
                                let v878 = &C::xmi_imm(ctx, 0x3f_u32);
                                let v879 = constructor_x64_psllq(ctx, v848, v878);
                                let v880 = &C::xmm_to_xmm_mem(ctx, v879);
                                let v881 = constructor_x64_xorpd(ctx, v755, v880);
                                let v882 = constructor_output_xmm(ctx, v881);
                                let v883 = Some(v882);
                                // Rule at src/isa/x64/lower.isle line 1402.
                                return v883;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v837 = constructor_imm(ctx, F32, 0x7fffffff_u64);
                                let v838 = &constructor_reg_to_xmm_mem(ctx, v837);
                                let v839 = constructor_x64_andps(ctx, v755, v838);
                                let v840 = constructor_output_xmm(ctx, v839);
                                let v841 = Some(v840);
                                // Rule at src/isa/x64/lower.isle line 1374.
                                return v841;
                            }
                            F64 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v843 = constructor_imm(ctx, F64, 0x7fffffffffffffff_u64);
                                let v844 = &constructor_reg_to_xmm_mem(ctx, v843);
                                let v845 = constructor_x64_andpd(ctx, v755, v844);
                                let v846 = constructor_output_xmm(ctx, v845);
                                let v847 = Some(v846);
                                // Rule at src/isa/x64/lower.isle line 1377.
                                return v847;
                            }
                            F32X4 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v848 = constructor_vector_all_ones(ctx);
                                let v849 = &C::xmi_imm(ctx, 0x1_u32);
                                let v850 = constructor_x64_psrld(ctx, v848, v849);
                                let v851 = &C::xmm_to_xmm_mem(ctx, v850);
                                let v852 = constructor_x64_andps(ctx, v755, v851);
                                let v853 = constructor_output_xmm(ctx, v852);
                                let v854 = Some(v853);
                                // Rule at src/isa/x64/lower.isle line 1381.
                                return v854;
                            }
                            F64X2 => {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v848 = constructor_vector_all_ones(ctx);
                                let v849 = &C::xmi_imm(ctx, 0x1_u32);
                                let v855 = constructor_x64_psrlq(ctx, v848, v849);
                                let v856 = &C::xmm_to_xmm_mem(ctx, v855);
                                let v857 = constructor_x64_andpd(ctx, v755, v856);
                                let v858 = constructor_output_xmm(ctx, v857);
                                let v859 = Some(v858);
                                // Rule at src/isa/x64/lower.isle line 1386.
                                return v859;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v2913 = &C::put_in_reg_mem(ctx, v559);
                    let v884 = C::value_type(ctx, v559);
                    let v2915 = constructor_x64_round(ctx, v884, v2913, &RoundImm::RoundUp);
                    let v2916 = constructor_output_xmm(ctx, v2915);
                    let v2917 = Some(v2916);
                    // Rule at src/isa/x64/lower.isle line 4275.
                    return v2917;
                }
                &Opcode::Floor => {
                    let v2913 = &C::put_in_reg_mem(ctx, v559);
                    let v884 = C::value_type(ctx, v559);
                    let v2919 = constructor_x64_round(ctx, v884, v2913, &RoundImm::RoundDown);
                    let v2920 = constructor_output_xmm(ctx, v2919);
                    let v2921 = Some(v2920);
                    // Rule at src/isa/x64/lower.isle line 4280.
                    return v2921;
                }
                &Opcode::Trunc => {
                    let v2913 = &C::put_in_reg_mem(ctx, v559);
                    let v884 = C::value_type(ctx, v559);
                    let v2927 = constructor_x64_round(ctx, v884, v2913, &RoundImm::RoundZero);
                    let v2928 = constructor_output_xmm(ctx, v2927);
                    let v2929 = Some(v2928);
                    // Rule at src/isa/x64/lower.isle line 4290.
                    return v2929;
                }
                &Opcode::Nearest => {
                    let v2913 = &C::put_in_reg_mem(ctx, v559);
                    let v884 = C::value_type(ctx, v559);
                    let v2923 = constructor_x64_round(ctx, v884, v2913, &RoundImm::RoundNearest);
                    let v2924 = constructor_output_xmm(ctx, v2923);
                    let v2925 = Some(v2924);
                    // Rule at src/isa/x64/lower.isle line 4285.
                    return v2925;
                }
                &Opcode::ScalarToVector => {
                    let v3235 = &C::sinkable_load(ctx, v559);
                    if let Some(v3236) = v3235 {
                        let v884 = C::value_type(ctx, v559);
                        let v3243 = C::ty_64(ctx, v884);
                        if let Some(v3244) = v3243 {
                            let v3239 = &C::sink_load(ctx, v3236);
                            let v3245 = constructor_x64_movsd_load(ctx, v3239);
                            let v3246 = constructor_output_xmm(ctx, v3245);
                            let v3247 = Some(v3246);
                            // Rule at src/isa/x64/lower.isle line 4726.
                            return v3247;
                        }
                        let v3237 = C::ty_32(ctx, v884);
                        if let Some(v3238) = v3237 {
                            let v3239 = &C::sink_load(ctx, v3236);
                            let v3240 = constructor_x64_movss_load(ctx, v3239);
                            let v3241 = constructor_output_xmm(ctx, v3240);
                            let v3242 = Some(v3241);
                            // Rule at src/isa/x64/lower.isle line 4724.
                            return v3242;
                        }
                    }
                    let v884 = C::value_type(ctx, v559);
                    let v2596 = C::ty_scalar_float(ctx, v884);
                    if let Some(v2597) = v2596 {
                        let v1748 = constructor_output_value(ctx, v559);
                        let v1749 = Some(v1748);
                        // Rule at src/isa/x64/lower.isle line 4714.
                        return v1749;
                    }
                    let v560 = constructor_put_in_gpr(ctx, v559);
                    let v3231 = C::ty_bits(ctx, v884);
                    let v3232 = constructor_bitcast_gpr_to_xmm(ctx, v3231, v560);
                    let v3233 = constructor_output_xmm(ctx, v3232);
                    let v3234 = Some(v3233);
                    // Rule at src/isa/x64/lower.isle line 4719.
                    return v3234;
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v564 = C::put_in_regs(ctx, v559);
                        let v3 = C::value_type(ctx, v2);
                        let v884 = C::value_type(ctx, v559);
                        let v885 = constructor_lower_bmask(ctx, v3, v884, v564);
                        let v886 = C::output(ctx, v885);
                        let v887 = Some(v886);
                        // Rule at src/isa/x64/lower.isle line 1447.
                        return v887;
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v4 = C::fits_in_64(ctx, v3);
                        if let Some(v5) = v4 {
                            let v564 = C::put_in_regs(ctx, v559);
                            let v565 = constructor_value_regs_get_gpr(ctx, v564, 0x0_usize);
                            let v1750 = constructor_output_gpr(ctx, v565);
                            let v1751 = Some(v1750);
                            // Rule at src/isa/x64/lower.isle line 2585.
                            return v1751;
                        }
                        let v884 = C::value_type(ctx, v559);
                        if v3 == v884 {
                            let v1748 = constructor_output_value(ctx, v559);
                            let v1749 = Some(v1748);
                            // Rule at src/isa/x64/lower.isle line 2579.
                            return v1749;
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I8X16 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2766 = constructor_x64_pmovsxbw(ctx, v751);
                                        let v2767 = constructor_output_xmm(ctx, v2766);
                                        let v2768 = Some(v2767);
                                        // Rule at src/isa/x64/lower.isle line 3994.
                                        return v2768;
                                    }
                                }
                            }
                            I32X4 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I16X8 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2769 = constructor_x64_pmovsxwd(ctx, v751);
                                        let v2770 = constructor_output_xmm(ctx, v2769);
                                        let v2771 = Some(v2770);
                                        // Rule at src/isa/x64/lower.isle line 3997.
                                        return v2771;
                                    }
                                }
                            }
                            I64X2 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I32X4 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2772 = constructor_x64_pmovsxdq(ctx, v751);
                                        let v2773 = constructor_output_xmm(ctx, v2772);
                                        let v2774 = Some(v2773);
                                        // Rule at src/isa/x64/lower.isle line 4000.
                                        return v2774;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v755 = constructor_put_in_xmm(ctx, v559);
                        let v2775 = constructor_lower_swiden_low(ctx, v3, v755);
                        let v2776 = constructor_output_xmm(ctx, v2775);
                        let v2777 = Some(v2776);
                        // Rule at src/isa/x64/lower.isle line 4004.
                        return v2777;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I8X16 {
                                    let v656 = C::use_sse41(ctx);
                                    if v656 == true {
                                        let v750 = C::use_ssse3(ctx);
                                        if v750 == true {
                                            let v755 = constructor_put_in_xmm(ctx, v559);
                                            let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                            let v2778 = constructor_x64_palignr(ctx, v755, v1853, 0x8_u8);
                                            let v2779 = &C::xmm_to_xmm_mem(ctx, v2778);
                                            let v2780 = constructor_x64_pmovsxbw(ctx, v2779);
                                            let v2781 = constructor_output_xmm(ctx, v2780);
                                            let v2782 = Some(v2781);
                                            // Rule at src/isa/x64/lower.isle line 4027.
                                            return v2782;
                                        }
                                    }
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                    let v2791 = constructor_x64_punpckhbw(ctx, v755, v1853);
                                    let v2792 = &C::xmi_imm(ctx, 0x8_u32);
                                    let v2793 = constructor_x64_psraw(ctx, v2791, v2792);
                                    let v2794 = constructor_output_xmm(ctx, v2793);
                                    let v2795 = Some(v2794);
                                    // Rule at src/isa/x64/lower.isle line 4043.
                                    return v2795;
                                }
                            }
                            I32X4 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I16X8 {
                                    let v656 = C::use_sse41(ctx);
                                    if v656 == true {
                                        let v750 = C::use_ssse3(ctx);
                                        if v750 == true {
                                            let v755 = constructor_put_in_xmm(ctx, v559);
                                            let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                            let v2778 = constructor_x64_palignr(ctx, v755, v1853, 0x8_u8);
                                            let v2779 = &C::xmm_to_xmm_mem(ctx, v2778);
                                            let v2783 = constructor_x64_pmovsxwd(ctx, v2779);
                                            let v2784 = constructor_output_xmm(ctx, v2783);
                                            let v2785 = Some(v2784);
                                            // Rule at src/isa/x64/lower.isle line 4032.
                                            return v2785;
                                        }
                                    }
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                    let v2796 = constructor_x64_punpckhwd(ctx, v755, v1853);
                                    let v2580 = &C::xmi_imm(ctx, 0x10_u32);
                                    let v2797 = constructor_x64_psrad(ctx, v2796, v2580);
                                    let v2798 = constructor_output_xmm(ctx, v2797);
                                    let v2799 = Some(v2798);
                                    // Rule at src/isa/x64/lower.isle line 4046.
                                    return v2799;
                                }
                            }
                            I64X2 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I32X4 {
                                    let v656 = C::use_sse41(ctx);
                                    if v656 == true {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2786 = constructor_x64_pshufd(ctx, v751, 0xee_u8);
                                        let v2787 = &C::xmm_to_xmm_mem(ctx, v2786);
                                        let v2788 = constructor_x64_pmovsxdq(ctx, v2787);
                                        let v2789 = constructor_output_xmm(ctx, v2788);
                                        let v2790 = Some(v2789);
                                        // Rule at src/isa/x64/lower.isle line 4037.
                                        return v2790;
                                    }
                                    let v751 = &C::put_in_xmm_mem(ctx, v559);
                                    let v2801 = constructor_x64_pshufd(ctx, v751, 0xe_u8);
                                    let v2802 = constructor_xmm_zero(ctx, I32X4);
                                    let v2803 = &C::xmm_to_xmm_mem(ctx, v2801);
                                    let v2804 = constructor_x64_pcmpgtd(ctx, v2802, v2803);
                                    let v2805 = &C::xmm_to_xmm_mem(ctx, v2804);
                                    let v2806 = constructor_x64_punpckldq(ctx, v2801, v2805);
                                    let v2807 = constructor_output_xmm(ctx, v2806);
                                    let v2808 = Some(v2807);
                                    // Rule at src/isa/x64/lower.isle line 4051.
                                    return v2808;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I8X16 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2809 = constructor_x64_pmovzxbw(ctx, v751);
                                        let v2810 = constructor_output_xmm(ctx, v2809);
                                        let v2811 = Some(v2810);
                                        // Rule at src/isa/x64/lower.isle line 4059.
                                        return v2811;
                                    }
                                }
                            }
                            I32X4 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I16X8 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2812 = constructor_x64_pmovzxwd(ctx, v751);
                                        let v2813 = constructor_output_xmm(ctx, v2812);
                                        let v2814 = Some(v2813);
                                        // Rule at src/isa/x64/lower.isle line 4062.
                                        return v2814;
                                    }
                                }
                            }
                            I64X2 => {
                                let v656 = C::use_sse41(ctx);
                                if v656 == true {
                                    let v884 = C::value_type(ctx, v559);
                                    if v884 == I32X4 {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2815 = constructor_x64_pmovzxdq(ctx, v751);
                                        let v2816 = constructor_output_xmm(ctx, v2815);
                                        let v2817 = Some(v2816);
                                        // Rule at src/isa/x64/lower.isle line 4065.
                                        return v2817;
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v755 = constructor_put_in_xmm(ctx, v559);
                        let v2818 = constructor_lower_uwiden_low(ctx, v3, v755);
                        let v2819 = constructor_output_xmm(ctx, v2818);
                        let v2820 = Some(v2819);
                        // Rule at src/isa/x64/lower.isle line 4069.
                        return v2820;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I8X16 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v756 = constructor_xmm_zero(ctx, I8X16);
                                    let v2821 = &C::xmm_to_xmm_mem(ctx, v756);
                                    let v2822 = constructor_x64_punpckhbw(ctx, v755, v2821);
                                    let v2823 = constructor_output_xmm(ctx, v2822);
                                    let v2824 = Some(v2823);
                                    // Rule at src/isa/x64/lower.isle line 4084.
                                    return v2824;
                                }
                            }
                            I32X4 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I16X8 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v756 = constructor_xmm_zero(ctx, I8X16);
                                    let v2821 = &C::xmm_to_xmm_mem(ctx, v756);
                                    let v2825 = constructor_x64_punpckhwd(ctx, v755, v2821);
                                    let v2826 = constructor_output_xmm(ctx, v2825);
                                    let v2827 = Some(v2826);
                                    // Rule at src/isa/x64/lower.isle line 4086.
                                    return v2827;
                                }
                            }
                            I64X2 => {
                                let v884 = C::value_type(ctx, v559);
                                if v884 == I32X4 {
                                    let v755 = constructor_put_in_xmm(ctx, v559);
                                    let v2625 = constructor_xmm_zero(ctx, F32X4);
                                    let v2626 = &C::xmm_to_xmm_mem(ctx, v2625);
                                    let v2828 = constructor_x64_unpckhps(ctx, v755, v2626);
                                    let v2829 = constructor_output_xmm(ctx, v2828);
                                    let v2830 = Some(v2829);
                                    // Rule at src/isa/x64/lower.isle line 4088.
                                    return v2830;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1549 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Zero);
                                let v1730 = constructor_output_gpr(ctx, v1549);
                                let v1731 = Some(v1730);
                                // Rule at src/isa/x64/lower.isle line 2548.
                                return v1731;
                            }
                            I128 => {
                                let v1549 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Zero);
                                let v1725 = C::gpr_to_reg(ctx, v1549);
                                let v1726 = constructor_imm(ctx, I64, 0x0_u64);
                                let v1727 = C::value_regs(ctx, v1725, v1726);
                                let v1728 = C::output(ctx, v1727);
                                let v1729 = Some(v1728);
                                // Rule at src/isa/x64/lower.isle line 2544.
                                return v1729;
                            }
                            _ => {}
                        }
                        let v1732 = C::fits_in_32(ctx, v3);
                        if let Some(v1733) = v1732 {
                            let v1582 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Zero);
                            let v1734 = constructor_output_gpr(ctx, v1582);
                            let v1735 = Some(v1734);
                            // Rule at src/isa/x64/lower.isle line 2553.
                            return v1735;
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v1736 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Sign);
                                let v1743 = constructor_output_gpr(ctx, v1736);
                                let v1744 = Some(v1743);
                                // Rule at src/isa/x64/lower.isle line 2568.
                                return v1744;
                            }
                            I128 => {
                                let v1736 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Sign);
                                let v1279 = Imm8Reg::Imm8 {
                                    imm: 0x3f_u8,
                                };
                                let v1280 = &C::imm8_reg_to_imm8_gpr(ctx, &v1279);
                                let v1737 = constructor_x64_sar(ctx, I64, v1736, v1280);
                                let v1738 = C::gpr_to_reg(ctx, v1736);
                                let v1739 = C::gpr_to_reg(ctx, v1737);
                                let v1740 = C::value_regs(ctx, v1738, v1739);
                                let v1741 = C::output(ctx, v1740);
                                let v1742 = Some(v1741);
                                // Rule at src/isa/x64/lower.isle line 2562.
                                return v1742;
                            }
                            _ => {}
                        }
                        let v1732 = C::fits_in_32(ctx, v3);
                        if let Some(v1733) = v1732 {
                            let v1745 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Sign);
                            let v1746 = constructor_output_gpr(ctx, v1745);
                            let v1747 = Some(v1746);
                            // Rule at src/isa/x64/lower.isle line 2573.
                            return v1747;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v1840 = constructor_xmm_zero(ctx, F64X2);
                            let v1835 = &C::put_in_xmm_mem(ctx, v559);
                            let v1850 = constructor_x64_cvtss2sd(ctx, v1840, v1835);
                            let v1851 = constructor_output_xmm(ctx, v1850);
                            let v1852 = Some(v1851);
                            // Rule at src/isa/x64/lower.isle line 2676.
                            return v1852;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v1834 = constructor_xmm_zero(ctx, F32X4);
                            let v1835 = &C::put_in_xmm_mem(ctx, v559);
                            let v1857 = constructor_x64_cvtsd2ss(ctx, v1834, v1835);
                            let v1858 = constructor_output_xmm(ctx, v1857);
                            let v1859 = Some(v1858);
                            // Rule at src/isa/x64/lower.isle line 2684.
                            return v1859;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v751 = &C::put_in_xmm_mem(ctx, v559);
                            let v1860 = constructor_x64_cvtpd2ps(ctx, v751);
                            let v1861 = constructor_output_xmm(ctx, v1860);
                            let v1862 = Some(v1861);
                            // Rule at src/isa/x64/lower.isle line 2688.
                            return v1862;
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v755 = constructor_put_in_xmm(ctx, v559);
                            let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                            let v1854 = constructor_x64_cvtps2pd(ctx, v1853);
                            let v1855 = constructor_output_xmm(ctx, v1854);
                            let v1856 = Some(v1855);
                            // Rule at src/isa/x64/lower.isle line 2680.
                            return v1856;
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v884 = C::value_type(ctx, v559);
                        let v2596 = C::ty_scalar_float(ctx, v884);
                        if let Some(v2597) = v2596 {
                            let v3 = C::value_type(ctx, v2);
                            let v172 = false;
                            let v2598 = constructor_cvt_float_to_uint_seq(ctx, v3, v559, v172);
                            let v2599 = constructor_output_gpr(ctx, v2598);
                            let v2600 = Some(v2599);
                            // Rule at src/isa/x64/lower.isle line 3746.
                            return v2600;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v884 = C::value_type(ctx, v559);
                        let v2596 = C::ty_scalar_float(ctx, v884);
                        if let Some(v2597) = v2596 {
                            let v3 = C::value_type(ctx, v2);
                            let v172 = false;
                            let v2604 = constructor_cvt_float_to_sint_seq(ctx, v3, v559, v172);
                            let v2605 = constructor_output_gpr(ctx, v2604);
                            let v2606 = Some(v2605);
                            // Rule at src/isa/x64/lower.isle line 3752.
                            return v2606;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v884 = C::value_type(ctx, v559);
                            if v884 == F32X4 {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v2625 = constructor_xmm_zero(ctx, F32X4);
                                let v2626 = &C::xmm_to_xmm_mem(ctx, v2625);
                                let v2627 = constructor_x64_maxps(ctx, v755, v2626);
                                let v2628 = &C::xmm_to_xmm_mem(ctx, v2625);
                                let v2629 = constructor_x64_pcmpeqd(ctx, v2625, v2628);
                                let v2630 = &C::xmi_imm(ctx, 0x1_u32);
                                let v2631 = constructor_x64_psrld(ctx, v2629, v2630);
                                let v2632 = &C::xmm_to_xmm_mem(ctx, v2631);
                                let v2633 = constructor_x64_cvtdq2ps(ctx, v2632);
                                let v2634 = &C::xmm_to_xmm_mem(ctx, v2627);
                                let v2635 = constructor_x64_cvttps2dq(ctx, v2634);
                                let v2636 = &C::xmm_to_xmm_mem(ctx, v2633);
                                let v2637 = constructor_x64_subps(ctx, v2627, v2636);
                                let v2638 = &C::xmm_to_xmm_mem(ctx, v2637);
                                let v2639 = constructor_x64_cmpps(ctx, v2633, v2638, &FcmpImm::LessThanOrEqual);
                                let v2640 = &C::xmm_to_xmm_mem(ctx, v2637);
                                let v2641 = constructor_x64_cvttps2dq(ctx, v2640);
                                let v2642 = &C::xmm_to_xmm_mem(ctx, v2639);
                                let v2643 = constructor_x64_pxor(ctx, v2641, v2642);
                                let v2644 = constructor_xmm_zero(ctx, I32X4);
                                let v2645 = constructor_lower_vec_smax(ctx, I32X4, v2643, v2644);
                                let v2646 = &C::xmm_to_xmm_mem(ctx, v2635);
                                let v2647 = constructor_x64_paddd(ctx, v2645, v2646);
                                let v2648 = constructor_output_xmm(ctx, v2647);
                                let v2649 = Some(v2648);
                                // Rule at src/isa/x64/lower.isle line 3830.
                                return v2649;
                            }
                        }
                        let v884 = C::value_type(ctx, v559);
                        let v2596 = C::ty_scalar_float(ctx, v884);
                        if let Some(v2597) = v2596 {
                            let v182 = true;
                            let v2601 = constructor_cvt_float_to_uint_seq(ctx, v3, v559, v182);
                            let v2602 = constructor_output_gpr(ctx, v2601);
                            let v2603 = Some(v2602);
                            // Rule at src/isa/x64/lower.isle line 3749.
                            return v2603;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v884 = C::value_type(ctx, v559);
                            if v884 == F32X4 {
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v1853 = &C::xmm_to_xmm_mem(ctx, v755);
                                let v2610 = constructor_x64_cmpps(ctx, v755, v1853, &FcmpImm::Equal);
                                let v2611 = &C::xmm_to_xmm_mem(ctx, v2610);
                                let v2612 = constructor_x64_andps(ctx, v755, v2611);
                                let v2613 = &C::xmm_to_xmm_mem(ctx, v2612);
                                let v2614 = constructor_x64_pxor(ctx, v2610, v2613);
                                let v2615 = &C::xmm_to_xmm_mem(ctx, v2612);
                                let v2616 = constructor_x64_cvttps2dq(ctx, v2615);
                                let v2617 = &C::xmm_to_xmm_mem(ctx, v2614);
                                let v2618 = constructor_x64_pand(ctx, v2616, v2617);
                                let v2619 = &C::xmi_imm(ctx, 0x1f_u32);
                                let v2620 = constructor_x64_psrad(ctx, v2618, v2619);
                                let v2621 = &C::xmm_to_xmm_mem(ctx, v2616);
                                let v2622 = constructor_x64_pxor(ctx, v2620, v2621);
                                let v2623 = constructor_output_xmm(ctx, v2622);
                                let v2624 = Some(v2623);
                                // Rule at src/isa/x64/lower.isle line 3759.
                                return v2624;
                            }
                        }
                        let v884 = C::value_type(ctx, v559);
                        let v2596 = C::ty_scalar_float(ctx, v884);
                        if let Some(v2597) = v2596 {
                            let v182 = true;
                            let v2607 = constructor_cvt_float_to_sint_seq(ctx, v3, v559, v182);
                            let v2608 = constructor_output_gpr(ctx, v2607);
                            let v2609 = Some(v2608);
                            // Rule at src/isa/x64/lower.isle line 3755.
                            return v2609;
                        }
                    }
                }
                &Opcode::X86Cvtt2dq => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v884 = C::value_type(ctx, v559);
                            if v884 == F32X4 {
                                let v751 = &C::put_in_xmm_mem(ctx, v559);
                                let v2650 = constructor_x64_cvttps2dq(ctx, v751);
                                let v2651 = constructor_output_xmm(ctx, v2650);
                                let v2652 = Some(v2651);
                                // Rule at src/isa/x64/lower.isle line 3877.
                                return v2652;
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v884 = C::value_type(ctx, v559);
                                let v2526 = C::fits_in_32(ctx, v884);
                                if let Some(v2527) = v2526 {
                                    let v2528 = C::ty_int(ctx, v2527);
                                    if let Some(v2529) = v2528 {
                                        let v1834 = constructor_xmm_zero(ctx, F32X4);
                                        let v2530 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Zero);
                                        let v2531 = &C::gpr_to_gpr_mem(ctx, v2530);
                                        let v2532 = constructor_x64_cvtsi2ss(ctx, I64, v1834, v2531);
                                        let v2533 = constructor_output_xmm(ctx, v2532);
                                        let v2534 = Some(v2533);
                                        // Rule at src/isa/x64/lower.isle line 3634.
                                        return v2534;
                                    }
                                }
                            }
                            F64 => {
                                let v884 = C::value_type(ctx, v559);
                                let v2526 = C::fits_in_32(ctx, v884);
                                if let Some(v2527) = v2526 {
                                    let v2528 = C::ty_int(ctx, v2527);
                                    if let Some(v2529) = v2528 {
                                        let v1840 = constructor_xmm_zero(ctx, F64X2);
                                        let v2530 = constructor_extend_to_gpr(ctx, v559, I64, &ExtendKind::Zero);
                                        let v2531 = &C::gpr_to_gpr_mem(ctx, v2530);
                                        let v2535 = constructor_x64_cvtsi2sd(ctx, I64, v1840, v2531);
                                        let v2536 = constructor_output_xmm(ctx, v2535);
                                        let v2537 = Some(v2536);
                                        // Rule at src/isa/x64/lower.isle line 3637.
                                        return v2537;
                                    }
                                }
                            }
                            F32X4 => {
                                let v502 = C::use_avx512vl(ctx);
                                if v502 == true {
                                    let v503 = C::use_avx512f(ctx);
                                    if v503 == true {
                                        let v751 = &C::put_in_xmm_mem(ctx, v559);
                                        let v2574 = constructor_x64_vcvtudq2ps(ctx, v751);
                                        let v2575 = constructor_output_xmm(ctx, v2574);
                                        let v2576 = Some(v2575);
                                        // Rule at src/isa/x64/lower.isle line 3694.
                                        return v2576;
                                    }
                                }
                                let v755 = constructor_put_in_xmm(ctx, v559);
                                let v2578 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2579 = constructor_x64_pslld(ctx, v755, v2578);
                                let v2580 = &C::xmi_imm(ctx, 0x10_u32);
                                let v2581 = constructor_x64_psrld(ctx, v2579, v2580);
                                let v2582 = &C::xmm_to_xmm_mem(ctx, v2581);
                                let v2583 = constructor_x64_psubd(ctx, v755, v2582);
                                let v2584 = &C::xmm_to_xmm_mem(ctx, v2581);
                                let v2585 = constructor_x64_cvtdq2ps(ctx, v2584);
                                let v2586 = &C::xmi_imm(ctx, 0x1_u32);
                                let v2587 = constructor_x64_psrld(ctx, v2583, v2586);
                                let v2588 = &C::xmm_to_xmm_mem(ctx, v2587);
                                let v2589 = constructor_x64_cvtdq2ps(ctx, v2588);
                                let v2590 = &C::xmm_to_xmm_mem(ctx, v2589);
                                let v2591 = constructor_x64_addps(ctx, v2589, v2590);
                                let v2592 = &C::xmm_to_xmm_mem(ctx, v2585);
                                let v2593 = constructor_x64_addps(ctx, v2591, v2592);
                                let v2594 = constructor_output_xmm(ctx, v2593);
                                let v2595 = Some(v2594);
                                // Rule at src/isa/x64/lower.isle line 3722.
                                return v2595;
                            }
                            F64X2 => {
                                let v2516 = C::def_inst(ctx, v559);
                                if let Some(v2517) = v2516 {
                                    let v2518 = &C::inst_data(ctx, v2517);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2519,
                                        arg: v2520,
                                    } = v2518 {
                                        if let &Opcode::UwidenLow = v2519 {
                                            let v2521 = C::value_type(ctx, v2520);
                                            if v2521 == I32X4 {
                                                let v2565 = C::emit_u128_le_const(ctx, 0x4330000043300000_u128);
                                                let v2566 = &constructor_const_to_xmm_mem(ctx, v2565);
                                                let v2567 = constructor_put_in_xmm(ctx, v2520);
                                                let v2568 = constructor_x64_unpcklps(ctx, v2567, v2566);
                                                let v2569 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                                let v2570 = &constructor_const_to_xmm_mem(ctx, v2569);
                                                let v2571 = constructor_x64_subpd(ctx, v2568, v2570);
                                                let v2572 = constructor_output_xmm(ctx, v2571);
                                                let v2573 = Some(v2572);
                                                // Rule at src/isa/x64/lower.isle line 3686.
                                                return v2573;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v884 = C::value_type(ctx, v559);
                        match v884 {
                            I64 => {
                                let v560 = constructor_put_in_gpr(ctx, v559);
                                let v2538 = constructor_cvt_u64_to_float_seq(ctx, v3, v560);
                                let v2539 = constructor_output_xmm(ctx, v2538);
                                let v2540 = Some(v2539);
                                // Rule at src/isa/x64/lower.isle line 3640.
                                return v2540;
                            }
                            I64X2 => {
                                if v3 == F64X2 {
                                    let v2542 = C::emit_u128_le_const(ctx, 0xffffffff00000000ffffffff_u128);
                                    let v2543 = &constructor_const_to_xmm_mem(ctx, v2542);
                                    let v2545 = C::emit_u128_le_const(ctx, 0x43300000000000004330000000000000_u128);
                                    let v2546 = &constructor_const_to_xmm_mem(ctx, v2545);
                                    let v2548 = C::emit_u128_le_const(ctx, 0x45300000000000004530000000000000_u128);
                                    let v2549 = &constructor_const_to_xmm_mem(ctx, v2548);
                                    let v2551 = C::emit_u128_le_const(ctx, 0x45300000001000004530000000100000_u128);
                                    let v2552 = &constructor_const_to_xmm_mem(ctx, v2551);
                                    let v2553 = constructor_put_in_xmm(ctx, v559);
                                    let v2554 = constructor_x64_pand(ctx, v2553, v2543);
                                    let v2555 = constructor_x64_por(ctx, v2554, v2546);
                                    let v2556 = constructor_put_in_xmm(ctx, v559);
                                    let v692 = &C::xmi_imm(ctx, 0x20_u32);
                                    let v2557 = constructor_x64_psrlq(ctx, v2556, v692);
                                    let v2558 = constructor_x64_por(ctx, v2557, v2549);
                                    let v2559 = constructor_x64_subpd(ctx, v2558, v2552);
                                    let v2560 = &C::xmm_to_xmm_mem(ctx, v2559);
                                    let v2561 = constructor_x64_addpd(ctx, v2555, v2560);
                                    let v2562 = constructor_output_xmm(ctx, v2561);
                                    let v2563 = Some(v2562);
                                    // Rule at src/isa/x64/lower.isle line 3671.
                                    return v2563;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v884 = C::value_type(ctx, v559);
                                match v884 {
                                    I8 => {
                                        let v1834 = constructor_xmm_zero(ctx, F32X4);
                                        let v2482 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Sign);
                                        let v2483 = &C::gpr_to_gpr_mem(ctx, v2482);
                                        let v2484 = constructor_x64_cvtsi2ss(ctx, I32, v1834, v2483);
                                        let v2485 = constructor_output_xmm(ctx, v2484);
                                        let v2486 = Some(v2485);
                                        // Rule at src/isa/x64/lower.isle line 3596.
                                        return v2486;
                                    }
                                    I16 => {
                                        let v1834 = constructor_xmm_zero(ctx, F32X4);
                                        let v2482 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Sign);
                                        let v2483 = &C::gpr_to_gpr_mem(ctx, v2482);
                                        let v2484 = constructor_x64_cvtsi2ss(ctx, I32, v1834, v2483);
                                        let v2485 = constructor_output_xmm(ctx, v2484);
                                        let v2486 = Some(v2485);
                                        // Rule at src/isa/x64/lower.isle line 3599.
                                        return v2486;
                                    }
                                    _ => {}
                                }
                                let v2487 = C::ty_int(ctx, v884);
                                if let Some(v2488) = v2487 {
                                    let v2489 = C::fits_in_64(ctx, v2488);
                                    if let Some(v2490) = v2489 {
                                        let v1834 = constructor_xmm_zero(ctx, F32X4);
                                        let v2491 = &constructor_put_in_gpr_mem(ctx, v559);
                                        let v2492 = constructor_x64_cvtsi2ss(ctx, v2490, v1834, v2491);
                                        let v2493 = constructor_output_xmm(ctx, v2492);
                                        let v2494 = Some(v2493);
                                        // Rule at src/isa/x64/lower.isle line 3602.
                                        return v2494;
                                    }
                                }
                            }
                            F64 => {
                                let v884 = C::value_type(ctx, v559);
                                match v884 {
                                    I8 => {
                                        let v1840 = constructor_xmm_zero(ctx, F64X2);
                                        let v2482 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Sign);
                                        let v2483 = &C::gpr_to_gpr_mem(ctx, v2482);
                                        let v2495 = constructor_x64_cvtsi2sd(ctx, I32, v1840, v2483);
                                        let v2496 = constructor_output_xmm(ctx, v2495);
                                        let v2497 = Some(v2496);
                                        // Rule at src/isa/x64/lower.isle line 3605.
                                        return v2497;
                                    }
                                    I16 => {
                                        let v1840 = constructor_xmm_zero(ctx, F64X2);
                                        let v2482 = constructor_extend_to_gpr(ctx, v559, I32, &ExtendKind::Sign);
                                        let v2483 = &C::gpr_to_gpr_mem(ctx, v2482);
                                        let v2495 = constructor_x64_cvtsi2sd(ctx, I32, v1840, v2483);
                                        let v2496 = constructor_output_xmm(ctx, v2495);
                                        let v2497 = Some(v2496);
                                        // Rule at src/isa/x64/lower.isle line 3608.
                                        return v2497;
                                    }
                                    _ => {}
                                }
                                let v2487 = C::ty_int(ctx, v884);
                                if let Some(v2488) = v2487 {
                                    let v2489 = C::fits_in_64(ctx, v2488);
                                    if let Some(v2490) = v2489 {
                                        let v1840 = constructor_xmm_zero(ctx, F64X2);
                                        let v2491 = &constructor_put_in_gpr_mem(ctx, v559);
                                        let v2498 = constructor_x64_cvtsi2sd(ctx, v2490, v1840, v2491);
                                        let v2499 = constructor_output_xmm(ctx, v2498);
                                        let v2500 = Some(v2499);
                                        // Rule at src/isa/x64/lower.isle line 3611.
                                        return v2500;
                                    }
                                }
                            }
                            F64X2 => {
                                let v2516 = C::def_inst(ctx, v559);
                                if let Some(v2517) = v2516 {
                                    let v2518 = &C::inst_data(ctx, v2517);
                                    if let &InstructionData::Unary {
                                        opcode: ref v2519,
                                        arg: v2520,
                                    } = v2518 {
                                        if let &Opcode::SwidenLow = v2519 {
                                            let v2521 = C::value_type(ctx, v2520);
                                            if v2521 == I32X4 {
                                                let v2522 = &C::put_in_xmm_mem(ctx, v2520);
                                                let v2523 = constructor_x64_cvtdq2pd(ctx, v2522);
                                                let v2524 = constructor_output_xmm(ctx, v2523);
                                                let v2525 = Some(v2524);
                                                // Rule at src/isa/x64/lower.isle line 3629.
                                                return v2525;
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v884 = C::value_type(ctx, v559);
                    match v884 {
                        I32X4 => {
                            let v751 = &C::put_in_xmm_mem(ctx, v559);
                            let v2501 = constructor_x64_cvtdq2ps(ctx, v751);
                            let v2502 = constructor_output_xmm(ctx, v2501);
                            let v2503 = Some(v2502);
                            // Rule at src/isa/x64/lower.isle line 3614.
                            return v2503;
                        }
                        I64X2 => {
                            let v755 = constructor_put_in_xmm(ctx, v559);
                            let v2504 = constructor_xmm_zero(ctx, F64X2);
                            let v2505 = constructor_x64_movq_to_gpr(ctx, v755);
                            let v2506 = &C::gpr_to_gpr_mem(ctx, v2505);
                            let v2507 = constructor_x64_cvtsi2sd(ctx, I64, v2504, v2506);
                            let v791 = &C::xmm_to_xmm_mem(ctx, v755);
                            let v2508 = constructor_x64_pshufd(ctx, v791, 0xee_u8);
                            let v2509 = constructor_x64_movq_to_gpr(ctx, v2508);
                            let v2510 = &C::gpr_to_gpr_mem(ctx, v2509);
                            let v2511 = constructor_x64_cvtsi2sd(ctx, I64, v2504, v2510);
                            let v2512 = &C::xmm_to_xmm_mem(ctx, v2511);
                            let v2513 = constructor_x64_unpcklpd(ctx, v2507, v2512);
                            let v2514 = constructor_output_xmm(ctx, v2513);
                            let v2515 = Some(v2514);
                            // Rule at src/isa/x64/lower.isle line 3620.
                            return v2515;
                        }
                        _ => {}
                    }
                }
                &Opcode::Isplit => {
                    let v884 = C::value_type(ctx, v559);
                    if v884 == I128 {
                        let v564 = C::put_in_regs(ctx, v559);
                        let v3370 = C::value_regs_get(ctx, v564, 0x0_usize);
                        let v3371 = C::value_regs_get(ctx, v564, 0x1_usize);
                        let v3372 = C::value_reg(ctx, v3370);
                        let v3373 = C::value_reg(ctx, v3371);
                        let v3374 = C::output_pair(ctx, v3372, v3373);
                        let v3375 = Some(v3374);
                        // Rule at src/isa/x64/lower.isle line 4906.
                        return v3375;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v43,
            constant_handle: v44,
        } => {
            match v43 {
                &Opcode::F128const => {
                    let v50 = C::u128_from_constant(ctx, v44);
                    if let Some(v51) = v50 {
                        if v51 == 0x0_u128 {
                            let v52 = constructor_xmm_zero(ctx, F128);
                            let v53 = constructor_output_xmm(ctx, v52);
                            let v54 = Some(v53);
                            // Rule at src/isa/x64/lower.isle line 46.
                            return v54;
                        }
                    }
                    let v46 = C::const_to_vconst(ctx, v44);
                    let v47 = constructor_x64_xmm_load_const(ctx, F128, v46);
                    let v48 = constructor_output_xmm(ctx, v47);
                    let v49 = Some(v48);
                    // Rule at src/isa/x64/lower.isle line 42.
                    return v49;
                }
                &Opcode::Vconst => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v50 = C::u128_from_constant(ctx, v44);
                        if let Some(v51) = v50 {
                            match v51 {
                                0xffffffffffffffffffffffffffffffff_u128 => {
                                    let v3037 = constructor_vector_all_ones(ctx);
                                    let v3038 = constructor_output_xmm(ctx, v3037);
                                    let v3039 = Some(v3038);
                                    // Rule at src/isa/x64/lower.isle line 4470.
                                    return v3039;
                                }
                                0x0_u128 => {
                                    let v3 = C::value_type(ctx, v2);
                                    let v3034 = constructor_xmm_zero(ctx, v3);
                                    let v3035 = constructor_output_xmm(ctx, v3034);
                                    let v3036 = Some(v3035);
                                    // Rule at src/isa/x64/lower.isle line 4469.
                                    return v3036;
                                }
                                _ => {}
                            }
                        }
                        let v46 = C::const_to_vconst(ctx, v44);
                        let v3 = C::value_type(ctx, v2);
                        let v3031 = constructor_x64_xmm_load_const(ctx, v3, v46);
                        let v3032 = constructor_output_xmm(ctx, v3031);
                        let v3033 = Some(v3032);
                        // Rule at src/isa/x64/lower.isle line 4464.
                        return v3033;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v2301,
            global_value: v2302,
        } => {
            match v2301 {
                &Opcode::SymbolValue => {
                    let v2303 = C::symbol_value_data(ctx, v2302);
                    if let Some(v2304) = v2303 {
                        let v2308 = constructor_load_ext_name(ctx, v2304.0, v2304.2, v2304.1);
                        let v2309 = constructor_output_reg(ctx, v2308);
                        let v2310 = Some(v2309);
                        // Rule at src/isa/x64/lower.isle line 3364.
                        return v2310;
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v2303 = C::symbol_value_data(ctx, v2302);
                        if let Some(v2304) = v2303 {
                            let v3 = C::value_type(ctx, v2);
                            let v3376 = &C::tls_model(ctx, v3);
                            match v3376 {
                                &TlsModel::ElfGd => {
                                    let v3377 = constructor_elf_tls_get_addr(ctx, v2304.0);
                                    let v3378 = constructor_output_gpr(ctx, v3377);
                                    let v3379 = Some(v3378);
                                    // Rule at src/isa/x64/lower.isle line 4914.
                                    return v3379;
                                }
                                &TlsModel::Macho => {
                                    let v3380 = constructor_macho_tls_get_addr(ctx, v2304.0);
                                    let v3381 = constructor_output_gpr(ctx, v3380);
                                    let v3382 = Some(v3381);
                                    // Rule at src/isa/x64/lower.isle line 4917.
                                    return v3382;
                                }
                                &TlsModel::Coff => {
                                    let v3383 = constructor_coff_tls_get_addr(ctx, v2304.0);
                                    let v3384 = constructor_output_gpr(ctx, v3383);
                                    let v3385 = Some(v3384);
                                    // Rule at src/isa/x64/lower.isle line 4920.
                                    return v3385;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee16 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F16const = v20 {
                let v22 = C::u16_from_ieee16(ctx, v21);
                let v24 = C::u16_as_u64(ctx, v22);
                let v25 = constructor_imm(ctx, F16, v24);
                let v26 = constructor_output_reg(ctx, v25);
                let v27 = Some(v26);
                // Rule at src/isa/x64/lower.isle line 28.
                return v27;
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v28,
            imm: v29,
        } => {
            if let &Opcode::F32const = v28 {
                let v30 = C::u32_from_ieee32(ctx, v29);
                let v32 = C::u32_as_u64(ctx, v30);
                let v33 = constructor_imm(ctx, F32, v32);
                let v34 = constructor_output_reg(ctx, v33);
                let v35 = Some(v34);
                // Rule at src/isa/x64/lower.isle line 33.
                return v35;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v36,
            imm: v37,
        } => {
            if let &Opcode::F64const = v36 {
                let v38 = C::u64_from_ieee64(ctx, v37);
                let v40 = constructor_imm(ctx, F64, v38);
                let v41 = constructor_output_reg(ctx, v40);
                let v42 = Some(v41);
                // Rule at src/isa/x64/lower.isle line 38.
                return v42;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } => {
            if let &Opcode::Iconst = v7 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    if v3 == I128 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v14 = constructor_imm(ctx, I64, v9);
                        let v16 = constructor_imm(ctx, I64, 0x0_u64);
                        let v17 = C::value_regs(ctx, v14, v16);
                        let v18 = C::output(ctx, v17);
                        let v19 = Some(v18);
                        // Rule at src/isa/x64/lower.isle line 21.
                        return v19;
                    }
                    let v4 = C::fits_in_64(ctx, v3);
                    if let Some(v5) = v4 {
                        let v9 = C::u64_from_imm64(ctx, v8);
                        let v10 = constructor_imm(ctx, v5, v9);
                        let v11 = constructor_output_reg(ctx, v10);
                        let v12 = Some(v11);
                        // Rule at src/isa/x64/lower.isle line 16.
                        return v12;
                    }
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v70,
            arg: v71,
            table: v72,
        } => {
            if let &Opcode::BrTable = v70 {
                let v74 = C::jump_table_targets(ctx, arg1);
                if let Some(v75) = v74 {
                    let v73 = C::value_type(ctx, v71);
                    let v78 = &C::raw_operand_size_of_type(ctx, v73);
                    let v79 = C::jump_table_size(ctx, &v75.1);
                    let v80 = C::u32_as_u64(ctx, v79);
                    let v81 = constructor_imm(ctx, v73, v80);
                    let v84 = constructor_extend_to_gpr(ctx, v71, I64, &ExtendKind::Zero);
                    let v85 = &constructor_reg_to_gpr_mem_imm(ctx, v81);
                    let v86 = &constructor_x64_cmp(ctx, v78, v84, v85);
                    let v88 = &C::gpr_to_gpr_mem(ctx, v84);
                    let v89 = C::gpr_new(ctx, v81);
                    let v90 = &constructor_cmove(ctx, v73, &CC::B, v88, v89);
                    let v91 = constructor_with_flags_reg(ctx, v86, v90);
                    let v92 = C::gpr_new(ctx, v91);
                    let v93 = &constructor_jmp_table_seq(ctx, v73, v92, v75.0, &v75.1);
                    let v94 = constructor_emit_side_effect(ctx, v93);
                    let v95 = Some(v94);
                    // Rule at src/isa/x64/lower.isle line 3553.
                    return v95;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v10,
            arg: v11,
            blocks: ref v12,
        } => {
            if let &Opcode::Brif = v10 {
                let v27 = C::two_targets(ctx, arg1);
                if let Some(v28) = v27 {
                    let v13 = C::maybe_uextend(ctx, v11);
                    if let Some(v14) = v13 {
                        let v15 = C::def_inst(ctx, v14);
                        if let Some(v16) = v15 {
                            let v17 = &C::inst_data(ctx, v16);
                            match v17 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v35,
                                    args: ref v36,
                                    cond: ref v37,
                                } => {
                                    if let &Opcode::Fcmp = v35 {
                                        let v38 = C::unpack_value_array_2(ctx, v36);
                                        let v41 = &constructor_emit_fcmp(ctx, v37, v38.0, v38.1);
                                        let v42 = &constructor_jmp_cond_fcmp(ctx, v41, v28.0, v28.1);
                                        let v43 = constructor_emit_side_effect(ctx, v42);
                                        let v44 = Some(v43);
                                        // Rule at src/isa/x64/lower.isle line 3510.
                                        return v44;
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v18,
                                    args: ref v19,
                                    cond: ref v20,
                                } => {
                                    if let &Opcode::Icmp = v18 {
                                        let v21 = C::unpack_value_array_2(ctx, v19);
                                        let v31 = &constructor_emit_cmp(ctx, v20, v21.0, v21.1);
                                        let v32 = &constructor_jmp_cond_icmp(ctx, v31, v28.0, v28.1);
                                        let v33 = constructor_emit_side_effect(ctx, v32);
                                        let v34 = Some(v33);
                                        // Rule at src/isa/x64/lower.isle line 3507.
                                        return v34;
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::VanyTrue => {
                                            let v47 = &constructor_emit_vany_true(ctx, v46);
                                            let v48 = &constructor_jmp_cond_icmp(ctx, v47, v28.0, v28.1);
                                            let v49 = constructor_emit_side_effect(ctx, v48);
                                            let v50 = Some(v49);
                                            // Rule at src/isa/x64/lower.isle line 3513.
                                            return v50;
                                        }
                                        &Opcode::VallTrue => {
                                            let v51 = &constructor_emit_vall_true(ctx, v46);
                                            let v52 = &constructor_jmp_cond_icmp(ctx, v51, v28.0, v28.1);
                                            let v53 = constructor_emit_side_effect(ctx, v52);
                                            let v54 = Some(v53);
                                            // Rule at src/isa/x64/lower.isle line 3516.
                                            return v54;
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v55 = C::value_type(ctx, v11);
                    if v55 == I128 {
                        let v57 = C::put_in_regs(ctx, v11);
                        let v58 = &constructor_cmp_zero_i128(ctx, &CC::Z, v57);
                        let v59 = &constructor_jmp_cond_icmp(ctx, v58, v28.0, v28.1);
                        let v60 = constructor_emit_side_effect(ctx, v59);
                        let v61 = Some(v60);
                        // Rule at src/isa/x64/lower.isle line 3519.
                        return v61;
                    }
                    let v62 = C::ty_int_bool_or_ref(ctx, v55);
                    if let Some(v63) = v62 {
                        let v64 = &constructor_cmp_zero_int_bool_ref(ctx, v11);
                        let v66 = &constructor_jmp_cond(ctx, &CC::NZ, v28.0, v28.1);
                        let v67 = &constructor_with_flags_side_effect(ctx, v64, v66);
                        let v68 = constructor_emit_side_effect(ctx, v67);
                        let v69 = Some(v68);
                        // Rule at src/isa/x64/lower.isle line 3523.
                        return v69;
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jmp_known(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src/isa/x64/lower.isle line 3502.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd128.
pub fn constructor_iadd128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMemImm,
    arg3: &GprMemImm,
) -> ValueRegs {
    let v5 = &constructor_x64_add_with_flags_paired(ctx, I64, arg0, arg2);
    let v6 = &constructor_x64_adc_paired(ctx, I64, arg1, arg3);
    let v7 = constructor_with_flags(ctx, v5, v6);
    // Rule at src/isa/x64/lower.isle line 118.
    return v7;
}

// Generated as internal constructor for term construct_overflow_op.
pub fn constructor_construct_overflow_op<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &ProducesFlags,
) -> InstOutput {
    let v2 = &constructor_x64_setcc_paired(ctx, arg0);
    let v3 = constructor_with_flags(ctx, arg1, v2);
    let v5 = C::value_regs_get(ctx, v3, 0x0_usize);
    let v6 = C::value_reg(ctx, v5);
    let v8 = C::value_regs_get(ctx, v3, 0x1_usize);
    let v9 = C::value_reg(ctx, v8);
    let v10 = C::output_pair(ctx, v6, v9);
    // Rule at src/isa/x64/lower.isle line 125.
    return v10;
}

// Generated as internal constructor for term construct_overflow_op_alu.
pub fn constructor_construct_overflow_op_alu<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: &AluRmiROpcode,
    arg3: Gpr,
    arg4: &GprMemImm,
) -> InstOutput {
    let v5 = &constructor_x64_alurmi_with_flags_paired(ctx, arg2, arg0, arg3, arg4);
    let v6 = constructor_construct_overflow_op(ctx, arg1, v5);
    // Rule at src/isa/x64/lower.isle line 132.
    return v6;
}

// Generated as internal constructor for term construct_overflow_op_alu_128.
pub fn constructor_construct_overflow_op_alu_128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: &AluRmiROpcode,
    arg2: &AluRmiROpcode,
    arg3: Value,
    arg4: Value,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg3);
    let v7 = constructor_value_regs_get_gpr(ctx, v5, 0x0_usize);
    let v9 = constructor_value_regs_get_gpr(ctx, v5, 0x1_usize);
    let v10 = C::put_in_regs(ctx, arg4);
    let v11 = constructor_value_regs_get_gpr(ctx, v10, 0x0_usize);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x1_usize);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
    let v15 = &constructor_x64_alurmi_with_flags_paired(ctx, arg1, I64, v7, v14);
    let v16 = &C::gpr_to_gpr_mem_imm(ctx, v12);
    let v17 = &constructor_x64_alurmi_with_flags_chained(ctx, arg2, I64, v9, v16);
    let v18 = &constructor_x64_setcc_paired(ctx, arg0);
    let v19 = &constructor_with_flags_chained(ctx, v15, v17, v18);
    let v20 = constructor_multi_reg_to_pair_and_single(ctx, v19);
    // Rule at src/isa/x64/lower.isle line 140.
    return v20;
}

// Generated as internal constructor for term isub128.
pub fn constructor_isub128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMemImm,
    arg3: &GprMemImm,
) -> ValueRegs {
    let v5 = &constructor_x64_sub_with_flags_paired(ctx, I64, arg0, arg2);
    let v6 = &constructor_x64_sbb_paired(ctx, I64, arg1, arg3);
    let v7 = constructor_with_flags(ctx, v5, v6);
    // Rule at src/isa/x64/lower.isle line 274.
    return v7;
}

// Generated as internal constructor for term sse_and.
pub fn constructor_sse_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 328.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 329.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_andps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 326.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 327.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pand(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 330.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_and", "src/isa/x64/lower.isle line 325")
}

// Generated as internal constructor for term and_i128.
pub fn constructor_and_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_and(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_and(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 339.
    return v13;
}

// Generated as internal constructor for term sse_and_not.
pub fn constructor_sse_and_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32X4 => {
            let v3 = constructor_x64_andnps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 357.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_andnpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 358.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_pandn(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 359.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_and_not", "src/isa/x64/lower.isle line 356")
}

// Generated as internal constructor for term val_minus_one.
pub fn constructor_val_minus_one<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<Value> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        if let &InstructionData::Binary {
            opcode: ref v4,
            args: ref v5,
        } = v3 {
            match v4 {
                &Opcode::Iadd => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v18 = C::i64_from_iconst(ctx, v6.0);
                    if let Some(v19) = v18 {
                        if v19 == -1_i64 {
                            let v20 = Some(v6.1);
                            // Rule at src/isa/x64/lower.isle line 388.
                            return v20;
                        }
                    }
                    let v16 = C::i64_from_iconst(ctx, v6.1);
                    if let Some(v17) = v16 {
                        if v17 == -1_i64 {
                            let v15 = Some(v6.0);
                            // Rule at src/isa/x64/lower.isle line 387.
                            return v15;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v6 = C::unpack_value_array_2(ctx, v5);
                    let v9 = C::def_inst(ctx, v6.1);
                    if let Some(v10) = v9 {
                        let v11 = &C::inst_data(ctx, v10);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v12,
                            imm: v13,
                        } = v11 {
                            if let &Opcode::Iconst = v12 {
                                let v14 = C::u64_from_imm64(ctx, v13);
                                if v14 == 0x1_u64 {
                                    let v15 = Some(v6.0);
                                    // Rule at src/isa/x64/lower.isle line 386.
                                    return v15;
                                }
                            }
                        }
                    }
                }
                _ => {}
            }
        }
    }
    None
}

// Generated as internal constructor for term sse_or.
pub fn constructor_sse_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: &XmmMem,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 452.
            return v3;
        }
        F64 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 453.
            return v4;
        }
        F32X4 => {
            let v3 = constructor_x64_orps(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 450.
            return v3;
        }
        F64X2 => {
            let v4 = constructor_x64_orpd(ctx, arg1, arg2);
            // Rule at src/isa/x64/lower.isle line 451.
            return v4;
        }
        _ => {}
    }
    let v5 = C::multi_lane(ctx, arg0);
    if let Some(v6) = v5 {
        let v9 = constructor_x64_por(ctx, arg1, arg2);
        // Rule at src/isa/x64/lower.isle line 454.
        return v9;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sse_or", "src/isa/x64/lower.isle line 449")
}

// Generated as internal constructor for term or_i128.
pub fn constructor_or_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v6 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
    let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
    let v9 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v10 = constructor_x64_or(ctx, I64, v3, v9);
    let v11 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v12 = constructor_x64_or(ctx, I64, v5, v11);
    let v13 = constructor_value_gprs(ctx, v10, v12);
    // Rule at src/isa/x64/lower.isle line 463.
    return v13;
}

// Generated as internal constructor for term shl_i128.
pub fn constructor_shl_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shl(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shl(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shr(ctx, I64, v3, v16);
    let v19 = constructor_imm(ctx, I64, 0x0_u64);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v10);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v8);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v20);
    let v39 = &C::gpr_to_gpr_mem(ctx, v32);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v8);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 552.
    return v42;
}

// Generated as internal constructor for term ishl_i8x16_mask.
pub fn constructor_ishl_i8x16_mask<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg {
            reg: v3,
        } => {
            let v4 = &C::ishl_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4_u8);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0_i32,
                base: v6,
                index: v10,
                shift: 0x0_u8,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 626.
            return v15.clone();
        }
        &RegMemImm::Mem {
            addr: ref v16,
        } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg {
                reg: v18,
            };
            let v20 = &constructor_ishl_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 637.
            return v20.clone();
        }
        &RegMemImm::Imm {
            simm32: v1,
        } => {
            let v2 = &C::ishl_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 617.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ishl_i8x16_mask", "src/isa/x64/lower.isle line 611")
}

// Generated as internal constructor for term shr_i128.
pub fn constructor_shr_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_shr(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v19 = constructor_imm(ctx, I64, 0x0_u64);
    let v20 = C::gpr_new(ctx, v19);
    let v23 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v24 = &C::gpr_mem_imm_new(ctx, &v23);
    let v25 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v24);
    let v27 = &C::gpr_to_gpr_mem(ctx, v20);
    let v28 = &constructor_cmove(ctx, I64, &CC::Z, v27, v17);
    let v29 = constructor_with_flags_reg(ctx, v25, v28);
    let v30 = C::gpr_new(ctx, v29);
    let v31 = &C::gpr_to_gpr_mem_imm(ctx, v8);
    let v32 = constructor_x64_or(ctx, I64, v30, v31);
    let v34 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v35 = &C::gpr_mem_imm_new(ctx, &v34);
    let v36 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v35);
    let v37 = &C::gpr_to_gpr_mem(ctx, v32);
    let v38 = &constructor_cmove(ctx, I64, &CC::Z, v37, v10);
    let v39 = &C::gpr_to_gpr_mem(ctx, v10);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v20);
    let v41 = &constructor_consumes_flags_concat(ctx, v38, v40);
    let v42 = constructor_with_flags(ctx, v36, v41);
    // Rule at src/isa/x64/lower.isle line 662.
    return v42;
}

// Generated as internal constructor for term ushr_i8x16_mask.
pub fn constructor_ushr_i8x16_mask<C: Context>(
    ctx: &mut C,
    arg0: &RegMemImm,
) -> SyntheticAmode {
    match arg0 {
        &RegMemImm::Reg {
            reg: v3,
        } => {
            let v4 = &C::ushr_i8x16_mask_table(ctx);
            let v6 = constructor_x64_lea(ctx, I64, v4);
            let v7 = C::gpr_new(ctx, v3);
            let v9 = &C::imm8_to_imm8_gpr(ctx, 0x4_u8);
            let v10 = constructor_x64_shl(ctx, I64, v7, v9);
            let v13 = C::mem_flags_trusted(ctx);
            let v14 = Amode::ImmRegRegShift {
                simm32: 0_i32,
                base: v6,
                index: v10,
                shift: 0x0_u8,
                flags: v13,
            };
            let v15 = &C::amode_to_synthetic_amode(ctx, &v14);
            // Rule at src/isa/x64/lower.isle line 731.
            return v15.clone();
        }
        &RegMemImm::Mem {
            addr: ref v16,
        } => {
            let v18 = constructor_x64_load(ctx, I64, v16, &ExtKind::None);
            let v19 = RegMemImm::Reg {
                reg: v18,
            };
            let v20 = &constructor_ushr_i8x16_mask(ctx, &v19);
            // Rule at src/isa/x64/lower.isle line 743.
            return v20.clone();
        }
        &RegMemImm::Imm {
            simm32: v1,
        } => {
            let v2 = &C::ushr_i8x16_mask_for_const(ctx, v1);
            // Rule at src/isa/x64/lower.isle line 722.
            return v2.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "ushr_i8x16_mask", "src/isa/x64/lower.isle line 716")
}

// Generated as internal constructor for term mask_xmm_shift.
pub fn constructor_mask_xmm_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> RegMemImm {
    let v11 = C::def_inst(ctx, arg1);
    if let Some(v12) = v11 {
        let v13 = &C::inst_data(ctx, v12);
        if let &InstructionData::UnaryImm {
            opcode: ref v14,
            imm: v15,
        } = v13 {
            if let &Opcode::Iconst = v14 {
                let v16 = C::shift_amount_masked(ctx, arg0, v15);
                let v17 = C::u8_as_u32(ctx, v16);
                let v18 = RegMemImm::Imm {
                    simm32: v17,
                };
                // Rule at src/isa/x64/lower.isle line 760.
                return v18;
            }
        }
    }
    let v3 = constructor_put_in_gpr(ctx, arg1);
    let v4 = C::shift_mask(ctx, arg0);
    let v5 = C::u8_as_u32(ctx, v4);
    let v6 = RegMemImm::Imm {
        simm32: v5,
    };
    let v7 = &C::gpr_mem_imm_new(ctx, &v6);
    let v8 = constructor_x64_and(ctx, I64, v3, v7);
    let v9 = C::gpr_to_reg(ctx, v8);
    let v10 = &C::reg_to_reg_mem_imm(ctx, v9);
    // Rule at src/isa/x64/lower.isle line 758.
    return v10.clone();
}

// Generated as internal constructor for term sar_i128.
pub fn constructor_sar_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: Gpr,
) -> ValueRegs {
    let v3 = constructor_value_regs_get_gpr(ctx, arg0, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, arg0, 0x1_usize);
    let v7 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v8 = constructor_x64_shr(ctx, I64, v3, v7);
    let v9 = &C::gpr_to_imm8_gpr(ctx, arg1);
    let v10 = constructor_x64_sar(ctx, I64, v5, v9);
    let v12 = constructor_imm(ctx, I64, 0x40_u64);
    let v13 = C::gpr_new(ctx, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, arg1);
    let v15 = constructor_x64_sub(ctx, I64, v13, v14);
    let v16 = &C::gpr_to_imm8_gpr(ctx, v15);
    let v17 = constructor_x64_shl(ctx, I64, v5, v16);
    let v20 = RegMemImm::Imm {
        simm32: 0x7f_u32,
    };
    let v21 = &C::gpr_mem_imm_new(ctx, &v20);
    let v22 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v21);
    let v25 = constructor_imm(ctx, I64, 0x0_u64);
    let v26 = &C::reg_to_gpr_mem(ctx, v25);
    let v27 = &constructor_cmove(ctx, I64, &CC::Z, v26, v17);
    let v28 = constructor_with_flags_reg(ctx, v22, v27);
    let v29 = C::gpr_new(ctx, v28);
    let v30 = &C::gpr_to_gpr_mem_imm(ctx, v29);
    let v31 = constructor_x64_or(ctx, I64, v8, v30);
    let v33 = &C::imm8_to_imm8_gpr(ctx, 0x3f_u8);
    let v34 = constructor_x64_sar(ctx, I64, v5, v33);
    let v36 = RegMemImm::Imm {
        simm32: 0x40_u32,
    };
    let v37 = &C::gpr_mem_imm_new(ctx, &v36);
    let v38 = &constructor_x64_test(ctx, &OperandSize::Size64, arg1, v37);
    let v39 = &C::gpr_to_gpr_mem(ctx, v31);
    let v40 = &constructor_cmove(ctx, I64, &CC::Z, v39, v10);
    let v41 = &C::gpr_to_gpr_mem(ctx, v10);
    let v42 = &constructor_cmove(ctx, I64, &CC::Z, v41, v34);
    let v43 = &constructor_consumes_flags_concat(ctx, v40, v42);
    let v44 = constructor_with_flags(ctx, v38, v43);
    // Rule at src/isa/x64/lower.isle line 774.
    return v44;
}

// Generated as internal constructor for term sshr_i8x16_bigger_shift.
pub fn constructor_sshr_i8x16_bigger_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMemImm,
) -> XmmMemImm {
    match arg1 {
        &RegMemImm::Reg {
            reg: v7,
        } => {
            let v8 = C::gpr_new(ctx, v7);
            let v9 = RegMemImm::Imm {
                simm32: 0x8_u32,
            };
            let v10 = &C::gpr_mem_imm_new(ctx, &v9);
            let v11 = constructor_x64_add(ctx, arg0, v8, v10);
            let v12 = C::gpr_to_reg(ctx, v11);
            let v13 = RegMemImm::Reg {
                reg: v12,
            };
            let v14 = &constructor_mov_rmi_to_xmm(ctx, &v13);
            // Rule at src/isa/x64/lower.isle line 842.
            return v14.clone();
        }
        &RegMemImm::Mem {
            addr: ref v15,
        } => {
            let v17 = constructor_imm(ctx, arg0, 0x8_u64);
            let v18 = C::gpr_new(ctx, v17);
            let v19 = &C::gpr_mem_imm_new(ctx, arg1);
            let v20 = constructor_x64_add(ctx, arg0, v18, v19);
            let v21 = C::gpr_to_reg(ctx, v20);
            let v22 = RegMemImm::Reg {
                reg: v21,
            };
            let v23 = &constructor_mov_rmi_to_xmm(ctx, &v22);
            // Rule at src/isa/x64/lower.isle line 846.
            return v23.clone();
        }
        &RegMemImm::Imm {
            simm32: v2,
        } => {
            let v4 = C::u32_add(ctx, v2, 0x8_u32);
            let v5 = RegMemImm::Imm {
                simm32: v4,
            };
            let v6 = &C::xmm_mem_imm_new(ctx, &v5);
            // Rule at src/isa/x64/lower.isle line 840.
            return v6.clone();
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "sshr_i8x16_bigger_shift", "src/isa/x64/lower.isle line 839")
}

// Generated as internal constructor for term lower_i64x2_sshr_imm.
pub fn constructor_lower_i64x2_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: u32,
) -> Xmm {
    let v2 = C::u32_as_u64(ctx, arg1);
    let v4 = C::u64_lt(ctx, v2, 0x20_u64);
    if v4 == true {
        let v5 = &C::xmi_imm(ctx, arg1);
        let v6 = constructor_x64_psrad(ctx, arg0, v5);
        let v7 = &C::xmm_to_xmm_mem(ctx, v6);
        let v9 = constructor_x64_pshufd(ctx, v7, 0xed_u8);
        let v10 = &C::xmi_imm(ctx, arg1);
        let v11 = constructor_x64_psrlq(ctx, arg0, v10);
        let v12 = &C::xmm_to_xmm_mem(ctx, v11);
        let v14 = constructor_x64_pshufd(ctx, v12, 0xe8_u8);
        let v15 = &C::xmm_to_xmm_mem(ctx, v9);
        let v16 = constructor_x64_punpckldq(ctx, v14, v15);
        // Rule at src/isa/x64/lower.isle line 885.
        return v16;
    }
    if arg1 == 0x20_u32 {
        let v17 = &C::xmm_to_xmm_mem(ctx, arg0);
        let v18 = constructor_x64_pshufd(ctx, v17, 0xed_u8);
        let v20 = &C::xmi_imm(ctx, 0x1f_u32);
        let v21 = constructor_x64_psrad(ctx, arg0, v20);
        let v22 = &C::xmm_to_xmm_mem(ctx, v21);
        let v23 = constructor_x64_pshufd(ctx, v22, 0xed_u8);
        let v24 = &C::xmm_to_xmm_mem(ctx, v23);
        let v25 = constructor_x64_punpckldq(ctx, v18, v24);
        // Rule at src/isa/x64/lower.isle line 896.
        return v25;
    }
    let v26 = C::u64_lt(ctx, 0x20_u64, v2);
    if v26 == true {
        let v27 = &C::xmi_imm(ctx, 0x1f_u32);
        let v28 = constructor_x64_psrad(ctx, arg0, v27);
        let v29 = &C::xmm_to_xmm_mem(ctx, v28);
        let v30 = constructor_x64_pshufd(ctx, v29, 0xed_u8);
        let v32 = C::u32_sub(ctx, arg1, 0x20_u32);
        let v33 = &C::xmi_imm(ctx, v32);
        let v34 = constructor_x64_psrad(ctx, arg0, v33);
        let v35 = &C::xmm_to_xmm_mem(ctx, v34);
        let v36 = constructor_x64_pshufd(ctx, v35, 0xed_u8);
        let v37 = &C::xmm_to_xmm_mem(ctx, v30);
        let v38 = constructor_x64_punpckldq(ctx, v36, v37);
        // Rule at src/isa/x64/lower.isle line 907.
        return v38;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_i64x2_sshr_imm", "src/isa/x64/lower.isle line 880")
}

// Generated as internal constructor for term lower_i64x2_sshr_gpr.
pub fn constructor_lower_i64x2_sshr_gpr<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Gpr,
) -> Xmm {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg1);
    let v3 = constructor_x64_movq_to_xmm(ctx, v2);
    let v5 = constructor_flip_high_bit_mask(ctx, I64X2);
    let v6 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v7 = constructor_x64_psrlq(ctx, v5, v6);
    let v8 = &C::xmm_to_xmm_mem_imm(ctx, v3);
    let v9 = constructor_x64_psrlq(ctx, arg0, v8);
    let v10 = &C::xmm_to_xmm_mem(ctx, v9);
    let v11 = constructor_x64_pxor(ctx, v7, v10);
    let v12 = &C::xmm_to_xmm_mem(ctx, v7);
    let v13 = constructor_x64_psubq(ctx, v11, v12);
    // Rule at src/isa/x64/lower.isle line 922.
    return v13;
}

// Generated as internal constructor for term imul128.
pub fn constructor_imul128<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: &GprMem,
    arg3: &GprMem,
) -> ValueRegs {
    let v5 = constructor_x64_imul(ctx, I64, arg0, arg3);
    let v6 = constructor_x64_imul(ctx, I64, arg1, arg2);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_add(ctx, I64, v5, v7);
    let v9 = false;
    let v10 = constructor_x64_mul(ctx, I64, v9, arg0, arg2);
    let v12 = constructor_value_regs_get_gpr(ctx, v10, 0x0_usize);
    let v14 = constructor_value_regs_get_gpr(ctx, v10, 0x1_usize);
    let v15 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v16 = constructor_x64_add(ctx, I64, v8, v15);
    let v17 = constructor_value_gprs(ctx, v12, v16);
    // Rule at src/isa/x64/lower.isle line 1075.
    return v17;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    if arg0 == I128 {
        let v23 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v24 = constructor_value_regs_get_gpr(ctx, v23, 0x0_usize);
        let v25 = C::gpr_to_reg(ctx, v24);
        let v26 = C::gpr_to_reg(ctx, v24);
        let v27 = C::value_regs(ctx, v25, v26);
        // Rule at src/isa/x64/lower.isle line 1439.
        return v27;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
            let v16 = constructor_value_regs_get_gpr(ctx, arg2, 0x1_usize);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v16);
            let v19 = constructor_x64_or(ctx, I64, v8, v18);
            let v20 = C::gpr_to_reg(ctx, v19);
            let v21 = C::value_reg(ctx, v20);
            let v22 = constructor_lower_bmask(ctx, v2, I64, v21);
            // Rule at src/isa/x64/lower.isle line 1431.
            return v22;
        }
        let v4 = C::fits_in_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v8 = constructor_value_regs_get_gpr(ctx, arg2, 0x0_usize);
            let v9 = &constructor_x64_neg_paired(ctx, v5, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v8);
            let v11 = &constructor_x64_sbb_paired(ctx, v2, v8, v10);
            let v12 = constructor_with_flags(ctx, v9, v11);
            let v14 = C::value_regs_get(ctx, v12, 0x1_usize);
            let v15 = C::value_reg(ctx, v14);
            // Rule at src/isa/x64/lower.isle line 1420.
            return v15;
        }
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_bmask", "src/isa/x64/lower.isle line 1408")
}

// Generated as internal constructor for term i128_not.
pub fn constructor_i128_not<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ValueRegs {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = constructor_value_regs_get_gpr(ctx, v1, 0x0_usize);
    let v5 = constructor_value_regs_get_gpr(ctx, v1, 0x1_usize);
    let v7 = constructor_x64_not(ctx, I64, v3);
    let v8 = constructor_x64_not(ctx, I64, v5);
    let v9 = constructor_value_gprs(ctx, v7, v8);
    // Rule at src/isa/x64/lower.isle line 1462.
    return v9;
}

// Generated as internal constructor for term all_ones_or_all_zeros.
pub fn constructor_all_ones_or_all_zeros<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> Option<bool> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v17,
                args: ref v18,
                cond: ref v19,
            } => {
                if let &Opcode::Fcmp = v17 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src/isa/x64/lower.isle line 1508.
                        return v16;
                    }
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src/isa/x64/lower.isle line 1507.
                        return v16;
                    }
                }
            }
            &InstructionData::LoadNoOffset {
                opcode: ref v23,
                arg: v24,
                flags: v25,
            } => {
                if let &Opcode::Bitcast = v23 {
                    let v10 = C::value_type(ctx, arg0);
                    let v11 = C::multi_lane(ctx, v10);
                    if let Some(v12) = v11 {
                        let v26 = C::def_inst(ctx, v24);
                        if let Some(v27) = v26 {
                            let v28 = &C::inst_data(ctx, v27);
                            if let &InstructionData::FloatCompare {
                                opcode: ref v29,
                                args: ref v30,
                                cond: ref v31,
                            } = v28 {
                                if let &Opcode::Fcmp = v29 {
                                    let v15 = true;
                                    let v16 = Some(v15);
                                    // Rule at src/isa/x64/lower.isle line 1509.
                                    return v16;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryConst {
                opcode: ref v35,
                constant_handle: v36,
            } => {
                if let &Opcode::Vconst = v35 {
                    let v37 = C::vconst_all_ones_or_all_zeros(ctx, v36);
                    if let Some(v38) = v37 {
                        let v15 = true;
                        let v16 = Some(v15);
                        // Rule at src/isa/x64/lower.isle line 1510.
                        return v16;
                    }
                }
            }
            _ => {}
        }
    }
    None
}

// Generated as internal constructor for term insert_i8x16_lane_pshufd_imm.
pub fn constructor_insert_i8x16_lane_pshufd_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> u8 {
    match arg0 {
        0x0_u8 => {
            // Rule at src/isa/x64/lower.isle line 1609.
            return 0x54_u8;
        }
        0x1_u8 => {
            // Rule at src/isa/x64/lower.isle line 1610.
            return 0x51_u8;
        }
        0x2_u8 => {
            // Rule at src/isa/x64/lower.isle line 1611.
            return 0x45_u8;
        }
        0x3_u8 => {
            // Rule at src/isa/x64/lower.isle line 1612.
            return 0x15_u8;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "insert_i8x16_lane_pshufd_imm", "src/isa/x64/lower.isle line 1608")
}

// Generated as internal constructor for term f32x4_insertlane.
pub fn constructor_f32x4_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: Xmm,
    arg2: u8,
) -> Xmm {
    let v3 = C::use_sse41(ctx);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg1);
        let v5 = C::sse_insertps_lane_imm(ctx, arg2);
        let v6 = constructor_x64_insertps(ctx, arg0, v4, v5);
        // Rule at src/isa/x64/lower.isle line 1678.
        return v6;
    }
    match arg2 {
        0x0_u8 => {
            let v7 = constructor_x64_movss_regmove(ctx, arg0, arg1);
            // Rule at src/isa/x64/lower.isle line 1687.
            return v7;
        }
        0x1_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v9 = constructor_x64_movlhps(ctx, arg1, v8);
            let v10 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v12 = constructor_x64_shufps(ctx, v9, v10, 0xe2_u8);
            // Rule at src/isa/x64/lower.isle line 1693.
            return v12;
        }
        0x2_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v14 = constructor_x64_shufps(ctx, arg1, v8, 0x30_u8);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v17 = constructor_x64_shufps(ctx, arg0, v15, 0x84_u8);
            // Rule at src/isa/x64/lower.isle line 1700.
            return v17;
        }
        0x3_u8 => {
            let v8 = &C::xmm_to_xmm_mem(ctx, arg0);
            let v19 = constructor_x64_shufps(ctx, arg1, v8, 0xe4_u8);
            let v20 = &C::xmm_to_xmm_mem(ctx, v19);
            let v22 = constructor_x64_shufps(ctx, arg0, v20, 0x24_u8);
            // Rule at src/isa/x64/lower.isle line 1707.
            return v22;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "f32x4_insertlane", "src/isa/x64/lower.isle line 1675")
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &CC,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = &C::raw_operand_size_of_type(ctx, v2);
        let v7 = C::put_in_reg(ctx, arg2);
        let v8 = C::put_in_reg(ctx, arg3);
        let v9 = C::gpr_new(ctx, v8);
        let v10 = &constructor_reg_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_cmp(ctx, v6, v9, v10);
        let v12 = &C::reg_to_gpr_mem(ctx, v8);
        let v13 = C::gpr_new(ctx, v7);
        let v14 = &constructor_cmove(ctx, v2, arg1, v12, v13);
        let v15 = constructor_with_flags_reg(ctx, v11, v14);
        let v16 = C::value_reg(ctx, v15);
        // Rule at src/isa/x64/lower.isle line 1732.
        return v16;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_and_choose", "src/isa/x64/lower.isle line 1731")
}

// Generated as internal constructor for term has_pmins.
pub fn constructor_has_pmins<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I16X8 => {
            let v1 = true;
            // Rule at src/isa/x64/lower.isle line 1758.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src/isa/x64/lower.isle line 1759.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1760.
    return v3;
}

// Generated as internal constructor for term has_pmaxs.
pub fn constructor_has_pmaxs<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I16X8 => {
            let v1 = true;
            // Rule at src/isa/x64/lower.isle line 1763.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src/isa/x64/lower.isle line 1764.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1765.
    return v3;
}

// Generated as internal constructor for term has_pmaxu.
pub fn constructor_has_pmaxu<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I8X16 => {
            let v1 = true;
            // Rule at src/isa/x64/lower.isle line 1768.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src/isa/x64/lower.isle line 1769.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1770.
    return v3;
}

// Generated as internal constructor for term has_pminu.
pub fn constructor_has_pminu<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> bool {
    match arg0 {
        I8X16 => {
            let v1 = true;
            // Rule at src/isa/x64/lower.isle line 1773.
            return v1;
        }
        I64X2 => {
            let v2 = false;
            // Rule at src/isa/x64/lower.isle line 1774.
            return v2;
        }
        _ => {}
    }
    let v3 = C::use_sse41(ctx);
    // Rule at src/isa/x64/lower.isle line 1775.
    return v3;
}

// Generated as internal constructor for term lower_vec_smax.
pub fn constructor_lower_vec_smax<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
    arg2: Xmm,
) -> Xmm {
    let v3 = constructor_has_pmaxs(ctx, arg0);
    if v3 == true {
        let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
        let v5 = constructor_x64_pmaxs(ctx, arg0, arg1, v4);
        // Rule at src/isa/x64/lower.isle line 1783.
        return v5;
    }
    let v4 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v6 = constructor_x64_pcmpgt(ctx, arg0, arg1, v4);
    let v7 = &C::xmm_to_xmm_mem(ctx, arg1);
    let v8 = constructor_x64_pand(ctx, v6, v7);
    let v9 = &C::xmm_to_xmm_mem(ctx, arg2);
    let v10 = constructor_x64_pandn(ctx, v6, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v10);
    let v12 = constructor_x64_por(ctx, v8, v11);
    // Rule at src/isa/x64/lower.isle line 1787.
    return v12;
}

// Generated as internal constructor for term flip_high_bit_mask.
pub fn constructor_flip_high_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = C::emit_u128_le_const(ctx, 0x80008000800080008000800080008000_u128);
            let v3 = &constructor_const_to_xmm_mem(ctx, v2);
            let v4 = constructor_x64_movdqu_load(ctx, v3);
            // Rule at src/isa/x64/lower.isle line 1842.
            return v4;
        }
        I32X4 => {
            let v6 = C::emit_u128_le_const(ctx, 0x80000000800000008000000080000000_u128);
            let v7 = &constructor_const_to_xmm_mem(ctx, v6);
            let v8 = constructor_x64_movdqu_load(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 1844.
            return v8;
        }
        I64X2 => {
            let v10 = C::emit_u128_le_const(ctx, 0x80000000000000008000000000000000_u128);
            let v11 = &constructor_const_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            // Rule at src/isa/x64/lower.isle line 1846.
            return v12;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "flip_high_bit_mask", "src/isa/x64/lower.isle line 1841")
}

// Generated as internal constructor for term lower_select_fcmp.
pub fn constructor_lower_select_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    match arg1 {
        &FcmpCondResult::Condition {
            producer: ref v2,
            cc: ref v3,
        } => {
            let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
            let v7 = constructor_with_flags(ctx, v2, v6);
            let v8 = C::output(ctx, v7);
            // Rule at src/isa/x64/lower.isle line 2176.
            return v8;
        }
        &FcmpCondResult::OrCondition {
            producer: ref v9,
            cc1: ref v10,
            cc2: ref v11,
        } => {
            let v12 = &constructor_cmove_or_from_values(ctx, arg0, v10, v11, arg2, arg3);
            let v13 = constructor_with_flags(ctx, v9, v12);
            let v14 = C::output(ctx, v13);
            // Rule at src/isa/x64/lower.isle line 2178.
            return v14;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_select_fcmp", "src/isa/x64/lower.isle line 2175")
}

// Generated as internal constructor for term lower_select_icmp.
pub fn constructor_lower_select_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IcmpCondResult,
    arg2: Value,
    arg3: Value,
) -> InstOutput {
    if let &IcmpCondResult::Condition {
        producer: ref v2,
        cc: ref v3,
    } = arg1 {
        let v6 = &constructor_cmove_from_values(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags(ctx, v2, v6);
        let v8 = C::output(ctx, v7);
        // Rule at src/isa/x64/lower.isle line 2204.
        return v8;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_select_icmp", "src/isa/x64/lower.isle line 2203")
}

// Generated as internal constructor for term do_clz.
pub fn constructor_do_clz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::use_lzcnt(ctx);
    if v3 == true {
        let v4 = constructor_x64_lzcnt(ctx, arg0, arg2);
        // Rule at src/isa/x64/lower.isle line 2250.
        return v4;
    }
    let v7 = constructor_imm_i64(ctx, I64, -1_i64);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsr_or_else(ctx, arg0, arg2, v8);
    let v10 = C::gpr_to_reg(ctx, v9);
    let v11 = C::ty_bits_u64(ctx, arg1);
    let v13 = C::u64_sub(ctx, v11, 0x1_u64);
    let v14 = constructor_imm(ctx, arg0, v13);
    let v15 = C::gpr_new(ctx, v14);
    let v16 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v17 = constructor_x64_sub(ctx, arg0, v15, v16);
    // Rule at src/isa/x64/lower.isle line 2254.
    return v17;
}

// Generated as internal constructor for term do_ctz.
pub fn constructor_do_ctz<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: Gpr,
) -> Gpr {
    let v3 = C::use_bmi1(ctx);
    if v3 == true {
        let v4 = constructor_x64_tzcnt(ctx, arg0, arg2);
        // Rule at src/isa/x64/lower.isle line 2286.
        return v4;
    }
    let v6 = C::ty_bits_u64(ctx, arg1);
    let v7 = constructor_imm(ctx, I64, v6);
    let v8 = C::gpr_new(ctx, v7);
    let v9 = constructor_bsf_or_else(ctx, arg0, arg2, v8);
    // Rule at src/isa/x64/lower.isle line 2290.
    return v9;
}

// Generated as internal constructor for term do_popcnt.
pub fn constructor_do_popcnt<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    match arg0 {
        I32 => {
            let v4 = Imm8Reg::Imm8 {
                imm: 0x1_u8,
            };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v47 = constructor_x64_shr(ctx, I32, arg1, v5);
            let v49 = constructor_imm(ctx, I32, 0x77777777_u64);
            let v50 = C::gpr_new(ctx, v49);
            let v51 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v52 = constructor_x64_and(ctx, I32, v47, v51);
            let v53 = &C::gpr_to_gpr_mem_imm(ctx, v52);
            let v54 = constructor_x64_sub(ctx, I32, arg1, v53);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v55 = constructor_x64_shr(ctx, I32, v52, v14);
            let v56 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v57 = constructor_x64_and(ctx, I32, v55, v56);
            let v58 = &C::gpr_to_gpr_mem_imm(ctx, v57);
            let v59 = constructor_x64_sub(ctx, I32, v54, v58);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v60 = constructor_x64_shr(ctx, I32, v57, v20);
            let v61 = &C::gpr_to_gpr_mem_imm(ctx, v50);
            let v62 = constructor_x64_and(ctx, I32, v60, v61);
            let v63 = &C::gpr_to_gpr_mem_imm(ctx, v62);
            let v64 = constructor_x64_sub(ctx, I32, v59, v63);
            let v27 = Imm8Reg::Imm8 {
                imm: 0x4_u8,
            };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v65 = constructor_x64_shr(ctx, I32, v64, v28);
            let v66 = &C::gpr_to_gpr_mem_imm(ctx, v64);
            let v67 = constructor_x64_add(ctx, I32, v65, v66);
            let v69 = RegMemImm::Imm {
                simm32: 0xf0f0f0f_u32,
            };
            let v70 = &C::gpr_mem_imm_new(ctx, &v69);
            let v71 = constructor_x64_and(ctx, I32, v67, v70);
            let v72 = &C::gpr_to_gpr_mem(ctx, v71);
            let v74 = constructor_x64_imul_imm(ctx, I32, v72, 16843009_i32);
            let v76 = Imm8Reg::Imm8 {
                imm: 0x18_u8,
            };
            let v77 = &C::imm8_reg_to_imm8_gpr(ctx, &v76);
            let v78 = constructor_x64_shr(ctx, I32, v74, v77);
            // Rule at src/isa/x64/lower.isle line 2372.
            return v78;
        }
        I64 => {
            let v4 = Imm8Reg::Imm8 {
                imm: 0x1_u8,
            };
            let v5 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v6 = constructor_x64_shr(ctx, I64, arg1, v5);
            let v8 = constructor_imm(ctx, I64, 0x7777777777777777_u64);
            let v9 = C::gpr_new(ctx, v8);
            let v10 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v11 = constructor_x64_and(ctx, I64, v6, v10);
            let v12 = &C::gpr_to_gpr_mem_imm(ctx, v11);
            let v13 = constructor_x64_sub(ctx, I64, arg1, v12);
            let v14 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v15 = constructor_x64_shr(ctx, I64, v11, v14);
            let v16 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v17 = constructor_x64_and(ctx, I64, v15, v16);
            let v18 = &C::gpr_to_gpr_mem_imm(ctx, v17);
            let v19 = constructor_x64_sub(ctx, I64, v13, v18);
            let v20 = &C::imm8_reg_to_imm8_gpr(ctx, &v4);
            let v21 = constructor_x64_shr(ctx, I64, v17, v20);
            let v22 = &C::gpr_to_gpr_mem_imm(ctx, v9);
            let v23 = constructor_x64_and(ctx, I64, v21, v22);
            let v24 = &C::gpr_to_gpr_mem_imm(ctx, v23);
            let v25 = constructor_x64_sub(ctx, I64, v19, v24);
            let v27 = Imm8Reg::Imm8 {
                imm: 0x4_u8,
            };
            let v28 = &C::imm8_reg_to_imm8_gpr(ctx, &v27);
            let v29 = constructor_x64_shr(ctx, I64, v25, v28);
            let v30 = &C::gpr_to_gpr_mem_imm(ctx, v25);
            let v31 = constructor_x64_add(ctx, I64, v29, v30);
            let v33 = constructor_imm(ctx, I64, 0xf0f0f0f0f0f0f0f_u64);
            let v34 = C::gpr_new(ctx, v33);
            let v35 = &C::gpr_to_gpr_mem_imm(ctx, v34);
            let v36 = constructor_x64_and(ctx, I64, v31, v35);
            let v38 = constructor_imm(ctx, I64, 0x101010101010101_u64);
            let v39 = C::gpr_new(ctx, v38);
            let v40 = &C::gpr_to_gpr_mem(ctx, v39);
            let v41 = constructor_x64_imul(ctx, I64, v36, v40);
            let v43 = Imm8Reg::Imm8 {
                imm: 0x38_u8,
            };
            let v44 = &C::imm8_reg_to_imm8_gpr(ctx, &v43);
            let v45 = constructor_x64_shr(ctx, I64, v41, v44);
            // Rule at src/isa/x64/lower.isle line 2329.
            return v45;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "do_popcnt", "src/isa/x64/lower.isle line 2328")
}

// Generated as internal constructor for term do_bitrev8.
pub fn constructor_do_bitrev8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = C::ty_mask(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, 0x5555555555555555_u64);
    let v5 = constructor_imm(ctx, arg0, v4);
    let v6 = C::gpr_new(ctx, v5);
    let v7 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v8 = constructor_x64_and(ctx, arg0, arg1, v7);
    let v10 = Imm8Reg::Imm8 {
        imm: 0x1_u8,
    };
    let v11 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v12 = constructor_x64_shr(ctx, arg0, arg1, v11);
    let v13 = &C::gpr_to_gpr_mem_imm(ctx, v6);
    let v14 = constructor_x64_and(ctx, arg0, v12, v13);
    let v15 = &C::imm8_reg_to_imm8_gpr(ctx, &v10);
    let v16 = constructor_x64_shl(ctx, arg0, v8, v15);
    let v17 = &C::gpr_to_gpr_mem_imm(ctx, v14);
    let v18 = constructor_x64_or(ctx, arg0, v16, v17);
    let v20 = C::u64_and(ctx, v2, 0x3333333333333333_u64);
    let v21 = constructor_imm(ctx, arg0, v20);
    let v22 = C::gpr_new(ctx, v21);
    let v23 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v24 = constructor_x64_and(ctx, arg0, v18, v23);
    let v26 = Imm8Reg::Imm8 {
        imm: 0x2_u8,
    };
    let v27 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v28 = constructor_x64_shr(ctx, arg0, v18, v27);
    let v29 = &C::gpr_to_gpr_mem_imm(ctx, v22);
    let v30 = constructor_x64_and(ctx, arg0, v28, v29);
    let v31 = &C::imm8_reg_to_imm8_gpr(ctx, &v26);
    let v32 = constructor_x64_shl(ctx, arg0, v24, v31);
    let v33 = &C::gpr_to_gpr_mem_imm(ctx, v30);
    let v34 = constructor_x64_or(ctx, arg0, v32, v33);
    let v36 = C::u64_and(ctx, v2, 0xf0f0f0f0f0f0f0f_u64);
    let v37 = constructor_imm(ctx, arg0, v36);
    let v38 = C::gpr_new(ctx, v37);
    let v39 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v40 = constructor_x64_and(ctx, arg0, v34, v39);
    let v42 = Imm8Reg::Imm8 {
        imm: 0x4_u8,
    };
    let v43 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v44 = constructor_x64_shr(ctx, arg0, v34, v43);
    let v45 = &C::gpr_to_gpr_mem_imm(ctx, v38);
    let v46 = constructor_x64_and(ctx, arg0, v44, v45);
    let v47 = &C::imm8_reg_to_imm8_gpr(ctx, &v42);
    let v48 = constructor_x64_shl(ctx, arg0, v40, v47);
    let v49 = &C::gpr_to_gpr_mem_imm(ctx, v46);
    let v50 = constructor_x64_or(ctx, arg0, v48, v49);
    // Rule at src/isa/x64/lower.isle line 2466.
    return v50;
}

// Generated as internal constructor for term do_bitrev16.
pub fn constructor_do_bitrev16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = constructor_do_bitrev8(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xff00ff00ff00ff_u64);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 {
        imm: 0x8_u8,
    };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2489.
    return v19;
}

// Generated as internal constructor for term do_bitrev32.
pub fn constructor_do_bitrev32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    let v2 = constructor_do_bitrev16(ctx, arg0, arg1);
    let v3 = C::ty_mask(ctx, arg0);
    let v5 = C::u64_and(ctx, v3, 0xffff0000ffff_u64);
    let v6 = constructor_imm(ctx, arg0, v5);
    let v7 = C::gpr_new(ctx, v6);
    let v8 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v9 = constructor_x64_and(ctx, arg0, v2, v8);
    let v11 = Imm8Reg::Imm8 {
        imm: 0x10_u8,
    };
    let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v13 = constructor_x64_shr(ctx, arg0, v2, v12);
    let v14 = &C::gpr_to_gpr_mem_imm(ctx, v7);
    let v15 = constructor_x64_and(ctx, arg0, v13, v14);
    let v16 = &C::imm8_reg_to_imm8_gpr(ctx, &v11);
    let v17 = constructor_x64_shl(ctx, arg0, v9, v16);
    let v18 = &C::gpr_to_gpr_mem_imm(ctx, v15);
    let v19 = constructor_x64_or(ctx, arg0, v17, v18);
    // Rule at src/isa/x64/lower.isle line 2501.
    return v19;
}

// Generated as internal constructor for term do_bitrev64.
pub fn constructor_do_bitrev64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Gpr,
) -> Gpr {
    if arg0 == I64 {
        let v2 = constructor_do_bitrev32(ctx, arg0, arg1);
        let v4 = constructor_imm(ctx, arg0, 0xffffffff_u64);
        let v5 = C::gpr_new(ctx, v4);
        let v6 = &C::gpr_to_gpr_mem_imm(ctx, v5);
        let v7 = constructor_x64_and(ctx, arg0, v2, v6);
        let v9 = Imm8Reg::Imm8 {
            imm: 0x20_u8,
        };
        let v10 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v11 = constructor_x64_shr(ctx, arg0, v2, v10);
        let v12 = &C::imm8_reg_to_imm8_gpr(ctx, &v9);
        let v13 = constructor_x64_shl(ctx, arg0, v7, v12);
        let v14 = &C::gpr_to_gpr_mem_imm(ctx, v11);
        let v15 = constructor_x64_or(ctx, arg0, v13, v14);
        // Rule at src/isa/x64/lower.isle line 2513.
        return v15;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "do_bitrev64", "src/isa/x64/lower.isle line 2512")
}

// Generated as internal constructor for term fmadd.
pub fn constructor_fmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2938.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2937.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2933.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2932.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2927.
    return v7;
}

// Generated as internal constructor for term fnmadd.
pub fn constructor_fnmadd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmadd(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2946.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmadd(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2945.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmadd132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2942.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmadd132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2941.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmadd213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2940.
    return v7;
}

// Generated as internal constructor for term fmsub.
pub fn constructor_fmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fnmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2969.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fnmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2968.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2964.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2963.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2958.
    return v7;
}

// Generated as internal constructor for term fnmsub.
pub fn constructor_fnmsub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Xmm {
    let v24 = C::def_inst(ctx, arg2);
    if let Some(v25) = v24 {
        let v26 = &C::inst_data(ctx, v25);
        if let &InstructionData::Unary {
            opcode: ref v27,
            arg: v28,
        } = v26 {
            if let &Opcode::Fneg = v27 {
                let v29 = constructor_fmsub(ctx, arg0, arg1, v28, arg3);
                // Rule at src/isa/x64/lower.isle line 2977.
                return v29;
            }
        }
    }
    let v18 = C::def_inst(ctx, arg1);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20 {
            if let &Opcode::Fneg = v21 {
                let v23 = constructor_fmsub(ctx, arg0, v22, arg2, arg3);
                // Rule at src/isa/x64/lower.isle line 2976.
                return v23;
            }
        }
    }
    let v14 = &C::sinkable_load(ctx, arg2);
    if let Some(v15) = v14 {
        let v4 = constructor_put_in_xmm(ctx, arg1);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v16 = &constructor_sink_load_to_xmm_mem(ctx, v15);
        let v17 = constructor_x64_vfnmsub132(ctx, arg0, v4, v11, v16);
        // Rule at src/isa/x64/lower.isle line 2973.
        return v17;
    }
    let v8 = &C::sinkable_load(ctx, arg1);
    if let Some(v9) = v8 {
        let v10 = constructor_put_in_xmm(ctx, arg2);
        let v11 = constructor_put_in_xmm(ctx, arg3);
        let v12 = &constructor_sink_load_to_xmm_mem(ctx, v9);
        let v13 = constructor_x64_vfnmsub132(ctx, arg0, v10, v11, v12);
        // Rule at src/isa/x64/lower.isle line 2972.
        return v13;
    }
    let v4 = constructor_put_in_xmm(ctx, arg1);
    let v5 = constructor_put_in_xmm(ctx, arg2);
    let v6 = &C::put_in_xmm_mem(ctx, arg3);
    let v7 = constructor_x64_vfnmsub213(ctx, arg0, v4, v5, v6);
    // Rule at src/isa/x64/lower.isle line 2971.
    return v7;
}

// Generated as internal constructor for term cmp_zero_i128.
pub fn constructor_cmp_zero_i128<C: Context>(
    ctx: &mut C,
    arg0: &CC,
    arg1: ValueRegs,
) -> IcmpCondResult {
    let v1 = &C::cc_nz_or_z(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = constructor_value_regs_get_gpr(ctx, arg1, 0x0_usize);
        let v7 = constructor_value_regs_get_gpr(ctx, arg1, 0x1_usize);
        let v10 = &C::gpr_to_gpr_mem_imm(ctx, v7);
        let v11 = &constructor_x64_alurmi_flags_side_effect(ctx, &AluRmiROpcode::Or, I64, v5, v10);
        let v12 = &C::cc_invert(ctx, v2);
        let v13 = &constructor_icmp_cond_result(ctx, v11, v12);
        // Rule at src/isa/x64/lower.isle line 3537.
        return v13.clone();
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "cmp_zero_i128", "src/isa/x64/lower.isle line 3536")
}

// Generated as internal constructor for term cmp_zero_int_bool_ref.
pub fn constructor_cmp_zero_int_bool_ref<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> ProducesFlags {
    let v1 = C::value_type(ctx, arg0);
    let v2 = &C::raw_operand_size_of_type(ctx, v1);
    let v3 = constructor_put_in_gpr(ctx, arg0);
    let v4 = &C::gpr_to_gpr_mem_imm(ctx, v3);
    let v5 = &constructor_x64_test(ctx, v2, v3, v4);
    // Rule at src/isa/x64/lower.isle line 3546.
    return v5.clone();
}

// Generated as internal constructor for term lower_swiden_low.
pub fn constructor_lower_swiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v3 = constructor_x64_punpcklbw(ctx, arg1, v2);
            let v5 = &C::xmi_imm(ctx, 0x8_u32);
            let v6 = constructor_x64_psraw(ctx, v3, v5);
            // Rule at src/isa/x64/lower.isle line 4011.
            return v6;
        }
        I32X4 => {
            let v2 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v7 = constructor_x64_punpcklwd(ctx, arg1, v2);
            let v9 = &C::xmi_imm(ctx, 0x10_u32);
            let v10 = constructor_x64_psrad(ctx, v7, v9);
            // Rule at src/isa/x64/lower.isle line 4013.
            return v10;
        }
        I64X2 => {
            let v12 = constructor_xmm_zero(ctx, I32X4);
            let v13 = &C::xmm_to_xmm_mem(ctx, arg1);
            let v14 = constructor_x64_pcmpgtd(ctx, v12, v13);
            let v15 = &C::xmm_to_xmm_mem(ctx, v14);
            let v16 = constructor_x64_punpckldq(ctx, arg1, v15);
            // Rule at src/isa/x64/lower.isle line 4019.
            return v16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_swiden_low", "src/isa/x64/lower.isle line 4006")
}

// Generated as internal constructor for term lower_uwiden_low.
pub fn constructor_lower_uwiden_low<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Xmm,
) -> Xmm {
    match arg0 {
        I16X8 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v5 = constructor_x64_punpcklbw(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 4074.
            return v5;
        }
        I32X4 => {
            let v3 = constructor_xmm_zero(ctx, I8X16);
            let v4 = &C::xmm_to_xmm_mem(ctx, v3);
            let v6 = constructor_x64_punpcklwd(ctx, arg1, v4);
            // Rule at src/isa/x64/lower.isle line 4075.
            return v6;
        }
        I64X2 => {
            let v8 = constructor_xmm_zero(ctx, F32X4);
            let v9 = &C::xmm_to_xmm_mem(ctx, v8);
            let v10 = constructor_x64_unpcklps(ctx, arg1, v9);
            // Rule at src/isa/x64/lower.isle line 4076.
            return v10;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_uwiden_low", "src/isa/x64/lower.isle line 4073")
}

// Generated as internal constructor for term unarrow_i32x4_lanes_to_low_u16_lanes.
pub fn constructor_unarrow_i32x4_lanes_to_low_u16_lanes<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
) -> Xmm {
    let v2 = constructor_xmm_zero(ctx, I32X4);
    let v3 = &C::xmm_to_xmm_mem(ctx, v2);
    let v4 = constructor_x64_pcmpgtd(ctx, arg0, v3);
    let v5 = &C::xmm_to_xmm_mem(ctx, v4);
    let v6 = constructor_x64_pand(ctx, arg0, v5);
    let v8 = C::emit_u128_le_const(ctx, 0xffff0000ffff0000ffff0000ffff_u128);
    let v9 = &constructor_const_to_xmm_mem(ctx, v8);
    let v10 = constructor_x64_movdqu_load(ctx, v9);
    let v11 = &C::xmm_to_xmm_mem(ctx, v6);
    let v12 = constructor_x64_pcmpgtd(ctx, v10, v11);
    let v13 = &C::xmm_to_xmm_mem(ctx, v12);
    let v14 = constructor_x64_pand(ctx, v6, v13);
    let v15 = &C::xmm_to_xmm_mem(ctx, v10);
    let v16 = constructor_x64_pandn(ctx, v12, v15);
    let v17 = &C::xmm_to_xmm_mem(ctx, v16);
    let v18 = constructor_x64_por(ctx, v14, v17);
    let v19 = &C::xmm_to_xmm_mem(ctx, v18);
    let v21 = constructor_x64_pshuflw(ctx, v19, 0x8_u8);
    let v22 = &C::xmm_to_xmm_mem(ctx, v21);
    let v23 = constructor_x64_pshufhw(ctx, v22, 0x8_u8);
    let v24 = &C::xmm_to_xmm_mem(ctx, v23);
    let v25 = constructor_x64_pshufd(ctx, v24, 0x8_u8);
    // Rule at src/isa/x64/lower.isle line 4156.
    return v25;
}

// Generated as internal constructor for term x64_round.
pub fn constructor_x64_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RegMem,
    arg2: &RoundImm,
) -> Xmm {
    match arg0 {
        F32 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v5 = constructor_x64_roundss(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4226.
                return v5;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                // Rule at src/isa/x64/lower.isle line 4239.
                return v13;
            }
        }
        F64 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v6 = constructor_x64_roundsd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4229.
                return v6;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                // Rule at src/isa/x64/lower.isle line 4240.
                return v17;
            }
        }
        F32X4 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v7 = constructor_x64_roundps(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4232.
                return v7;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v11 = &constructor_round_libcall(ctx, F32, arg2);
                let v12 = C::libcall_1(ctx, v11, v9);
                let v13 = C::xmm_new(ctx, v12);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v20 = constructor_x64_pshufd(ctx, v18, 0x1_u8);
                let v21 = C::xmm_to_reg(ctx, v20);
                let v22 = C::libcall_1(ctx, v11, v21);
                let v23 = C::xmm_new(ctx, v22);
                let v24 = constructor_f32x4_insertlane(ctx, v13, v23, 0x1_u8);
                let v25 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v27 = constructor_x64_pshufd(ctx, v25, 0x2_u8);
                let v28 = C::xmm_to_reg(ctx, v27);
                let v29 = C::libcall_1(ctx, v11, v28);
                let v30 = C::xmm_new(ctx, v29);
                let v31 = constructor_f32x4_insertlane(ctx, v24, v30, 0x2_u8);
                let v32 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v34 = constructor_x64_pshufd(ctx, v32, 0x3_u8);
                let v35 = C::xmm_to_reg(ctx, v34);
                let v36 = C::libcall_1(ctx, v11, v35);
                let v37 = C::xmm_new(ctx, v36);
                let v38 = constructor_f32x4_insertlane(ctx, v31, v37, 0x3_u8);
                // Rule at src/isa/x64/lower.isle line 4241.
                return v38;
            }
        }
        F64X2 => {
            let v3 = C::use_sse41(ctx);
            if v3 == true {
                let v4 = &C::reg_mem_to_xmm_mem(ctx, arg1);
                let v8 = constructor_x64_roundpd(ctx, v4, arg2);
                // Rule at src/isa/x64/lower.isle line 4235.
                return v8;
            }
            if let &RegMem::Reg {
                reg: v9,
            } = arg1 {
                let v15 = &constructor_round_libcall(ctx, F64, arg2);
                let v16 = C::libcall_1(ctx, v15, v9);
                let v17 = C::xmm_new(ctx, v16);
                let v18 = &constructor_reg_to_xmm_mem(ctx, v9);
                let v40 = constructor_x64_pshufd(ctx, v18, 0xe_u8);
                let v41 = C::xmm_to_reg(ctx, v40);
                let v42 = C::libcall_1(ctx, v15, v41);
                let v43 = C::xmm_new(ctx, v42);
                let v44 = &C::xmm_to_xmm_mem(ctx, v43);
                let v45 = constructor_x64_movlhps(ctx, v17, v44);
                // Rule at src/isa/x64/lower.isle line 4253.
                return v45;
            }
        }
        _ => {}
    }
    if let &RegMem::Mem {
        addr: ref v46,
    } = arg1 {
        let v48 = constructor_x64_load(ctx, arg0, v46, &ExtKind::ZeroExtend);
        let v49 = RegMem::Reg {
            reg: v48,
        };
        let v50 = constructor_x64_round(ctx, arg0, &v49, arg2);
        // Rule at src/isa/x64/lower.isle line 4260.
        return v50;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "x64_round", "src/isa/x64/lower.isle line 4225")
}

// Generated as internal constructor for term round_libcall.
pub fn constructor_round_libcall<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &RoundImm,
) -> LibCall {
    match arg0 {
        F32 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 4268.
                    return LibCall::NearestF32;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 4266.
                    return LibCall::FloorF32;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 4264.
                    return LibCall::CeilF32;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 4270.
                    return LibCall::TruncF32;
                }
                _ => {}
            }
        }
        F64 => {
            match arg1 {
                &RoundImm::RoundNearest => {
                    // Rule at src/isa/x64/lower.isle line 4269.
                    return LibCall::NearestF64;
                }
                &RoundImm::RoundDown => {
                    // Rule at src/isa/x64/lower.isle line 4267.
                    return LibCall::FloorF64;
                }
                &RoundImm::RoundUp => {
                    // Rule at src/isa/x64/lower.isle line 4265.
                    return LibCall::CeilF64;
                }
                &RoundImm::RoundZero => {
                    // Rule at src/isa/x64/lower.isle line 4271.
                    return LibCall::TruncF64;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "round_libcall", "src/isa/x64/lower.isle line 4263")
}

// Generated as internal constructor for term nonzero_sdiv_divisor.
pub fn constructor_nonzero_sdiv_divisor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
) -> Reg {
    let v2 = C::def_inst(ctx, arg1);
    if let Some(v3) = v2 {
        let v4 = &C::inst_data(ctx, v3);
        if let &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } = v4 {
            if let &Opcode::Iconst = v5 {
                let v7 = C::safe_divisor_from_imm64(ctx, arg0, v6);
                if let Some(v8) = v7 {
                    let v9 = constructor_imm(ctx, arg0, v8);
                    // Rule at src/isa/x64/lower.isle line 4351.
                    return v9;
                }
            }
        }
    }
    let v10 = C::put_in_reg(ctx, arg1);
    let v11 = &C::raw_operand_size_of_type(ctx, arg0);
    let v12 = C::gpr_new(ctx, v10);
    let v13 = &constructor_reg_to_gpr_mem_imm(ctx, v10);
    let v14 = &constructor_x64_test(ctx, v11, v12, v13);
    let v17 = &constructor_trap_if(ctx, &CC::Z, &TrapCode::INTEGER_DIVISION_BY_ZERO);
    let v18 = &constructor_with_flags_side_effect(ctx, v14, v17);
    let v19 = constructor_side_effect(ctx, v18);
    // Rule at src/isa/x64/lower.isle line 4354.
    return v10;
}

// Generated as internal constructor for term lower_pshufb.
pub fn constructor_lower_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &RegMem,
) -> Xmm {
    let v2 = C::use_ssse3(ctx);
    if v2 == true {
        let v3 = &C::reg_mem_to_xmm_mem(ctx, arg1);
        let v4 = constructor_x64_pshufb(ctx, arg0, v3);
        // Rule at src/isa/x64/lower.isle line 4643.
        return v4;
    }
    match arg1 {
        &RegMem::Reg {
            reg: v5,
        } => {
            let v7 = C::xmm_to_reg(ctx, arg0);
            let v8 = C::libcall_2(ctx, &LibCall::X86Pshufb, v7, v5);
            let v9 = C::xmm_new(ctx, v8);
            // Rule at src/isa/x64/lower.isle line 4646.
            return v9;
        }
        &RegMem::Mem {
            addr: ref v10,
        } => {
            let v11 = &constructor_synthetic_amode_to_xmm_mem(ctx, v10);
            let v12 = constructor_x64_movdqu_load(ctx, v11);
            let v13 = C::xmm_to_reg(ctx, v12);
            let v14 = &constructor_xmm_to_reg_mem(ctx, v13);
            let v15 = &C::xmm_mem_to_reg_mem(ctx, v14);
            let v16 = constructor_lower_pshufb(ctx, arg0, v15);
            // Rule at src/isa/x64/lower.isle line 4648.
            return v16;
        }
        _ => {}
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "lower_pshufb", "src/isa/x64/lower.isle line 4642")
}

// Generated as internal constructor for term emit_vany_true.
pub fn constructor_emit_vany_true<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IcmpCondResult {
    let v1 = constructor_put_in_xmm(ctx, arg0);
    let v3 = constructor_xmm_zero(ctx, I8X16);
    let v4 = &C::xmm_to_xmm_mem(ctx, v3);
    let v5 = constructor_x64_pcmpeqb(ctx, v1, v4);
    let v7 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v5);
    let v9 = &constructor_x64_cmp_imm(ctx, &OperandSize::Size32, v7, 0xffff_u32);
    let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::NZ);
    // Rule at src/isa/x64/lower.isle line 4837.
    return v11.clone();
}

// Generated as internal constructor for term emit_vall_true.
pub fn constructor_emit_vall_true<C: Context>(
    ctx: &mut C,
    arg0: Value,
) -> IcmpCondResult {
    let v2 = C::use_sse41(ctx);
    if v2 == true {
        let v3 = constructor_put_in_xmm(ctx, arg0);
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_xmm_zero(ctx, v1);
        let v5 = constructor_vec_int_type(ctx, v1);
        let v6 = &C::xmm_to_xmm_mem(ctx, v4);
        let v7 = constructor_x64_pcmpeq(ctx, v5, v3, v6);
        let v8 = &C::xmm_to_xmm_mem(ctx, v7);
        let v9 = &constructor_x64_ptest(ctx, v7, v8);
        let v11 = &constructor_icmp_cond_result(ctx, v9, &CC::Z);
        // Rule at src/isa/x64/lower.isle line 4851.
        return v11.clone();
    }
    let v1 = C::value_type(ctx, arg0);
    let v12 = constructor_vec_int_type(ctx, v1);
    let v13 = constructor_put_in_xmm(ctx, arg0);
    let v14 = constructor_xmm_zero(ctx, v1);
    let v15 = &C::xmm_to_xmm_mem(ctx, v14);
    let v16 = constructor_x64_pcmpeq(ctx, v12, v13, v15);
    let v18 = constructor_x64_pmovmskb(ctx, &OperandSize::Size32, v16);
    let v19 = &C::gpr_to_gpr_mem_imm(ctx, v18);
    let v20 = &constructor_x64_test(ctx, &OperandSize::Size32, v18, v19);
    let v21 = &constructor_icmp_cond_result(ctx, v20, &CC::Z);
    // Rule at src/isa/x64/lower.isle line 4861.
    return v21.clone();
}

// Generated as internal constructor for term emit_ret_gpr.
pub fn constructor_emit_ret_gpr<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> Gpr {
    if let &AssemblerOutputs::RetGpr {
        inst: ref v1,
        gpr: v2,
    } = arg0 {
        let v3 = C::emit(ctx, v1);
        // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 16.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_ret_gpr", "/Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 15")
}

// Generated as internal constructor for term emit_ret_xmm.
pub fn constructor_emit_ret_xmm<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> Xmm {
    if let &AssemblerOutputs::RetXmm {
        inst: ref v1,
        xmm: v2,
    } = arg0 {
        let v3 = C::emit(ctx, v1);
        // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 21.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "emit_ret_xmm", "/Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 20")
}

// Generated as internal constructor for term defer_side_effect.
pub fn constructor_defer_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &AssemblerOutputs,
) -> SideEffectNoResult {
    if let &AssemblerOutputs::SideEffect {
        inst: ref v1,
    } = arg0 {
        let v2 = SideEffectNoResult::Inst {
            inst: v1.clone(),
        };
        // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 26.
        return v2;
    }
    unreachable!("no rule matched for term {} at {}; should it be partial?", "defer_side_effect", "/Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 25")
}

// Generated as internal constructor for term x64_addb_i.
pub fn constructor_x64_addb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_addb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 32.
    return v2;
}

// Generated as internal constructor for term x64_addw_i.
pub fn constructor_x64_addw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_addw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 37.
    return v2;
}

// Generated as internal constructor for term x64_addl_i.
pub fn constructor_x64_addl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_addl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 42.
    return v2;
}

// Generated as internal constructor for term x64_addq_i_sxl.
pub fn constructor_x64_addq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_addq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 47.
    return v2;
}

// Generated as internal constructor for term x64_addb_mi.
pub fn constructor_x64_addb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 52.
    return v4;
}

// Generated as internal constructor for term x64_addb_mi_mem.
pub fn constructor_x64_addb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 54.
    return v4.clone();
}

// Generated as internal constructor for term x64_addw_mi.
pub fn constructor_x64_addw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 59.
    return v4;
}

// Generated as internal constructor for term x64_addw_mi_mem.
pub fn constructor_x64_addw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 61.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mi.
pub fn constructor_x64_addl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 66.
    return v4;
}

// Generated as internal constructor for term x64_addl_mi_mem.
pub fn constructor_x64_addl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 68.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mi_sxl.
pub fn constructor_x64_addq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 73.
    return v4;
}

// Generated as internal constructor for term x64_addq_mi_sxl_mem.
pub fn constructor_x64_addq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 75.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mi_sxb.
pub fn constructor_x64_addl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 80.
    return v4;
}

// Generated as internal constructor for term x64_addl_mi_sxb_mem.
pub fn constructor_x64_addl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 82.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mi_sxb.
pub fn constructor_x64_addq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 87.
    return v4;
}

// Generated as internal constructor for term x64_addq_mi_sxb_mem.
pub fn constructor_x64_addq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 89.
    return v4.clone();
}

// Generated as internal constructor for term x64_addb_mr.
pub fn constructor_x64_addb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 94.
    return v4;
}

// Generated as internal constructor for term x64_addb_mr_mem.
pub fn constructor_x64_addb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 96.
    return v4.clone();
}

// Generated as internal constructor for term x64_addw_mr.
pub fn constructor_x64_addw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 101.
    return v4;
}

// Generated as internal constructor for term x64_addw_mr_mem.
pub fn constructor_x64_addw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 103.
    return v4.clone();
}

// Generated as internal constructor for term x64_addl_mr.
pub fn constructor_x64_addl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 108.
    return v4;
}

// Generated as internal constructor for term x64_addl_mr_mem.
pub fn constructor_x64_addl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 110.
    return v4.clone();
}

// Generated as internal constructor for term x64_addq_mr.
pub fn constructor_x64_addq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 115.
    return v4;
}

// Generated as internal constructor for term x64_addq_mr_mem.
pub fn constructor_x64_addq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_addq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 117.
    return v4.clone();
}

// Generated as internal constructor for term x64_addb_rm.
pub fn constructor_x64_addb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 122.
    return v3;
}

// Generated as internal constructor for term x64_addw_rm.
pub fn constructor_x64_addw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 127.
    return v3;
}

// Generated as internal constructor for term x64_addl_rm.
pub fn constructor_x64_addl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 132.
    return v3;
}

// Generated as internal constructor for term x64_addq_rm.
pub fn constructor_x64_addq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_addq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 137.
    return v3;
}

// Generated as internal constructor for term x64_adcb_i.
pub fn constructor_x64_adcb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_adcb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 142.
    return v2;
}

// Generated as internal constructor for term x64_adcw_i.
pub fn constructor_x64_adcw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_adcw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 147.
    return v2;
}

// Generated as internal constructor for term x64_adcl_i.
pub fn constructor_x64_adcl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_adcl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 152.
    return v2;
}

// Generated as internal constructor for term x64_adcq_i_sxl.
pub fn constructor_x64_adcq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_adcq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 157.
    return v2;
}

// Generated as internal constructor for term x64_adcb_mi.
pub fn constructor_x64_adcb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 162.
    return v4;
}

// Generated as internal constructor for term x64_adcb_mi_mem.
pub fn constructor_x64_adcb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 164.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcw_mi.
pub fn constructor_x64_adcw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 169.
    return v4;
}

// Generated as internal constructor for term x64_adcw_mi_mem.
pub fn constructor_x64_adcw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 171.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mi.
pub fn constructor_x64_adcl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 176.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mi_mem.
pub fn constructor_x64_adcl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 178.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mi_sxl.
pub fn constructor_x64_adcq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 183.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mi_sxl_mem.
pub fn constructor_x64_adcq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 185.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mi_sxb.
pub fn constructor_x64_adcl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 190.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mi_sxb_mem.
pub fn constructor_x64_adcl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 192.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mi_sxb.
pub fn constructor_x64_adcq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 197.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mi_sxb_mem.
pub fn constructor_x64_adcq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 199.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcb_mr.
pub fn constructor_x64_adcb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 204.
    return v4;
}

// Generated as internal constructor for term x64_adcb_mr_mem.
pub fn constructor_x64_adcb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 206.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcw_mr.
pub fn constructor_x64_adcw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 211.
    return v4;
}

// Generated as internal constructor for term x64_adcw_mr_mem.
pub fn constructor_x64_adcw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 213.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcl_mr.
pub fn constructor_x64_adcl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 218.
    return v4;
}

// Generated as internal constructor for term x64_adcl_mr_mem.
pub fn constructor_x64_adcl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 220.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcq_mr.
pub fn constructor_x64_adcq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 225.
    return v4;
}

// Generated as internal constructor for term x64_adcq_mr_mem.
pub fn constructor_x64_adcq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_adcq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 227.
    return v4.clone();
}

// Generated as internal constructor for term x64_adcb_rm.
pub fn constructor_x64_adcb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 232.
    return v3;
}

// Generated as internal constructor for term x64_adcw_rm.
pub fn constructor_x64_adcw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 237.
    return v3;
}

// Generated as internal constructor for term x64_adcl_rm.
pub fn constructor_x64_adcl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 242.
    return v3;
}

// Generated as internal constructor for term x64_adcq_rm.
pub fn constructor_x64_adcq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_adcq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 247.
    return v3;
}

// Generated as internal constructor for term x64_andb_i.
pub fn constructor_x64_andb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_andb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 252.
    return v2;
}

// Generated as internal constructor for term x64_andw_i.
pub fn constructor_x64_andw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_andw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 257.
    return v2;
}

// Generated as internal constructor for term x64_andl_i.
pub fn constructor_x64_andl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_andl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 262.
    return v2;
}

// Generated as internal constructor for term x64_andq_i_sxl.
pub fn constructor_x64_andq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_andq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 267.
    return v2;
}

// Generated as internal constructor for term x64_andb_mi.
pub fn constructor_x64_andb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 272.
    return v4;
}

// Generated as internal constructor for term x64_andb_mi_mem.
pub fn constructor_x64_andb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 274.
    return v4.clone();
}

// Generated as internal constructor for term x64_andw_mi.
pub fn constructor_x64_andw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 279.
    return v4;
}

// Generated as internal constructor for term x64_andw_mi_mem.
pub fn constructor_x64_andw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 281.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mi.
pub fn constructor_x64_andl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 286.
    return v4;
}

// Generated as internal constructor for term x64_andl_mi_mem.
pub fn constructor_x64_andl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 288.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mi_sxl.
pub fn constructor_x64_andq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 293.
    return v4;
}

// Generated as internal constructor for term x64_andq_mi_sxl_mem.
pub fn constructor_x64_andq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 295.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mi_sxb.
pub fn constructor_x64_andl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 300.
    return v4;
}

// Generated as internal constructor for term x64_andl_mi_sxb_mem.
pub fn constructor_x64_andl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 302.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mi_sxb.
pub fn constructor_x64_andq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 307.
    return v4;
}

// Generated as internal constructor for term x64_andq_mi_sxb_mem.
pub fn constructor_x64_andq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 309.
    return v4.clone();
}

// Generated as internal constructor for term x64_andb_mr.
pub fn constructor_x64_andb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 314.
    return v4;
}

// Generated as internal constructor for term x64_andb_mr_mem.
pub fn constructor_x64_andb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 316.
    return v4.clone();
}

// Generated as internal constructor for term x64_andw_mr.
pub fn constructor_x64_andw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 321.
    return v4;
}

// Generated as internal constructor for term x64_andw_mr_mem.
pub fn constructor_x64_andw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 323.
    return v4.clone();
}

// Generated as internal constructor for term x64_andl_mr.
pub fn constructor_x64_andl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 328.
    return v4;
}

// Generated as internal constructor for term x64_andl_mr_mem.
pub fn constructor_x64_andl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 330.
    return v4.clone();
}

// Generated as internal constructor for term x64_andq_mr.
pub fn constructor_x64_andq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 335.
    return v4;
}

// Generated as internal constructor for term x64_andq_mr_mem.
pub fn constructor_x64_andq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_andq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 337.
    return v4.clone();
}

// Generated as internal constructor for term x64_andb_rm.
pub fn constructor_x64_andb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 342.
    return v3;
}

// Generated as internal constructor for term x64_andw_rm.
pub fn constructor_x64_andw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 347.
    return v3;
}

// Generated as internal constructor for term x64_andl_rm.
pub fn constructor_x64_andl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 352.
    return v3;
}

// Generated as internal constructor for term x64_andq_rm.
pub fn constructor_x64_andq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_andq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 357.
    return v3;
}

// Generated as internal constructor for term x64_orb_i.
pub fn constructor_x64_orb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_orb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 362.
    return v2;
}

// Generated as internal constructor for term x64_orw_i.
pub fn constructor_x64_orw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_orw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 367.
    return v2;
}

// Generated as internal constructor for term x64_orl_i.
pub fn constructor_x64_orl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_orl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 372.
    return v2;
}

// Generated as internal constructor for term x64_orq_i_sxl.
pub fn constructor_x64_orq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_orq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 377.
    return v2;
}

// Generated as internal constructor for term x64_orb_mi.
pub fn constructor_x64_orb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 382.
    return v4;
}

// Generated as internal constructor for term x64_orb_mi_mem.
pub fn constructor_x64_orb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 384.
    return v4.clone();
}

// Generated as internal constructor for term x64_orw_mi.
pub fn constructor_x64_orw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 389.
    return v4;
}

// Generated as internal constructor for term x64_orw_mi_mem.
pub fn constructor_x64_orw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 391.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mi.
pub fn constructor_x64_orl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 396.
    return v4;
}

// Generated as internal constructor for term x64_orl_mi_mem.
pub fn constructor_x64_orl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 398.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mi_sxl.
pub fn constructor_x64_orq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 403.
    return v4;
}

// Generated as internal constructor for term x64_orq_mi_sxl_mem.
pub fn constructor_x64_orq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 405.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mi_sxb.
pub fn constructor_x64_orl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 410.
    return v4;
}

// Generated as internal constructor for term x64_orl_mi_sxb_mem.
pub fn constructor_x64_orl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 412.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mi_sxb.
pub fn constructor_x64_orq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 417.
    return v4;
}

// Generated as internal constructor for term x64_orq_mi_sxb_mem.
pub fn constructor_x64_orq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 419.
    return v4.clone();
}

// Generated as internal constructor for term x64_orb_mr.
pub fn constructor_x64_orb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 424.
    return v4;
}

// Generated as internal constructor for term x64_orb_mr_mem.
pub fn constructor_x64_orb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 426.
    return v4.clone();
}

// Generated as internal constructor for term x64_orw_mr.
pub fn constructor_x64_orw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 431.
    return v4;
}

// Generated as internal constructor for term x64_orw_mr_mem.
pub fn constructor_x64_orw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 433.
    return v4.clone();
}

// Generated as internal constructor for term x64_orl_mr.
pub fn constructor_x64_orl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 438.
    return v4;
}

// Generated as internal constructor for term x64_orl_mr_mem.
pub fn constructor_x64_orl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 440.
    return v4.clone();
}

// Generated as internal constructor for term x64_orq_mr.
pub fn constructor_x64_orq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 445.
    return v4;
}

// Generated as internal constructor for term x64_orq_mr_mem.
pub fn constructor_x64_orq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_orq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 447.
    return v4.clone();
}

// Generated as internal constructor for term x64_orb_rm.
pub fn constructor_x64_orb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 452.
    return v3;
}

// Generated as internal constructor for term x64_orw_rm.
pub fn constructor_x64_orw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 457.
    return v3;
}

// Generated as internal constructor for term x64_orl_rm.
pub fn constructor_x64_orl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 462.
    return v3;
}

// Generated as internal constructor for term x64_orq_rm.
pub fn constructor_x64_orq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_orq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 467.
    return v3;
}

// Generated as internal constructor for term x64_orpd_a.
pub fn constructor_x64_orpd_a<C: Context>(
    ctx: &mut C,
    arg0: Xmm,
    arg1: &XmmMem,
) -> Xmm {
    let v2 = &C::x64_orpd_a_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_xmm(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 472.
    return v3;
}

// Generated as internal constructor for term x64_shldw_mri.
pub fn constructor_x64_shldw_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 477.
    return v5;
}

// Generated as internal constructor for term x64_shldw_mri_mem.
pub fn constructor_x64_shldw_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldw_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 479.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldw_mrc.
pub fn constructor_x64_shldw_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldw_mrc_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 484.
    return v4;
}

// Generated as internal constructor for term x64_shldw_mrc_mem.
pub fn constructor_x64_shldw_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldw_mrc_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 486.
    return v4.clone();
}

// Generated as internal constructor for term x64_shldl_mri.
pub fn constructor_x64_shldl_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 491.
    return v5;
}

// Generated as internal constructor for term x64_shldl_mri_mem.
pub fn constructor_x64_shldl_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldl_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 493.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldq_mri.
pub fn constructor_x64_shldq_mri<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
    arg2: u8,
) -> Gpr {
    let v3 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mri_raw(ctx, v3, arg1, arg2);
    let v5 = constructor_emit_ret_gpr(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 498.
    return v5;
}

// Generated as internal constructor for term x64_shldq_mri_mem.
pub fn constructor_x64_shldq_mri_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v4 = &C::x64_shldq_mri_raw(ctx, v3, arg1, arg2);
    let v5 = &constructor_defer_side_effect(ctx, v4);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 500.
    return v5.clone();
}

// Generated as internal constructor for term x64_shldl_mrc.
pub fn constructor_x64_shldl_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldl_mrc_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 505.
    return v4;
}

// Generated as internal constructor for term x64_shldl_mrc_mem.
pub fn constructor_x64_shldl_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldl_mrc_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 507.
    return v4.clone();
}

// Generated as internal constructor for term x64_shldq_mrc.
pub fn constructor_x64_shldq_mrc<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldq_mrc_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 512.
    return v4;
}

// Generated as internal constructor for term x64_shldq_mrc_mem.
pub fn constructor_x64_shldq_mrc_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_shldq_mrc_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 514.
    return v4.clone();
}

// Generated as internal constructor for term x64_subb_i.
pub fn constructor_x64_subb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_subb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 519.
    return v2;
}

// Generated as internal constructor for term x64_subw_i.
pub fn constructor_x64_subw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_subw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 524.
    return v2;
}

// Generated as internal constructor for term x64_subl_i.
pub fn constructor_x64_subl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_subl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 529.
    return v2;
}

// Generated as internal constructor for term x64_subq_i_sxl.
pub fn constructor_x64_subq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_subq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 534.
    return v2;
}

// Generated as internal constructor for term x64_subb_mi.
pub fn constructor_x64_subb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 539.
    return v4;
}

// Generated as internal constructor for term x64_subb_mi_mem.
pub fn constructor_x64_subb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 541.
    return v4.clone();
}

// Generated as internal constructor for term x64_subw_mi.
pub fn constructor_x64_subw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 546.
    return v4;
}

// Generated as internal constructor for term x64_subw_mi_mem.
pub fn constructor_x64_subw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 548.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mi.
pub fn constructor_x64_subl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 553.
    return v4;
}

// Generated as internal constructor for term x64_subl_mi_mem.
pub fn constructor_x64_subl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 555.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mi_sxl.
pub fn constructor_x64_subq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 560.
    return v4;
}

// Generated as internal constructor for term x64_subq_mi_sxl_mem.
pub fn constructor_x64_subq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 562.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mi_sxb.
pub fn constructor_x64_subl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 567.
    return v4;
}

// Generated as internal constructor for term x64_subl_mi_sxb_mem.
pub fn constructor_x64_subl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 569.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mi_sxb.
pub fn constructor_x64_subq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 574.
    return v4;
}

// Generated as internal constructor for term x64_subq_mi_sxb_mem.
pub fn constructor_x64_subq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 576.
    return v4.clone();
}

// Generated as internal constructor for term x64_subb_mr.
pub fn constructor_x64_subb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 581.
    return v4;
}

// Generated as internal constructor for term x64_subb_mr_mem.
pub fn constructor_x64_subb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 583.
    return v4.clone();
}

// Generated as internal constructor for term x64_subw_mr.
pub fn constructor_x64_subw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 588.
    return v4;
}

// Generated as internal constructor for term x64_subw_mr_mem.
pub fn constructor_x64_subw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 590.
    return v4.clone();
}

// Generated as internal constructor for term x64_subl_mr.
pub fn constructor_x64_subl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 595.
    return v4;
}

// Generated as internal constructor for term x64_subl_mr_mem.
pub fn constructor_x64_subl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 597.
    return v4.clone();
}

// Generated as internal constructor for term x64_subq_mr.
pub fn constructor_x64_subq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 602.
    return v4;
}

// Generated as internal constructor for term x64_subq_mr_mem.
pub fn constructor_x64_subq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_subq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 604.
    return v4.clone();
}

// Generated as internal constructor for term x64_subb_rm.
pub fn constructor_x64_subb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 609.
    return v3;
}

// Generated as internal constructor for term x64_subw_rm.
pub fn constructor_x64_subw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 614.
    return v3;
}

// Generated as internal constructor for term x64_subl_rm.
pub fn constructor_x64_subl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 619.
    return v3;
}

// Generated as internal constructor for term x64_subq_rm.
pub fn constructor_x64_subq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_subq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 624.
    return v3;
}

// Generated as internal constructor for term x64_sbbb_i.
pub fn constructor_x64_sbbb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_sbbb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 629.
    return v2;
}

// Generated as internal constructor for term x64_sbbw_i.
pub fn constructor_x64_sbbw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_sbbw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 634.
    return v2;
}

// Generated as internal constructor for term x64_sbbl_i.
pub fn constructor_x64_sbbl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_sbbl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 639.
    return v2;
}

// Generated as internal constructor for term x64_sbbq_i_sxl.
pub fn constructor_x64_sbbq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_sbbq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 644.
    return v2;
}

// Generated as internal constructor for term x64_sbbb_mi.
pub fn constructor_x64_sbbb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 649.
    return v4;
}

// Generated as internal constructor for term x64_sbbb_mi_mem.
pub fn constructor_x64_sbbb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 651.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbw_mi.
pub fn constructor_x64_sbbw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 656.
    return v4;
}

// Generated as internal constructor for term x64_sbbw_mi_mem.
pub fn constructor_x64_sbbw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 658.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mi.
pub fn constructor_x64_sbbl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 663.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mi_mem.
pub fn constructor_x64_sbbl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 665.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mi_sxl.
pub fn constructor_x64_sbbq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 670.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mi_sxl_mem.
pub fn constructor_x64_sbbq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 672.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mi_sxb.
pub fn constructor_x64_sbbl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 677.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mi_sxb_mem.
pub fn constructor_x64_sbbl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 679.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mi_sxb.
pub fn constructor_x64_sbbq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 684.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mi_sxb_mem.
pub fn constructor_x64_sbbq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 686.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbb_mr.
pub fn constructor_x64_sbbb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 691.
    return v4;
}

// Generated as internal constructor for term x64_sbbb_mr_mem.
pub fn constructor_x64_sbbb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 693.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbw_mr.
pub fn constructor_x64_sbbw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 698.
    return v4;
}

// Generated as internal constructor for term x64_sbbw_mr_mem.
pub fn constructor_x64_sbbw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 700.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbl_mr.
pub fn constructor_x64_sbbl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 705.
    return v4;
}

// Generated as internal constructor for term x64_sbbl_mr_mem.
pub fn constructor_x64_sbbl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 707.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbq_mr.
pub fn constructor_x64_sbbq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 712.
    return v4;
}

// Generated as internal constructor for term x64_sbbq_mr_mem.
pub fn constructor_x64_sbbq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_sbbq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 714.
    return v4.clone();
}

// Generated as internal constructor for term x64_sbbb_rm.
pub fn constructor_x64_sbbb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 719.
    return v3;
}

// Generated as internal constructor for term x64_sbbw_rm.
pub fn constructor_x64_sbbw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 724.
    return v3;
}

// Generated as internal constructor for term x64_sbbl_rm.
pub fn constructor_x64_sbbl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 729.
    return v3;
}

// Generated as internal constructor for term x64_sbbq_rm.
pub fn constructor_x64_sbbq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_sbbq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 734.
    return v3;
}

// Generated as internal constructor for term x64_xorb_i.
pub fn constructor_x64_xorb_i<C: Context>(
    ctx: &mut C,
    arg0: u8,
) -> Gpr {
    let v1 = &C::x64_xorb_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 739.
    return v2;
}

// Generated as internal constructor for term x64_xorw_i.
pub fn constructor_x64_xorw_i<C: Context>(
    ctx: &mut C,
    arg0: u16,
) -> Gpr {
    let v1 = &C::x64_xorw_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 744.
    return v2;
}

// Generated as internal constructor for term x64_xorl_i.
pub fn constructor_x64_xorl_i<C: Context>(
    ctx: &mut C,
    arg0: u32,
) -> Gpr {
    let v1 = &C::x64_xorl_i_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 749.
    return v2;
}

// Generated as internal constructor for term x64_xorq_i_sxl.
pub fn constructor_x64_xorq_i_sxl<C: Context>(
    ctx: &mut C,
    arg0: i32,
) -> Gpr {
    let v1 = &C::x64_xorq_i_sxl_raw(ctx, arg0);
    let v2 = constructor_emit_ret_gpr(ctx, v1);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 754.
    return v2;
}

// Generated as internal constructor for term x64_xorb_mi.
pub fn constructor_x64_xorb_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 759.
    return v4;
}

// Generated as internal constructor for term x64_xorb_mi_mem.
pub fn constructor_x64_xorb_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 761.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorw_mi.
pub fn constructor_x64_xorw_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u16,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 766.
    return v4;
}

// Generated as internal constructor for term x64_xorw_mi_mem.
pub fn constructor_x64_xorw_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u16,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 768.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mi.
pub fn constructor_x64_xorl_mi<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: u32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 773.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mi_mem.
pub fn constructor_x64_xorl_mi_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: u32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 775.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mi_sxl.
pub fn constructor_x64_xorq_mi_sxl<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i32,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 780.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mi_sxl_mem.
pub fn constructor_x64_xorq_mi_sxl_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i32,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxl_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 782.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mi_sxb.
pub fn constructor_x64_xorl_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 787.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mi_sxb_mem.
pub fn constructor_x64_xorl_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 789.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mi_sxb.
pub fn constructor_x64_xorq_mi_sxb<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: i8,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 794.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mi_sxb_mem.
pub fn constructor_x64_xorq_mi_sxb_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: i8,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mi_sxb_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 796.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorb_mr.
pub fn constructor_x64_xorb_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 801.
    return v4;
}

// Generated as internal constructor for term x64_xorb_mr_mem.
pub fn constructor_x64_xorb_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorb_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 803.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorw_mr.
pub fn constructor_x64_xorw_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 808.
    return v4;
}

// Generated as internal constructor for term x64_xorw_mr_mem.
pub fn constructor_x64_xorw_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorw_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 810.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorl_mr.
pub fn constructor_x64_xorl_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 815.
    return v4;
}

// Generated as internal constructor for term x64_xorl_mr_mem.
pub fn constructor_x64_xorl_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorl_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 817.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorq_mr.
pub fn constructor_x64_xorq_mr<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: Gpr,
) -> Gpr {
    let v2 = &C::gpr_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mr_raw(ctx, v2, arg1);
    let v4 = constructor_emit_ret_gpr(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 822.
    return v4;
}

// Generated as internal constructor for term x64_xorq_mr_mem.
pub fn constructor_x64_xorq_mr_mem<C: Context>(
    ctx: &mut C,
    arg0: &Amode,
    arg1: Gpr,
) -> SideEffectNoResult {
    let v2 = &constructor_amode_to_gpr_mem(ctx, arg0);
    let v3 = &C::x64_xorq_mr_raw(ctx, v2, arg1);
    let v4 = &constructor_defer_side_effect(ctx, v3);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 824.
    return v4.clone();
}

// Generated as internal constructor for term x64_xorb_rm.
pub fn constructor_x64_xorb_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorb_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 829.
    return v3;
}

// Generated as internal constructor for term x64_xorw_rm.
pub fn constructor_x64_xorw_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorw_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 834.
    return v3;
}

// Generated as internal constructor for term x64_xorl_rm.
pub fn constructor_x64_xorl_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorl_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 839.
    return v3;
}

// Generated as internal constructor for term x64_xorq_rm.
pub fn constructor_x64_xorq_rm<C: Context>(
    ctx: &mut C,
    arg0: Gpr,
    arg1: &GprMem,
) -> Gpr {
    let v2 = &C::x64_xorq_rm_raw(ctx, arg0, arg1);
    let v3 = constructor_emit_ret_gpr(ctx, v2);
    // Rule at /Users/egd/internal/invoke-os/server/target/debug/build/cranelift-assembler-x64-95166c4f722968a2/out/assembler-definitions.isle line 844.
    return v3;
}
