// Generated by `generate::rust_assembler`, /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/lib.rs:14
#[doc(hidden)]
// /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:95
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub enum Inst<R: Registers> {
    addb_i(addb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addw_i(addw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addl_i(addl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addq_i_sxl(addq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addb_mi(addb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addw_mi(addw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addl_mi(addl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addq_mi_sxl(addq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addl_mi_sxb(addl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addq_mi_sxb(addq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addb_mr(addb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addw_mr(addw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addl_mr(addl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addq_mr(addq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addb_rm(addb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addw_rm(addw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addl_rm(addl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    addq_rm(addq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcb_i(adcb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcw_i(adcw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcl_i(adcl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcq_i_sxl(adcq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcb_mi(adcb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcw_mi(adcw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcl_mi(adcl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcq_mi_sxl(adcq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcl_mi_sxb(adcl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcq_mi_sxb(adcq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcb_mr(adcb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcw_mr(adcw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcl_mr(adcl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcq_mr(adcq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcb_rm(adcb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcw_rm(adcw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcl_rm(adcl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    adcq_rm(adcq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andb_i(andb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andw_i(andw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andl_i(andl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andq_i_sxl(andq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andb_mi(andb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andw_mi(andw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andl_mi(andl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andq_mi_sxl(andq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andl_mi_sxb(andl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andq_mi_sxb(andq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andb_mr(andb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andw_mr(andw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andl_mr(andl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andq_mr(andq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andb_rm(andb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andw_rm(andw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andl_rm(andl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    andq_rm(andq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orb_i(orb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orw_i(orw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orl_i(orl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orq_i_sxl(orq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orb_mi(orb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orw_mi(orw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orl_mi(orl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orq_mi_sxl(orq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orl_mi_sxb(orl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orq_mi_sxb(orq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orb_mr(orb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orw_mr(orw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orl_mr(orl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orq_mr(orq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orb_rm(orb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orw_rm(orw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orl_rm(orl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orq_rm(orq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    orpd_a(orpd_a<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldw_mri(shldw_mri<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldw_mrc(shldw_mrc<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldl_mri(shldl_mri<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldq_mri(shldq_mri<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldl_mrc(shldl_mrc<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    shldq_mrc(shldq_mrc<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subb_i(subb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subw_i(subw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subl_i(subl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subq_i_sxl(subq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subb_mi(subb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subw_mi(subw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subl_mi(subl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subq_mi_sxl(subq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subl_mi_sxb(subl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subq_mi_sxb(subq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subb_mr(subb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subw_mr(subw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subl_mr(subl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subq_mr(subq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subb_rm(subb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subw_rm(subw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subl_rm(subl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    subq_rm(subq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbb_i(sbbb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbw_i(sbbw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbl_i(sbbl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbq_i_sxl(sbbq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbb_mi(sbbb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbw_mi(sbbw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbl_mi(sbbl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbq_mi_sxl(sbbq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbl_mi_sxb(sbbl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbq_mi_sxb(sbbq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbb_mr(sbbb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbw_mr(sbbw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbl_mr(sbbl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbq_mr(sbbq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbb_rm(sbbb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbw_rm(sbbw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbl_rm(sbbl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    sbbq_rm(sbbq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorb_i(xorb_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorw_i(xorw_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorl_i(xorl_i), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorq_i_sxl(xorq_i_sxl), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorb_mi(xorb_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorw_mi(xorw_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorl_mi(xorl_mi<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorq_mi_sxl(xorq_mi_sxl<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorl_mi_sxb(xorl_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorq_mi_sxb(xorq_mi_sxb<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorb_mr(xorb_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorw_mr(xorw_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorl_mr(xorl_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorq_mr(xorq_mr<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorb_rm(xorb_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorw_rm(xorw_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorl_rm(xorl_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
    xorq_rm(xorq_rm<R>), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:103
}
impl<R: Registers> std::fmt::Display for Inst<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::addb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::addq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::adcq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::andq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::orpd_a(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldw_mri(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldw_mrc(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldl_mri(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldq_mri(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldl_mrc(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::shldq_mrc(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::subq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::sbbq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorb_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorw_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorl_i(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorq_i_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorb_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorw_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorl_mi(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorq_mi_sxl(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorl_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorq_mi_sxb(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorb_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorw_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorl_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorq_mr(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorb_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorw_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorl_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
            Self::xorq_rm(i) => write!(f, "{i}"), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:134
        }
    }
}
impl<R: Registers> Inst<R> {
    pub fn encode(&self, b: &mut impl CodeSink, o: &impl KnownOffsetTable) {
        match self {
            Self::addb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::addq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::adcq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::andq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::orpd_a(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldw_mri(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldw_mrc(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldl_mri(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldq_mri(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldl_mrc(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::shldq_mrc(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::subq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::sbbq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorb_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorw_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorl_i(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorq_i_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorb_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorw_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorl_mi(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorq_mi_sxl(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorl_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorq_mi_sxb(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorb_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorw_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorl_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorq_mr(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorb_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorw_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorl_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
            Self::xorq_rm(i) => i.encode(b, o), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:154
        }
    }
}
impl<R: Registers> Inst<R> {
    pub fn visit(&mut self, v: &mut impl RegisterVisitor<R>) {
        match self {
            Self::addb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::addq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::adcq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::andq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::orpd_a(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldw_mri(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldw_mrc(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldl_mri(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldq_mri(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldl_mrc(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::shldq_mrc(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::subq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::sbbq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorb_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorw_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorl_i(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorq_i_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorb_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorw_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorl_mi(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorq_mi_sxl(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorl_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorq_mi_sxb(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorb_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorw_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorl_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorq_mr(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorb_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorw_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorl_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
            Self::xorq_rm(i) => i.visit(v), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:174
        }
    }
}
impl<R: Registers> Inst<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:188
    pub fn features(&self) -> Vec<Feature> {
        match self {
            Self::addb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::addq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::adcq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::andq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::orpd_a(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldw_mri(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldw_mrc(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldl_mri(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldq_mri(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldl_mrc(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::shldq_mrc(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::subq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::sbbq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorb_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorw_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorl_i(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorq_i_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorb_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorw_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorl_mi(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorq_mi_sxl(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorl_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorq_mi_sxb(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorb_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorw_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorl_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorq_mr(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorb_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorw_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorl_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
            Self::xorq_rm(i) => i.features(), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate.rs:195
        }
    }
}

/// `addb: I(al[rw], imm8) => 0x04 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct addb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl addb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x4); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for addb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addb_i> for Inst<R> {
    fn from(inst: addb_i) -> Self {
        Self::addb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addw: I(ax[rw], imm16) => 0x66 + 0x05 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct addw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl addw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for addw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addw_i> for Inst<R> {
    fn from(inst: addw_i) -> Self {
        Self::addw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addl: I(eax[rw], imm32) => 0x05 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct addl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl addl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for addl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addl_i> for Inst<R> {
    fn from(inst: addl_i) -> Self {
        Self::addl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x05 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct addq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl addq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for addq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addq_i_sxl> for Inst<R> {
    fn from(inst: addq_i_sxl) -> Self {
        Self::addq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addb: MI(rm8[rw], imm8) => 0x80 /0 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addb_mi<R>> for Inst<R> {
    fn from(inst: addb_mi<R>) -> Self {
        Self::addb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addw: MI(rm16[rw], imm16) => 0x66 + 0x81 /0 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addw_mi<R>> for Inst<R> {
    fn from(inst: addw_mi<R>) -> Self {
        Self::addw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addl: MI(rm32[rw], imm32) => 0x81 /0 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addl_mi<R>> for Inst<R> {
    fn from(inst: addl_mi<R>) -> Self {
        Self::addl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /0 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addq_mi_sxl<R>> for Inst<R> {
    fn from(inst: addq_mi_sxl<R>) -> Self {
        Self::addq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /0 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addl_mi_sxb<R>> for Inst<R> {
    fn from(inst: addl_mi_sxb<R>) -> Self {
        Self::addl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /0 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addq_mi_sxb<R>> for Inst<R> {
    fn from(inst: addq_mi_sxb<R>) -> Self {
        Self::addq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addb: MR(rm8[rw], r8) => 0x00 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addb_mr<R>> for Inst<R> {
    fn from(inst: addb_mr<R>) -> Self {
        Self::addb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addw: MR(rm16[rw], r16) => 0x66 + 0x01 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x1); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addw_mr<R>> for Inst<R> {
    fn from(inst: addw_mr<R>) -> Self {
        Self::addw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addl: MR(rm32[rw], r32) => 0x01 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x1); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addl_mr<R>> for Inst<R> {
    fn from(inst: addl_mr<R>) -> Self {
        Self::addl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addq: MR(rm64[rw], r64) => REX.W + 0x01 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x1); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addq_mr<R>> for Inst<R> {
    fn from(inst: addq_mr<R>) -> Self {
        Self::addq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addb: RM(r8[rw], rm8) => 0x02 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x2); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addb_rm<R>> for Inst<R> {
    fn from(inst: addb_rm<R>) -> Self {
        Self::addb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addw: RM(r16[rw], rm16) => 0x66 + 0x03 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x3); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addw_rm<R>> for Inst<R> {
    fn from(inst: addw_rm<R>) -> Self {
        Self::addw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addl: RM(r32[rw], rm32) => 0x03 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x3); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addl_rm<R>> for Inst<R> {
    fn from(inst: addl_rm<R>) -> Self {
        Self::addl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `addq: RM(r64[rw], rm64) => REX.W + 0x03 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct addq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> addq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x3); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for addq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "addq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<addq_rm<R>> for Inst<R> {
    fn from(inst: addq_rm<R>) -> Self {
        Self::addq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcb: I(al[rw], imm8) => 0x14 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct adcb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl adcb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x14); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for adcb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcb_i> for Inst<R> {
    fn from(inst: adcb_i) -> Self {
        Self::adcb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcw: I(ax[rw], imm16) => 0x66 + 0x15 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct adcw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl adcw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x15); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for adcw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcw_i> for Inst<R> {
    fn from(inst: adcw_i) -> Self {
        Self::adcw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcl: I(eax[rw], imm32) => 0x15 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct adcl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl adcl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x15); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for adcl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcl_i> for Inst<R> {
    fn from(inst: adcl_i) -> Self {
        Self::adcl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x15 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct adcq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl adcq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x15); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for adcq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcq_i_sxl> for Inst<R> {
    fn from(inst: adcq_i_sxl) -> Self {
        Self::adcq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcb: MI(rm8[rw], imm8) => 0x80 /2 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcb_mi<R>> for Inst<R> {
    fn from(inst: adcb_mi<R>) -> Self {
        Self::adcb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcw: MI(rm16[rw], imm16) => 0x66 + 0x81 /2 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcw_mi<R>> for Inst<R> {
    fn from(inst: adcw_mi<R>) -> Self {
        Self::adcw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcl: MI(rm32[rw], imm32) => 0x81 /2 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcl_mi<R>> for Inst<R> {
    fn from(inst: adcl_mi<R>) -> Self {
        Self::adcl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /2 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcq_mi_sxl<R>> for Inst<R> {
    fn from(inst: adcq_mi_sxl<R>) -> Self {
        Self::adcq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /2 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcl_mi_sxb<R>> for Inst<R> {
    fn from(inst: adcl_mi_sxb<R>) -> Self {
        Self::adcl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /2 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x2; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcq_mi_sxb<R>> for Inst<R> {
    fn from(inst: adcq_mi_sxb<R>) -> Self {
        Self::adcq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcb: MR(rm8[rw], r8) => 0x10 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x10); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcb_mr<R>> for Inst<R> {
    fn from(inst: adcb_mr<R>) -> Self {
        Self::adcb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcw: MR(rm16[rw], r16) => 0x66 + 0x11 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x11); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcw_mr<R>> for Inst<R> {
    fn from(inst: adcw_mr<R>) -> Self {
        Self::adcw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcl: MR(rm32[rw], r32) => 0x11 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x11); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcl_mr<R>> for Inst<R> {
    fn from(inst: adcl_mr<R>) -> Self {
        Self::adcl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcq: MR(rm64[rw], r64) => REX.W + 0x11 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x11); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcq_mr<R>> for Inst<R> {
    fn from(inst: adcq_mr<R>) -> Self {
        Self::adcq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcb: RM(r8[rw], rm8) => 0x12 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x12); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcb_rm<R>> for Inst<R> {
    fn from(inst: adcb_rm<R>) -> Self {
        Self::adcb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcw: RM(r16[rw], rm16) => 0x66 + 0x13 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x13); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcw_rm<R>> for Inst<R> {
    fn from(inst: adcw_rm<R>) -> Self {
        Self::adcw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcl: RM(r32[rw], rm32) => 0x13 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x13); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcl_rm<R>> for Inst<R> {
    fn from(inst: adcl_rm<R>) -> Self {
        Self::adcl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `adcq: RM(r64[rw], rm64) => REX.W + 0x13 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct adcq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> adcq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x13); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for adcq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "adcq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<adcq_rm<R>> for Inst<R> {
    fn from(inst: adcq_rm<R>) -> Self {
        Self::adcq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andb: I(al[rw], imm8) => 0x24 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct andb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl andb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x24); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for andb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andb_i> for Inst<R> {
    fn from(inst: andb_i) -> Self {
        Self::andb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andw: I(ax[rw], imm16) => 0x66 + 0x25 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct andw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl andw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x25); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for andw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andw_i> for Inst<R> {
    fn from(inst: andw_i) -> Self {
        Self::andw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andl: I(eax[rw], imm32) => 0x25 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct andl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl andl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x25); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for andl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andl_i> for Inst<R> {
    fn from(inst: andl_i) -> Self {
        Self::andl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x25 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct andq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl andq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x25); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for andq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andq_i_sxl> for Inst<R> {
    fn from(inst: andq_i_sxl) -> Self {
        Self::andq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andb: MI(rm8[rw], imm8) => 0x80 /4 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andb_mi<R>> for Inst<R> {
    fn from(inst: andb_mi<R>) -> Self {
        Self::andb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andw: MI(rm16[rw], imm16) => 0x66 + 0x81 /4 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andw_mi<R>> for Inst<R> {
    fn from(inst: andw_mi<R>) -> Self {
        Self::andw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andl: MI(rm32[rw], imm32) => 0x81 /4 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andl_mi<R>> for Inst<R> {
    fn from(inst: andl_mi<R>) -> Self {
        Self::andl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /4 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andq_mi_sxl<R>> for Inst<R> {
    fn from(inst: andq_mi_sxl<R>) -> Self {
        Self::andq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /4 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andl_mi_sxb<R>> for Inst<R> {
    fn from(inst: andl_mi_sxb<R>) -> Self {
        Self::andl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /4 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x4; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andq_mi_sxb<R>> for Inst<R> {
    fn from(inst: andq_mi_sxb<R>) -> Self {
        Self::andq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andb: MR(rm8[rw], r8) => 0x20 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x20); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andb_mr<R>> for Inst<R> {
    fn from(inst: andb_mr<R>) -> Self {
        Self::andb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andw: MR(rm16[rw], r16) => 0x66 + 0x21 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x21); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andw_mr<R>> for Inst<R> {
    fn from(inst: andw_mr<R>) -> Self {
        Self::andw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andl: MR(rm32[rw], r32) => 0x21 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x21); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andl_mr<R>> for Inst<R> {
    fn from(inst: andl_mr<R>) -> Self {
        Self::andl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andq: MR(rm64[rw], r64) => REX.W + 0x21 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x21); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andq_mr<R>> for Inst<R> {
    fn from(inst: andq_mr<R>) -> Self {
        Self::andq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andb: RM(r8[rw], rm8) => 0x22 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x22); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andb_rm<R>> for Inst<R> {
    fn from(inst: andb_rm<R>) -> Self {
        Self::andb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andw: RM(r16[rw], rm16) => 0x66 + 0x23 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x23); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andw_rm<R>> for Inst<R> {
    fn from(inst: andw_rm<R>) -> Self {
        Self::andw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andl: RM(r32[rw], rm32) => 0x23 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x23); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andl_rm<R>> for Inst<R> {
    fn from(inst: andl_rm<R>) -> Self {
        Self::andl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `andq: RM(r64[rw], rm64) => REX.W + 0x23 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct andq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> andq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x23); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for andq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "andq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<andq_rm<R>> for Inst<R> {
    fn from(inst: andq_rm<R>) -> Self {
        Self::andq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orb: I(al[rw], imm8) => 0x0c ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct orb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl orb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0xc); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for orb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orb_i> for Inst<R> {
    fn from(inst: orb_i) -> Self {
        Self::orb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orw: I(ax[rw], imm16) => 0x66 + 0x0d iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct orw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl orw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0xd); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for orw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orw_i> for Inst<R> {
    fn from(inst: orw_i) -> Self {
        Self::orw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orl: I(eax[rw], imm32) => 0x0d id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct orl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl orl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0xd); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for orl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orl_i> for Inst<R> {
    fn from(inst: orl_i) -> Self {
        Self::orl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x0d id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct orq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl orq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0xd); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for orq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orq_i_sxl> for Inst<R> {
    fn from(inst: orq_i_sxl) -> Self {
        Self::orq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orb: MI(rm8[rw], imm8) => 0x80 /1 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orb_mi<R>> for Inst<R> {
    fn from(inst: orb_mi<R>) -> Self {
        Self::orb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orw: MI(rm16[rw], imm16) => 0x66 + 0x81 /1 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orw_mi<R>> for Inst<R> {
    fn from(inst: orw_mi<R>) -> Self {
        Self::orw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orl: MI(rm32[rw], imm32) => 0x81 /1 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orl_mi<R>> for Inst<R> {
    fn from(inst: orl_mi<R>) -> Self {
        Self::orl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /1 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orq_mi_sxl<R>> for Inst<R> {
    fn from(inst: orq_mi_sxl<R>) -> Self {
        Self::orq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /1 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orl_mi_sxb<R>> for Inst<R> {
    fn from(inst: orl_mi_sxb<R>) -> Self {
        Self::orl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /1 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x1; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orq_mi_sxb<R>> for Inst<R> {
    fn from(inst: orq_mi_sxb<R>) -> Self {
        Self::orq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orb: MR(rm8[rw], r8) => 0x08 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x8); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orb_mr<R>> for Inst<R> {
    fn from(inst: orb_mr<R>) -> Self {
        Self::orb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orw: MR(rm16[rw], r16) => 0x66 + 0x09 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x9); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orw_mr<R>> for Inst<R> {
    fn from(inst: orw_mr<R>) -> Self {
        Self::orw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orl: MR(rm32[rw], r32) => 0x09 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x9); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orl_mr<R>> for Inst<R> {
    fn from(inst: orl_mr<R>) -> Self {
        Self::orl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orq: MR(rm64[rw], r64) => REX.W + 0x09 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x9); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orq_mr<R>> for Inst<R> {
    fn from(inst: orq_mr<R>) -> Self {
        Self::orq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orb: RM(r8[rw], rm8) => 0x0a /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0xa); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orb_rm<R>> for Inst<R> {
    fn from(inst: orb_rm<R>) -> Self {
        Self::orb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orw: RM(r16[rw], rm16) => 0x66 + 0x0b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0xb); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orw_rm<R>> for Inst<R> {
    fn from(inst: orw_rm<R>) -> Self {
        Self::orw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orl: RM(r32[rw], rm32) => 0x0b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0xb); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orl_rm<R>> for Inst<R> {
    fn from(inst: orl_rm<R>) -> Self {
        Self::orl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orq: RM(r64[rw], rm64) => REX.W + 0x0b /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0xb); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orq_rm<R>> for Inst<R> {
    fn from(inst: orq_rm<R>) -> Self {
        Self::orq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `orpd: A(xmm[rw], rm128) => 0x66 + 0x0F + 0x56 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct orpd_a<R>
where
    R: Registers,
{
    pub xmm: Xmm<R::ReadWriteXmm>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm128: XmmMem<R::ReadXmm, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> orpd_a<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(xmm: Xmm<R::ReadWriteXmm>, rm128: XmmMem<R::ReadXmm, R::ReadGpr>) -> Self {
        Self { xmm, rm128 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let XmmMem::Mem(rm128) = &self.rm128 {
            if let Some(trap_code) = rm128.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let xmm = self.xmm.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm128 {
            XmmMem::Xmm(rm128) => rex.emit_two_op(buf, xmm, rm128.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:114
            XmmMem::Mem(rm128) => rm128.emit_rex_prefix(rex, xmm, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:115
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0x56); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let xmm = self.xmm.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm128 {
            XmmMem::Xmm(rm128) => emit_modrm(buf, xmm, rm128.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:179
            XmmMem::Mem(rm128) => emit_modrm_sib_disp(buf, off, xmm, rm128, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:180
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write_xmm(self.xmm.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:164
        match &mut self.rm128 {
            XmmMem::Xmm(r) => visitor.read_xmm(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:178
            XmmMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:179
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for orpd_a<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let xmm = self.xmm.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm128 = self.rm128.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "orpd {rm128}, {xmm}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<orpd_a<R>> for Inst<R> {
    fn from(inst: orpd_a<R>) -> Self {
        Self::orpd_a(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldw: MRI(rm16[rw], r16, imm8) => 0x66 + 0x0F + 0xa4 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldw_mri<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldw_mri<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(
        rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>,
        r16: Gpr<R::ReadGpr>,
        imm8: Imm8,
    ) -> Self {
        Self { rm16, r16, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa4); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldw_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldw {imm8}, {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldw_mri<R>> for Inst<R> {
    fn from(inst: shldw_mri<R>) -> Self {
        Self::shldw_mri(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldw: MRC(rm16[rw], r16, cl) => 0x66 + 0x0F + 0xa5 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldw_mrc<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldw_mrc<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        visitor.fixed_read(&R::ReadGpr::new(reg::enc::RCX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldw_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let cl = "%cl"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldw {cl}, {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldw_mrc<R>> for Inst<R> {
    fn from(inst: shldw_mrc<R>) -> Self {
        Self::shldw_mrc(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldl: MRI(rm32[rw], r32, imm8) => 0x0F + 0xa4 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldl_mri<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldl_mri<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(
        rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>,
        r32: Gpr<R::ReadGpr>,
        imm8: Imm8,
    ) -> Self {
        Self { rm32, r32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa4); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldl_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldl {imm8}, {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldl_mri<R>> for Inst<R> {
    fn from(inst: shldl_mri<R>) -> Self {
        Self::shldl_mri(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldq: MRI(rm64[rw], r64, imm8) => REX.W + 0x0F + 0xa4 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldq_mri<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldq_mri<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(
        rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>,
        r64: Gpr<R::ReadGpr>,
        imm8: Imm8,
    ) -> Self {
        Self { rm64, r64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa4); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldq_mri<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldq {imm8}, {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldq_mri<R>> for Inst<R> {
    fn from(inst: shldq_mri<R>) -> Self {
        Self::shldq_mri(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldl: MRC(rm32[rw], r32, cl) => 0x0F + 0xa5 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldl_mrc<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldl_mrc<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        visitor.fixed_read(&R::ReadGpr::new(reg::enc::RCX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldl_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let cl = "%cl"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldl {cl}, {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldl_mrc<R>> for Inst<R> {
    fn from(inst: shldl_mrc<R>) -> Self {
        Self::shldl_mrc(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `shldq: MRC(rm64[rw], r64, cl) => REX.W + 0x0F + 0xa5 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct shldq_mrc<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> shldq_mrc<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x0f); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:65
        buf.put1(0xa5); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        visitor.fixed_read(&R::ReadGpr::new(reg::enc::RCX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for shldq_mrc<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let cl = "%cl"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "shldq {cl}, {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<shldq_mrc<R>> for Inst<R> {
    fn from(inst: shldq_mrc<R>) -> Self {
        Self::shldq_mrc(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subb: I(al[rw], imm8) => 0x2c ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct subb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl subb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x2c); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for subb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subb_i> for Inst<R> {
    fn from(inst: subb_i) -> Self {
        Self::subb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subw: I(ax[rw], imm16) => 0x66 + 0x2d iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct subw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl subw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x2d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for subw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subw_i> for Inst<R> {
    fn from(inst: subw_i) -> Self {
        Self::subw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subl: I(eax[rw], imm32) => 0x2d id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct subl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl subl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x2d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for subl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subl_i> for Inst<R> {
    fn from(inst: subl_i) -> Self {
        Self::subl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x2d id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct subq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl subq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x2d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for subq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subq_i_sxl> for Inst<R> {
    fn from(inst: subq_i_sxl) -> Self {
        Self::subq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subb: MI(rm8[rw], imm8) => 0x80 /5 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subb_mi<R>> for Inst<R> {
    fn from(inst: subb_mi<R>) -> Self {
        Self::subb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subw: MI(rm16[rw], imm16) => 0x66 + 0x81 /5 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subw_mi<R>> for Inst<R> {
    fn from(inst: subw_mi<R>) -> Self {
        Self::subw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subl: MI(rm32[rw], imm32) => 0x81 /5 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subl_mi<R>> for Inst<R> {
    fn from(inst: subl_mi<R>) -> Self {
        Self::subl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /5 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subq_mi_sxl<R>> for Inst<R> {
    fn from(inst: subq_mi_sxl<R>) -> Self {
        Self::subq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /5 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subl_mi_sxb<R>> for Inst<R> {
    fn from(inst: subl_mi_sxb<R>) -> Self {
        Self::subl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /5 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x5; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subq_mi_sxb<R>> for Inst<R> {
    fn from(inst: subq_mi_sxb<R>) -> Self {
        Self::subq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subb: MR(rm8[rw], r8) => 0x28 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x28); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subb_mr<R>> for Inst<R> {
    fn from(inst: subb_mr<R>) -> Self {
        Self::subb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subw: MR(rm16[rw], r16) => 0x66 + 0x29 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x29); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subw_mr<R>> for Inst<R> {
    fn from(inst: subw_mr<R>) -> Self {
        Self::subw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subl: MR(rm32[rw], r32) => 0x29 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x29); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subl_mr<R>> for Inst<R> {
    fn from(inst: subl_mr<R>) -> Self {
        Self::subl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subq: MR(rm64[rw], r64) => REX.W + 0x29 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x29); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subq_mr<R>> for Inst<R> {
    fn from(inst: subq_mr<R>) -> Self {
        Self::subq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subb: RM(r8[rw], rm8) => 0x2a /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x2a); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subb_rm<R>> for Inst<R> {
    fn from(inst: subb_rm<R>) -> Self {
        Self::subb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subw: RM(r16[rw], rm16) => 0x66 + 0x2b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x2b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subw_rm<R>> for Inst<R> {
    fn from(inst: subw_rm<R>) -> Self {
        Self::subw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subl: RM(r32[rw], rm32) => 0x2b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x2b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subl_rm<R>> for Inst<R> {
    fn from(inst: subl_rm<R>) -> Self {
        Self::subl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `subq: RM(r64[rw], rm64) => REX.W + 0x2b /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct subq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> subq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x2b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for subq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "subq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<subq_rm<R>> for Inst<R> {
    fn from(inst: subq_rm<R>) -> Self {
        Self::subq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbb: I(al[rw], imm8) => 0x1c ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct sbbb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl sbbb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x1c); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for sbbb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbb_i> for Inst<R> {
    fn from(inst: sbbb_i) -> Self {
        Self::sbbb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbw: I(ax[rw], imm16) => 0x66 + 0x1d iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct sbbw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl sbbw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x1d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for sbbw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbw_i> for Inst<R> {
    fn from(inst: sbbw_i) -> Self {
        Self::sbbw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbl: I(eax[rw], imm32) => 0x1d id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct sbbl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl sbbl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x1d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for sbbl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbl_i> for Inst<R> {
    fn from(inst: sbbl_i) -> Self {
        Self::sbbl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x1d id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct sbbq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl sbbq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x1d); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for sbbq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbq_i_sxl> for Inst<R> {
    fn from(inst: sbbq_i_sxl) -> Self {
        Self::sbbq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbb: MI(rm8[rw], imm8) => 0x80 /3 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbb_mi<R>> for Inst<R> {
    fn from(inst: sbbb_mi<R>) -> Self {
        Self::sbbb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbw: MI(rm16[rw], imm16) => 0x66 + 0x81 /3 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbw_mi<R>> for Inst<R> {
    fn from(inst: sbbw_mi<R>) -> Self {
        Self::sbbw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbl: MI(rm32[rw], imm32) => 0x81 /3 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbl_mi<R>> for Inst<R> {
    fn from(inst: sbbl_mi<R>) -> Self {
        Self::sbbl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /3 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbq_mi_sxl<R>> for Inst<R> {
    fn from(inst: sbbq_mi_sxl<R>) -> Self {
        Self::sbbq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /3 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbl_mi_sxb<R>> for Inst<R> {
    fn from(inst: sbbl_mi_sxb<R>) -> Self {
        Self::sbbl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /3 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x3; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbq_mi_sxb<R>> for Inst<R> {
    fn from(inst: sbbq_mi_sxb<R>) -> Self {
        Self::sbbq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbb: MR(rm8[rw], r8) => 0x18 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x18); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbb_mr<R>> for Inst<R> {
    fn from(inst: sbbb_mr<R>) -> Self {
        Self::sbbb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbw: MR(rm16[rw], r16) => 0x66 + 0x19 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x19); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbw_mr<R>> for Inst<R> {
    fn from(inst: sbbw_mr<R>) -> Self {
        Self::sbbw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbl: MR(rm32[rw], r32) => 0x19 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x19); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbl_mr<R>> for Inst<R> {
    fn from(inst: sbbl_mr<R>) -> Self {
        Self::sbbl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbq: MR(rm64[rw], r64) => REX.W + 0x19 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x19); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbq_mr<R>> for Inst<R> {
    fn from(inst: sbbq_mr<R>) -> Self {
        Self::sbbq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbb: RM(r8[rw], rm8) => 0x1a /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x1a); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbb_rm<R>> for Inst<R> {
    fn from(inst: sbbb_rm<R>) -> Self {
        Self::sbbb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbw: RM(r16[rw], rm16) => 0x66 + 0x1b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x1b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbw_rm<R>> for Inst<R> {
    fn from(inst: sbbw_rm<R>) -> Self {
        Self::sbbw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbl: RM(r32[rw], rm32) => 0x1b /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x1b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbl_rm<R>> for Inst<R> {
    fn from(inst: sbbl_rm<R>) -> Self {
        Self::sbbl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `sbbq: RM(r64[rw], rm64) => REX.W + 0x1b /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct sbbq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> sbbq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x1b); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for sbbq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "sbbq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<sbbq_rm<R>> for Inst<R> {
    fn from(inst: sbbq_rm<R>) -> Self {
        Self::sbbq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorb: I(al[rw], imm8) => 0x34 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct xorb_i {
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl xorb_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm8: Imm8) -> Self {
        Self { imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let al = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, al.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x34); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for xorb_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let al = "%al"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorb {imm8}, {al}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorb_i> for Inst<R> {
    fn from(inst: xorb_i) -> Self {
        Self::xorb_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorw: I(ax[rw], imm16) => 0x66 + 0x35 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct xorw_i {
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl xorw_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm16: Imm16) -> Self {
        Self { imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let ax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, ax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x35); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for xorw_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let ax = "%ax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorw {imm16}, {ax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorw_i> for Inst<R> {
    fn from(inst: xorw_i) -> Self {
        Self::xorw_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorl: I(eax[rw], imm32) => 0x35 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct xorl_i {
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl xorl_i {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Imm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let eax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, eax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x35); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for xorl_i {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let eax = "%eax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorl {imm32}, {eax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorl_i> for Inst<R> {
    fn from(inst: xorl_i) -> Self {
        Self::xorl_i(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorq: I_SXL(rax[rw], imm32[sxq]) => REX.W + 0x35 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
pub struct xorq_i_sxl {
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl xorq_i_sxl {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(imm32: Simm32) -> Self {
        Self { imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, _: &impl KnownOffsetTable) {
        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let rax = reg::enc::RAX; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:91
        let digit = 0; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:93
        rex.emit_two_op(buf, digit, rax.enc()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:94

        // Emit opcode(s).
        buf.put1(0x35); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit<R: Registers>(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.fixed_read_write(&R::ReadWriteGpr::new(reg::enc::RAX)); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:158
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl std::fmt::Display for xorq_i_sxl {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rax = "%rax"; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorq {imm32}, {rax}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorq_i_sxl> for Inst<R> {
    fn from(inst: xorq_i_sxl) -> Self {
        Self::xorq_i_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorb: MI(rm8[rw], imm8) => 0x80 /6 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorb_mi<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Imm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorb_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Imm8) -> Self {
        Self { rm8, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x80); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, digit, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, digit, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorb_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorb {imm8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorb_mi<R>> for Inst<R> {
    fn from(inst: xorb_mi<R>) -> Self {
        Self::xorb_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorw: MI(rm16[rw], imm16) => 0x66 + 0x81 /6 iw [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorw_mi<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm16: Imm16, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorw_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm16: Imm16) -> Self {
        Self { rm16, imm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, digit, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, digit, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm16.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorw_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm16 = self.imm16.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorw {imm16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorw_mi<R>> for Inst<R> {
    fn from(inst: xorw_mi<R>) -> Self {
        Self::xorw_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorl: MI(rm32[rw], imm32) => 0x81 /6 id [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorl_mi<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Imm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorl_mi<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Imm32) -> Self {
        Self { rm32, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorl_mi<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorl {imm32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorl_mi<R>> for Inst<R> {
    fn from(inst: xorl_mi<R>) -> Self {
        Self::xorl_mi(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorq: MI_SXL(rm64[rw], imm32[sxq]) => REX.W + 0x81 /6 id [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorq_mi_sxl<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm32: Simm32, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorq_mi_sxl<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm32: Simm32) -> Self {
        Self { rm64, imm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x81); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm32.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorq_mi_sxl<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm32 = self.imm32.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorq {imm32}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorq_mi_sxl<R>> for Inst<R> {
    fn from(inst: xorq_mi_sxl<R>) -> Self {
        Self::xorq_mi_sxl(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorl: MI_SXB(rm32[rw], imm8[sxl]) => 0x83 /6 ib [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorl_mi_sxb<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorl_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm32, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, digit, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, digit, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorl_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendLong); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorl {imm8}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorl_mi_sxb<R>> for Inst<R> {
    fn from(inst: xorl_mi_sxb<R>) -> Self {
        Self::xorl_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorq: MI_SXB(rm64[rw], imm8[sxq]) => REX.W + 0x83 /6 ib [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorq_mi_sxb<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub imm8: Simm8, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorq_mi_sxb<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, imm8: Simm8) -> Self {
        Self { rm64, imm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:100
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:103
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, digit, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:104
        }

        // Emit opcode(s).
        buf.put1(0x83); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let digit = 0x6; // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:165
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, digit, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:168
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, digit, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:169
        }

        // Emit immediate.
        self.imm8.encode(buf); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:233
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorq_mi_sxb<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let imm8 = self.imm8.to_string(Extension::SignExtendQuad); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorq {imm8}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorq_mi_sxb<R>> for Inst<R> {
    fn from(inst: xorq_mi_sxb<R>) -> Self {
        Self::xorq_mi_sxb(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorb: MR(rm8[rw], r8) => 0x30 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorb_mr<R>
where
    R: Registers,
{
    pub rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r8: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorb_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm8: GprMem<R::ReadWriteGpr, R::ReadGpr>, r8: Gpr<R::ReadGpr>) -> Self {
        Self { rm8, r8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x30); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorb_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorb {r8}, {rm8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorb_mr<R>> for Inst<R> {
    fn from(inst: xorb_mr<R>) -> Self {
        Self::xorb_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorw: MR(rm16[rw], r16) => 0x66 + 0x31 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorw_mr<R>
where
    R: Registers,
{
    pub rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r16: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorw_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm16: GprMem<R::ReadWriteGpr, R::ReadGpr>, r16: Gpr<R::ReadGpr>) -> Self {
        Self { rm16, r16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x31); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorw_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorw {r16}, {rm16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorw_mr<R>> for Inst<R> {
    fn from(inst: xorw_mr<R>) -> Self {
        Self::xorw_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorl: MR(rm32[rw], r32) => 0x31 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorl_mr<R>
where
    R: Registers,
{
    pub rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r32: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorl_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm32: GprMem<R::ReadWriteGpr, R::ReadGpr>, r32: Gpr<R::ReadGpr>) -> Self {
        Self { rm32, r32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x31); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorl_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorl {r32}, {rm32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorl_mr<R>> for Inst<R> {
    fn from(inst: xorl_mr<R>) -> Self {
        Self::xorl_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorq: MR(rm64[rw], r64) => REX.W + 0x31 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorq_mr<R>
where
    R: Registers,
{
    pub rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub r64: Gpr<R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorq_mr<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(rm64: GprMem<R::ReadWriteGpr, R::ReadGpr>, r64: Gpr<R::ReadGpr>) -> Self {
        Self { rm64, r64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:128
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:136
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:137
        }

        // Emit opcode(s).
        buf.put1(0x31); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:199
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:211
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:212
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read_write(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
        visitor.read(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorq_mr<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorq {r64}, {rm64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorq_mr<R>> for Inst<R> {
    fn from(inst: xorq_mr<R>) -> Self {
        Self::xorq_mr(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorb: RM(r8[rw], rm8) => 0x32 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorb_rm<R>
where
    R: Registers,
{
    pub r8: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm8: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorb_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r8: Gpr<R::ReadWriteGpr>, rm8: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r8, rm8 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm8) = &self.rm8 {
            if let Some(trap_code) = rm8.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let mut rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:80
        self.r8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        self.rm8.always_emit_if_8bit_needed(&mut rex); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:82
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm8 {
            GprMem::Gpr(rm8) => rex.emit_two_op(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm8) => rm8.emit_rex_prefix(rex, r8, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x32); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r8 = self.r8.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm8 {
            GprMem::Gpr(rm8) => emit_modrm(buf, r8, rm8.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm8) => emit_modrm_sib_disp(buf, off, r8, rm8, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r8.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm8 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorb_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r8 = self.r8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm8 = self.rm8.to_string(Size::Byte); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorb {rm8}, {r8}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorb_rm<R>> for Inst<R> {
    fn from(inst: xorb_rm<R>) -> Self {
        Self::xorb_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorw: RM(r16[rw], rm16) => 0x66 + 0x33 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorw_rm<R>
where
    R: Registers,
{
    pub r16: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm16: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorw_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r16: Gpr<R::ReadWriteGpr>, rm16: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r16, rm16 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm16) = &self.rm16 {
            if let Some(trap_code) = rm16.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit legacy prefixes.
        buf.put1(0x66); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:44

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm16 {
            GprMem::Gpr(rm16) => rex.emit_two_op(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm16) => rm16.emit_rex_prefix(rex, r16, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x33); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r16 = self.r16.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm16 {
            GprMem::Gpr(rm16) => emit_modrm(buf, r16, rm16.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm16) => emit_modrm_sib_disp(buf, off, r16, rm16, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r16.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm16 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorw_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r16 = self.r16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm16 = self.rm16.to_string(Size::Word); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorw {rm16}, {r16}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorw_rm<R>> for Inst<R> {
    fn from(inst: xorw_rm<R>) -> Self {
        Self::xorw_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorl: RM(r32[rw], rm32) => 0x33 /r [_64b | compat]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorl_rm<R>
where
    R: Registers,
{
    pub r32: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm32: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorl_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r32: Gpr<R::ReadWriteGpr>, rm32: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r32, rm32 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm32) = &self.rm32 {
            if let Some(trap_code) = rm32.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::clear_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm32 {
            GprMem::Gpr(rm32) => rex.emit_two_op(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm32) => rm32.emit_rex_prefix(rex, r32, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x33); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r32 = self.r32.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm32 {
            GprMem::Gpr(rm32) => emit_modrm(buf, r32, rm32.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm32) => emit_modrm_sib_disp(buf, off, r32, rm32, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r32.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm32 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b, Feature::compat] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorl_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r32 = self.r32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm32 = self.rm32.to_string(Size::Doubleword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorl {rm32}, {r32}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorl_rm<R>> for Inst<R> {
    fn from(inst: xorl_rm<R>) -> Self {
        Self::xorl_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

/// `xorq: RM(r64[rw], rm64) => REX.W + 0x33 /r [_64b]`
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[cfg_attr(
    any(test, feature = "fuzz"),
    arbitrary(bound = "R: crate::fuzz::RegistersArbitrary")
)]
pub struct xorq_rm<R>
where
    R: Registers,
{
    pub r64: Gpr<R::ReadWriteGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
    pub rm64: GprMem<R::ReadGpr, R::ReadGpr>, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:25
}
impl<R: Registers> xorq_rm<R> {
    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:88
    pub fn new(r64: Gpr<R::ReadWriteGpr>, rm64: GprMem<R::ReadGpr, R::ReadGpr>) -> Self {
        Self { r64, rm64 }
    }

    pub fn encode(&self, buf: &mut impl CodeSink, off: &impl KnownOffsetTable) {
        // Emit trap.
        if let GprMem::Mem(rm64) = &self.rm64 {
            if let Some(trap_code) = rm64.trap_code() {
                buf.add_trap(trap_code); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:121
            }
        }

        // Emit REX prefix.
        let rex = RexFlags::set_w(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:85
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:109
        match &self.rm64 {
            GprMem::Gpr(rm64) => rex.emit_two_op(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:118
            GprMem::Mem(rm64) => rm64.emit_rex_prefix(rex, r64, buf), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:119
        }

        // Emit opcode(s).
        buf.put1(0x33); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:67

        // Emit ModR/M byte.
        let r64 = self.r64.enc(); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:174
        match &self.rm64 {
            GprMem::Gpr(rm64) => emit_modrm(buf, r64, rm64.enc()), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:186
            GprMem::Mem(rm64) => emit_modrm_sib_disp(buf, off, r64, rm64, 0, None), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/format.rs:187
        }
    }

    pub fn visit(&mut self, visitor: &mut impl RegisterVisitor<R>) {
        visitor.read_write(self.r64.as_mut()); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:168
        match &mut self.rm64 {
            GprMem::Gpr(r) => visitor.read(r), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:189
            GprMem::Mem(m) => m.registers_mut().iter_mut().for_each(|r| visitor.read(r)), // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:190
        }
    }

    #[must_use] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:207
    pub fn features(&self) -> Vec<Feature> {
        vec![Feature::_64b] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:215
    }
}
impl<R: Registers> std::fmt::Display for xorq_rm<R> {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        let r64 = self.r64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        let rm64 = self.rm64.to_string(Size::Quadword); // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:231
        write!(f, "xorq {rm64}, {r64}") // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:235
    }
}
impl<R: Registers> From<xorq_rm<R>> for Inst<R> {
    fn from(inst: xorq_rm<R>) -> Self {
        Self::xorq_rm(inst) // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/inst.rs:250
    }
}

#[doc(hidden)]
// /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/features.rs:12
#[derive(Clone, Debug)]
#[cfg_attr(any(test, feature = "fuzz"), derive(arbitrary::Arbitrary))]
#[derive(Copy, PartialEq)] // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/features.rs:14
pub enum Feature {
    _64b, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/features.rs:18
    compat, // /Users/egd/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/cranelift-assembler-x64-meta-0.118.0/src/generate/features.rs:18
}
